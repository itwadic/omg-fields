!function(e){function t(a){if(n[a])return n[a].exports;var i=n[a]={i:a,l:!1,exports:{}};return e[a].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var n={};t.m=e,t.c=n,t.d=function(e,n,a){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:a})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=5)}([function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=e.querySelector(t.list);return o(n,t.onDrag),r(n,t.onRemove),{add:function(e){var a=t.listTemplate(e),i=document.createRange().createContextualFragment(a);n.appendChild(i)}}};var a=n(8),i=function(e){return e&&e.__esModule?e:{default:e}}(a),r=function(e,t){var n=e.querySelectorAll("li");return e.addEventListener("click",function(n){if("svg"===("svg"===n.target.tagName?n.target:n.target.closest("svg")).tagName){var a=n.target.closest("li"),i=a.querySelector("span").innerHTML;e.removeChild(a),t(i)}}),n},o=function(e,t){(0,i.default)([e]).on("dragend",function(n){var a=e.querySelectorAll("li");t(e,a)})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=e.querySelector(t),a=function(){return n.value?JSON.parse(n.value):[]},i=function(e){return a().concat(e)},r=function(e,t){return t(a(),e)};return{add:function(e){n.value=JSON.stringify(i(e))},remove:function(e,t){n.value=JSON.stringify(r(e,t))},update:function(e){n.value=JSON.stringify(e)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.removeItems=function(e,t){return function(n){e.remove(n,t)}},t.dragItems=function(e,t){return function(n,a){var i=t(n,a);e.update(i)}},t.onDragObject=function(e,t){return[].reduce.call(t,function(e,t){var n={id:t.dataset.id,title:t.querySelector("span").innerHTML};return e.concat([n])},[])},t.onDragText=function(e,t){return[].reduce.call(t,function(e,t){var n=t.querySelector("span").innerHTML;return e.concat([n])},[])},t.onDragImage=function(e,t){return[].reduce.call(t,function(e,t){var n=parseInt(t.querySelector("span").innerHTML);return e.concat([n])},[])},t.onRemoveObject=function(e,t){return e.filter(function(e){return e.title!==t})},t.onRemoveText=function(e,t){return e.filter(function(e){return e!==t})},t.onRemoveImage=function(e,t){return e.filter(function(e){return e!==parseInt(t)})},t.onDragTable=function(e,t){return[].reduce.call(t,function(e,t){var n=t.querySelector(".table-list-key").innerHTML,a=t.querySelector(".table-list-value").innerHTML;return e.concat([{key:n,value:a}])},[])},t.onRemoveTable=function(e,t){return e.filter(function(e){return e.key!==t})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,o){var c=void 0;if(!e)return!1;var l=!1;e.addEventListener("keyup",function(u){if(0===u.target.value.length&&o&&(c=u.target.value,o()),3>u.target.value.length)return c=u.target.value,!1;if(u.target.value===c){var s=a(u);return s&&n(s,e),!1}c=u.target.value,e.classList.add("show"),l=i(l,r,e,t)}),e.addEventListener("input",function(t){var i=a(t);i&&n(i,e)})};var a=function(e){var t=e.target,n=t.value,a=t.getAttribute("list"),i=document.getElementById(a).childNodes,r=[].reduce.call(i,function(e,t){return t.value===n?e.concat({id:t.dataset.id,title:t.value}):e},[]);return 0!==r.length&&r[0]},i=function(e,t,n,a){var i=u(n.value),r=a+i;return e&&e.abort(),e=new XMLHttpRequest,e.addEventListener("load",function(e){t(!1,e)},!1),e.onreadystatechange=function(){4===e.readyState&&l(e.responseText)?t(!1,{results:JSON.parse(e.responseText),input:n}):e.responseText&&l(e.responseText)&&t({message:JSON.parse(e.responseText),input:n},!1)},e.addEventListener("error",function(e){t(e,!1)},!1),e.addEventListener("abort",function(e){t(!0,!1)},!1),e.open("GET",r,!0),e.send(),e},r=function(e,t){if(e){if(!0===e)return!1;e.input.classList.remove("show"),console.warn(e)}if(t){if(!Array.isArray(t.results))return!1;o(t.results,t.input)}},o=function(e,t){var n=t.getAttribute("list"),a=document.getElementById(n),i=e.reduce(function(e,t){var n=c(t);return e.concat(n)},"");t.classList.remove("show"),a.innerHTML=i},c=function(e){return e.title?"<option data-id="+e.id+' value="'+e.title.rendered+'">':e.name?"<option data-id="+e.id+' value="'+e.name+'">':void 0},l=function(e){if("string"!=typeof e)return!1;try{return JSON.parse(e),!0}catch(e){return!1}},u=function(e){return encodeURIComponent(e.toLowerCase())}},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}var i=n(6),r=(a(i),n(7)),o=a(r),c=n(20),l=a(c),u=n(1),s=(a(u),n(21)),d=a(s),f=n(22),m=a(f),g=n(23),p=a(g),v=n(25),h=a(v),y=n(26),b=a(y),w=function(e){return'<li class="text-list-item">\n        <span>'+e+'</span>\n        <svg viewBox="0 0 20 20">\n            <path d="M10 2c4.42 0 8 3.58 8 8s-3.58 8-8 8-8-3.58-8-8 3.58-8 8-8zM15 13l-3-3 3-3-2-2-3 3-3-3-2 2 3 3-3 3 2 2 3-3 3 3z"></path>\n        </svg>\n    </li>'},D=function(e){return'<li class="text-list-item" data-id="'+e.id+'">\n        <span>'+e.title+'</span>\n        <svg viewBox="0 0 20 20">\n            <path d="M10 2c4.42 0 8 3.58 8 8s-3.58 8-8 8-8-3.58-8-8 3.58-8 8-8zM15 13l-3-3 3-3-2-2-3 3-3-3-2 2 3 3-3 3 2 2 3-3 3 3z"></path>\n        </svg>\n    </li>'};document.addEventListener("DOMContentLoaded",function(){(0,m.default)(),(0,o.default)({parent:".text-list",button:".text-list-add",list:".text-list-list",hidden:".text-list-hidden",listTemplate:w}),(0,l.default)({parent:".autosuggest-list",input:"autosuggest-list-input",list:".autosuggest-list-list",hidden:".autosuggest-list-hidden",listTemplate:D}),(0,d.default)({parent:".autosuggest-wrapper",input:".autosuggest-input",hidden:".autosuggest-hidden"}),(0,p.default)(),(0,h.default)(),(0,b.default)()})},function(e,t){},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=document.querySelectorAll(e.parent);if(!t)return!1;[].forEach.call(t,function(t){var n=t.querySelector("input[type=text]"),a=t.querySelector(e.button),i=(0,c.default)(t,e.hidden),o=(0,l.removeItems)(i,l.onRemoveText),u=(0,l.dragItems)(i,l.onDragText),s=(0,r.default)(t,Object.assign(e,{onDrag:u,onRemove:o}));t.addEventListener("keypress",function(e){13===e.keyCode&&(e.preventDefault(),s.add(n.value),i.add(n.value),n.value="")}),a.addEventListener("click",function(e){e.preventDefault(),s.add(n.value),i.add(n.value),n.value=""})})};var i=n(1),r=a(i),o=n(2),c=a(o),l=n(3)},function(e,t,n){"use strict";(function(t){function a(e,t){function n(e){return-1!==ue.containers.indexOf(e)||le.isContainer(e)}function a(e){var t=e?"remove":"add";i(C,t,"mousedown",x),i(C,t,"mouseup",j)}function c(e){i(C,e?"remove":"add","mousemove",E)}function p(e){var t=e?"remove":"add";w[t](C,"selectstart",T),w[t](C,"click",T)}function h(){a(!0),j({})}function T(e){oe&&e.preventDefault()}function x(e){if(ee=e.clientX,te=e.clientY,!(1!==r(e)||e.metaKey||e.ctrlKey)){var t=e.target,n=S(t);n&&(oe=n,c(),"mousedown"===e.type&&(g(t)?t.focus():e.preventDefault()))}}function E(e){if(oe){if(0===r(e))return void j({});if(void 0===e.clientX||e.clientX!==ee||void 0===e.clientY||e.clientY!==te){if(le.ignoreInputTextSelection){var t=y("clientX",e),n=y("clientY",e);if(g(M.elementFromPoint(t,n)))return}var a=oe;c(!0),p(),P(),k(a);var i=o(V);Z=y("pageX",e)-i.left,Q=y("pageY",e)-i.top,D.add(ie||V,"gu-transit"),J(),q(e)}}}function S(e){if(!(ue.dragging&&$||n(e))){for(var t=e;m(e)&&!1===n(m(e));){if(le.invalid(e,t))return;if(!(e=m(e)))return}var a=m(e);if(a&&!le.invalid(e,t)){if(le.moves(e,a,t,v(e)))return{item:e,source:a}}}}function O(e){return!!S(e)}function I(e){var t=S(e);t&&k(t)}function k(e){X(e.item,e.source)&&(ie=e.item.cloneNode(!0),ue.emit("cloned",ie,e.item,"copy")),G=e.source,V=e.item,ne=ae=v(e.item),ue.dragging=!0,ue.emit("drag",V,G)}function _(){return!1}function P(){if(ue.dragging){var e=ie||V;N(e,m(e))}}function A(){oe=!1,c(!0),p(!0)}function j(e){if(A(),ue.dragging){var t=ie||V,n=y("clientX",e),a=y("clientY",e),i=l($,n,a),r=R(i,n,a);r&&(ie&&le.copySortSource||!ie||r!==G)?N(t,r):le.removeOnSpill?F():L()}}function N(e,t){var n=m(e);ie&&le.copySortSource&&t===G&&n.removeChild(V),H(t)?ue.emit("cancel",e,G,G):ue.emit("drop",e,t,G,ae),Y()}function F(){if(ue.dragging){var e=ie||V,t=m(e);t&&t.removeChild(e),ue.emit(ie?"cancel":"remove",e,t,G),Y()}}function L(e){if(ue.dragging){var t=arguments.length>0?e:le.revertOnSpill,n=ie||V,a=m(n),i=H(a);!1===i&&t&&(ie?a&&a.removeChild(ie):G.insertBefore(n,ne)),i||t?ue.emit("cancel",n,G,G):ue.emit("drop",n,a,G,ae),Y()}}function Y(){var e=ie||V;A(),U(),e&&D.rm(e,"gu-transit"),re&&clearTimeout(re),ue.dragging=!1,ce&&ue.emit("out",e,ce,G),ue.emit("dragend",e),G=V=ie=ne=ae=re=ce=null}function H(e,t){var n;return n=void 0!==t?t:$?ae:v(ie||V),e===G&&n===ne}function R(e,t,a){for(var i=e;i&&!function(){if(!1===n(i))return!1;var r=z(i,e),o=K(i,r,t,a);return!!H(i,o)||le.accepts(V,i,G,o)}();)i=m(i);return i}function q(e){function t(e){ue.emit(e,o,ce,G)}if($){e.preventDefault();var n=y("clientX",e),a=y("clientY",e),i=n-Z,r=a-Q;$.style.left=i+"px",$.style.top=r+"px";var o=ie||V,c=l($,n,a),u=R(c,n,a),s=null!==u&&u!==ce;(s||null===u)&&(function(){ce&&t("out")}(),ce=u,function(){s&&t("over")}());var d=m(o);if(u===G&&ie&&!le.copySortSource)return void(d&&d.removeChild(o));var f,g=z(u,c);if(null!==g)f=K(u,g,n,a);else{if(!0!==le.revertOnSpill||ie)return void(ie&&d&&d.removeChild(o));f=ne,u=G}(null===f&&s||f!==o&&f!==v(o))&&(ae=f,u.insertBefore(o,f),ue.emit("shadow",o,u,G))}}function B(e){D.rm(e,"gu-hide")}function W(e){ue.dragging&&D.add(e,"gu-hide")}function J(){if(!$){var e=V.getBoundingClientRect();$=V.cloneNode(!0),$.style.width=d(e)+"px",$.style.height=f(e)+"px",D.rm($,"gu-transit"),D.add($,"gu-mirror"),le.mirrorContainer.appendChild($),i(C,"add","mousemove",q),D.add(le.mirrorContainer,"gu-unselectable"),ue.emit("cloned",$,V,"mirror")}}function U(){$&&(D.rm(le.mirrorContainer,"gu-unselectable"),i(C,"remove","mousemove",q),m($).removeChild($),$=null)}function z(e,t){for(var n=t;n!==e&&m(n)!==e;)n=m(n);return n===C?null:n}function K(e,t,n,a){function i(e){return e?v(t):t}var r="horizontal"===le.direction;return t!==e?function(){var e=t.getBoundingClientRect();return i(r?n>e.left+d(e)/2:a>e.top+f(e)/2)}():function(){var t,i,o,c=e.children.length;for(t=0;t<c;t++){if(i=e.children[t],o=i.getBoundingClientRect(),r&&o.left+o.width/2>n)return i;if(!r&&o.top+o.height/2>a)return i}return null}()}function X(e,t){return"boolean"==typeof le.copy?le.copy:le.copy(e,t)}1===arguments.length&&!1===Array.isArray(e)&&(t=e,e=[]);var $,G,V,Z,Q,ee,te,ne,ae,ie,re,oe,ce=null,le=t||{};void 0===le.moves&&(le.moves=s),void 0===le.accepts&&(le.accepts=s),void 0===le.invalid&&(le.invalid=_),void 0===le.containers&&(le.containers=e||[]),void 0===le.isContainer&&(le.isContainer=u),void 0===le.copy&&(le.copy=!1),void 0===le.copySortSource&&(le.copySortSource=!1),void 0===le.revertOnSpill&&(le.revertOnSpill=!1),void 0===le.removeOnSpill&&(le.removeOnSpill=!1),void 0===le.direction&&(le.direction="vertical"),void 0===le.ignoreInputTextSelection&&(le.ignoreInputTextSelection=!0),void 0===le.mirrorContainer&&(le.mirrorContainer=M.body);var ue=b({containers:le.containers,start:I,end:P,cancel:L,remove:F,destroy:h,canMove:O,dragging:!1});return!0===le.removeOnSpill&&ue.on("over",B).on("out",W),a(),ue}function i(e,n,a,i){var r={mouseup:"touchend",mousedown:"touchstart",mousemove:"touchmove"},o={mouseup:"pointerup",mousedown:"pointerdown",mousemove:"pointermove"},c={mouseup:"MSPointerUp",mousedown:"MSPointerDown",mousemove:"MSPointerMove"};t.navigator.pointerEnabled?w[n](e,o[a],i):t.navigator.msPointerEnabled?w[n](e,c[a],i):(w[n](e,r[a],i),w[n](e,a,i))}function r(e){if(void 0!==e.touches)return e.touches.length;if(void 0!==e.which&&0!==e.which)return e.which;if(void 0!==e.buttons)return e.buttons;var t=e.button;return void 0!==t?1&t?1:2&t?3:4&t?2:0:void 0}function o(e){var t=e.getBoundingClientRect();return{left:t.left+c("scrollLeft","pageXOffset"),top:t.top+c("scrollTop","pageYOffset")}}function c(e,n){return void 0!==t[n]?t[n]:C.clientHeight?C[e]:M.body[e]}function l(e,t,n){var a,i=e||{},r=i.className;return i.className+=" gu-hide",a=M.elementFromPoint(t,n),i.className=r,a}function u(){return!1}function s(){return!0}function d(e){return e.width||e.right-e.left}function f(e){return e.height||e.bottom-e.top}function m(e){return e.parentNode===M?null:e.parentNode}function g(e){return"INPUT"===e.tagName||"TEXTAREA"===e.tagName||"SELECT"===e.tagName||p(e)}function p(e){return!!e&&("false"!==e.contentEditable&&("true"===e.contentEditable||p(m(e))))}function v(e){return e.nextElementSibling||function(){var t=e;do{t=t.nextSibling}while(t&&1!==t.nodeType);return t}()}function h(e){return e.targetTouches&&e.targetTouches.length?e.targetTouches[0]:e.changedTouches&&e.changedTouches.length?e.changedTouches[0]:e}function y(e,t){var n=h(t),a={pageX:"clientX",pageY:"clientY"};return e in a&&!(e in n)&&a[e]in n&&(e=a[e]),n[e]}var b=n(9),w=n(16),D=n(19),M=document,C=M.documentElement;e.exports=a}).call(t,n(0))},function(e,t,n){"use strict";var a=n(10),i=n(11);e.exports=function(e,t){var n=t||{},r={};return void 0===e&&(e={}),e.on=function(t,n){return r[t]?r[t].push(n):r[t]=[n],e},e.once=function(t,n){return n._once=!0,e.on(t,n),e},e.off=function(t,n){var a=arguments.length;if(1===a)delete r[t];else if(0===a)r={};else{var i=r[t];if(!i)return e;i.splice(i.indexOf(n),1)}return e},e.emit=function(){var t=a(arguments);return e.emitterSnapshot(t.shift()).apply(this,t)},e.emitterSnapshot=function(t){var o=(r[t]||[]).slice(0);return function(){var r=a(arguments),c=this||e;if("error"===t&&!1!==n.throws&&!o.length)throw 1===r.length?r[0]:r;return o.forEach(function(a){n.async?i(a,r,c):a.apply(c,r),a._once&&e.off(t,a)}),e}},e}},function(e,t){e.exports=function(e,t){return Array.prototype.slice.call(e,t)}},function(e,t,n){"use strict";var a=n(12);e.exports=function(e,t,n){e&&a(function(){e.apply(n||null,t||[])})}},function(e,t,n){(function(t){var n,a="function"==typeof t;n=a?function(e){t(e)}:function(e){setTimeout(e,0)},e.exports=n}).call(t,n(13).setImmediate)},function(e,t,n){(function(e){function a(e,t){this._id=e,this._clearFn=t}var i=Function.prototype.apply;t.setTimeout=function(){return new a(i.call(setTimeout,window,arguments),clearTimeout)},t.setInterval=function(){return new a(i.call(setInterval,window,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},a.prototype.unref=a.prototype.ref=function(){},a.prototype.close=function(){this._clearFn.call(window,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(14),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(t,n(0))},function(e,t,n){(function(e,t){!function(e,n){"use strict";function a(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var a={callback:e,args:t};return u[l]=a,c(l),l++}function i(e){delete u[e]}function r(e){var t=e.callback,a=e.args;switch(a.length){case 0:t();break;case 1:t(a[0]);break;case 2:t(a[0],a[1]);break;case 3:t(a[0],a[1],a[2]);break;default:t.apply(n,a)}}function o(e){if(s)setTimeout(o,0,e);else{var t=u[e];if(t){s=!0;try{r(t)}finally{i(e),s=!1}}}}if(!e.setImmediate){var c,l=1,u={},s=!1,d=e.document,f=Object.getPrototypeOf&&Object.getPrototypeOf(e);f=f&&f.setTimeout?f:e,"[object process]"==={}.toString.call(e.process)?function(){c=function(e){t.nextTick(function(){o(e)})}}():function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?function(){var t="setImmediate$"+Math.random()+"$",n=function(n){n.source===e&&"string"==typeof n.data&&0===n.data.indexOf(t)&&o(+n.data.slice(t.length))};e.addEventListener?e.addEventListener("message",n,!1):e.attachEvent("onmessage",n),c=function(n){e.postMessage(t+n,"*")}}():e.MessageChannel?function(){var e=new MessageChannel;e.port1.onmessage=function(e){o(e.data)},c=function(t){e.port2.postMessage(t)}}():d&&"onreadystatechange"in d.createElement("script")?function(){var e=d.documentElement;c=function(t){var n=d.createElement("script");n.onreadystatechange=function(){o(t),n.onreadystatechange=null,e.removeChild(n),n=null},e.appendChild(n)}}():function(){c=function(e){setTimeout(o,0,e)}}(),f.setImmediate=a,f.clearImmediate=i}}("undefined"==typeof self?void 0===e?this:e:self)}).call(t,n(0),n(15))},function(e,t){function n(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function i(e){if(s===setTimeout)return setTimeout(e,0);if((s===n||!s)&&setTimeout)return s=setTimeout,setTimeout(e,0);try{return s(e,0)}catch(t){try{return s.call(null,e,0)}catch(t){return s.call(this,e,0)}}}function r(e){if(d===clearTimeout)return clearTimeout(e);if((d===a||!d)&&clearTimeout)return d=clearTimeout,clearTimeout(e);try{return d(e)}catch(t){try{return d.call(null,e)}catch(t){return d.call(this,e)}}}function o(){p&&m&&(p=!1,m.length?g=m.concat(g):v=-1,g.length&&c())}function c(){if(!p){var e=i(o);p=!0;for(var t=g.length;t;){for(m=g,g=[];++v<t;)m&&m[v].run();v=-1,t=g.length}m=null,p=!1,r(e)}}function l(e,t){this.fun=e,this.array=t}function u(){}var s,d,f=e.exports={};!function(){try{s="function"==typeof setTimeout?setTimeout:n}catch(e){s=n}try{d="function"==typeof clearTimeout?clearTimeout:a}catch(e){d=a}}();var m,g=[],p=!1,v=-1;f.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];g.push(new l(e,t)),1!==g.length||p||i(c)},l.prototype.run=function(){this.fun.apply(null,this.array)},f.title="browser",f.browser=!0,f.env={},f.argv=[],f.version="",f.versions={},f.on=u,f.addListener=u,f.once=u,f.off=u,f.removeListener=u,f.removeAllListeners=u,f.emit=u,f.prependListener=u,f.prependOnceListener=u,f.listeners=function(e){return[]},f.binding=function(e){throw new Error("process.binding is not supported")},f.cwd=function(){return"/"},f.chdir=function(e){throw new Error("process.chdir is not supported")},f.umask=function(){return 0}},function(e,t,n){"use strict";(function(t){function a(e,t,n,a){return e.addEventListener(t,n,a)}function i(e,t,n){return e.attachEvent("on"+t,u(e,t,n))}function r(e,t,n,a){return e.removeEventListener(t,n,a)}function o(e,t,n){var a=s(e,t,n);if(a)return e.detachEvent("on"+t,a)}function c(e,t,n){var a=-1===m.indexOf(t)?function(){return new f(t,{detail:n})}():function(){var e;return g.createEvent?(e=g.createEvent("Event"),e.initEvent(t,!0,!0)):g.createEventObject&&(e=g.createEventObject()),e}();e.dispatchEvent?e.dispatchEvent(a):e.fireEvent("on"+t,a)}function l(e,n,a){return function(n){var i=n||t.event;i.target=i.target||i.srcElement,i.preventDefault=i.preventDefault||function(){i.returnValue=!1},i.stopPropagation=i.stopPropagation||function(){i.cancelBubble=!0},i.which=i.which||i.keyCode,a.call(e,i)}}function u(e,t,n){var a=s(e,t,n)||l(e,t,n);return h.push({wrapper:a,element:e,type:t,fn:n}),a}function s(e,t,n){var a=d(e,t,n);if(a){var i=h[a].wrapper;return h.splice(a,1),i}}function d(e,t,n){var a,i;for(a=0;a<h.length;a++)if(i=h[a],i.element===e&&i.type===t&&i.fn===n)return a}var f=n(17),m=n(18),g=t.document,p=a,v=r,h=[];t.addEventListener||(p=i,v=o),e.exports={add:p,remove:v,fabricate:c}}).call(t,n(0))},function(e,t,n){(function(t){var n=t.CustomEvent;e.exports=function(){try{var e=new n("cat",{detail:{foo:"bar"}});return"cat"===e.type&&"bar"===e.detail.foo}catch(e){}return!1}()?n:"function"==typeof document.createEvent?function(e,t){var n=document.createEvent("CustomEvent");return t?n.initCustomEvent(e,t.bubbles,t.cancelable,t.detail):n.initCustomEvent(e,!1,!1,void 0),n}:function(e,t){var n=document.createEventObject();return n.type=e,t?(n.bubbles=Boolean(t.bubbles),n.cancelable=Boolean(t.cancelable),n.detail=t.detail):(n.bubbles=!1,n.cancelable=!1,n.detail=void 0),n}}).call(t,n(0))},function(e,t,n){"use strict";(function(t){var n=[],a="",i=/^on/;for(a in t)i.test(a)&&n.push(a.slice(2));e.exports=n}).call(t,n(0))},function(e,t,n){"use strict";function a(e){var t=o[e];return t?t.lastIndex=0:o[e]=t=new RegExp(c+e+l,"g"),t}function i(e,t){var n=e.className;n.length?a(t).test(n)||(e.className+=" "+t):e.className=t}function r(e,t){e.className=e.className.replace(a(t)," ").trim()}var o={},c="(?:^|\\s)",l="(?:\\s|$)";e.exports={add:i,rm:r}},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=document.querySelectorAll(e.parent);if(!t)return!1;[].forEach.call(t,function(t){var n=(0,u.default)(t,e.hidden),a=(0,s.removeItems)(n,s.onRemoveObject),i=(0,s.dragItems)(n,s.onDragObject),o=(0,r.default)(t,Object.assign(e,{onDrag:i,onRemove:a})),l=t.querySelector(".autosuggest-list-input"),d="autoList_"+l.getAttribute("list"),f=void 0;f=window[d].namespace?OMGFields.baseURL+"/wp-json/"+window[d].namespace+"/"+window[d].resource+"?search=":OMGFields.baseURL+"/wp-json/wp/v2/"+window[d].resource+"?search=",(0,c.default)(l,f,function(e,t){o.add(e),t.value="",n.add(e)})})};var i=n(1),r=a(i),o=n(4),c=a(o),l=n(2),u=a(l),s=n(3)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=document.querySelectorAll(e.parent);if(!t)return!1;[].forEach.call(t,function(t){var n=t.querySelector(e.hidden),a=t.querySelector(".autosuggest-input"),r="autoList_"+a.getAttribute("list"),o=void 0;o=window[r].namespace?OMGFields.baseURL+"/wp-json/"+window[r].namespace+"/"+window[r].resource+"?search=":OMGFields.baseURL+"/wp-json/wp/v2/"+window[r].resource+"?search=",(0,i.default)(a,o,function(e,t){n.value=JSON.stringify(e)},function(){n.value=""})})};var a=n(4),i=function(e){return e&&e.__esModule?e:{default:e}}(a)},function(e,t,n){"use strict";function a(){var e=document.querySelectorAll(".custom-media-upload");0!==e.length&&[].map.call(e,function(e){var t=e.querySelector(".remove-image"),n=e.querySelector(".replace-image"),a=e.querySelector(".set-image"),i=e.querySelector("a.replace-image img"),r=e.querySelector('input[type="hidden"]'),o=e.querySelector(".thumbnail-title"),c=wp.media({title:"Choose Media",button:{text:"Use Selected Media"},multiple:!1});c.on("select",function(){var t=c.state().get("selection").first().toJSON();e.classList.toggle("has-image"),r.value=t.id,t.hasOwnProperty("sizes")?i.setAttribute("src",t.sizes.thumbnail.url):i.setAttribute("src",t.icon),o&&(o.innerHTML=t.filename)}),t.addEventListener("click",function(t){t.preventDefault(),e.classList.toggle("has-image"),i.setAttribute("src",""),r.value="",o&&(o.innerHTML="")}),n.addEventListener("click",function(e){e.preventDefault(),c.open()}),a.addEventListener("click",function(e){e.preventDefault(),c.open()})})}Object.defineProperty(t,"__esModule",{value:!0}),t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=document.querySelectorAll(".datepicker-input");if(!e)return!1;[].forEach.call(e,function(e){var t=e.dataset.date;(0,i.default)(e,{altInput:!0,altFormat:"F j, Y",dateFormat:"U",defaultDate:t||""})})};var a=n(24),i=function(e){return e&&e.__esModule?e:{default:e}}(a)},function(e,t,n){/* flatpickr v4.4.3, @license MIT */
!function(t,n){e.exports=n()}(0,function(){"use strict";function e(e,t,n){void 0===n&&(n=!1);var a;return function(){var i=this,r=arguments;null!==a&&clearTimeout(a),a=window.setTimeout(function(){a=null,n||e.apply(i,r)},t),n&&!a&&e.apply(i,r)}}function t(e,t,n){return void 0===n&&(n=!0),!1!==n?new Date(e.getTime()).setHours(0,0,0,0)-new Date(t.getTime()).setHours(0,0,0,0):e.getTime()-t.getTime()}function n(e,t,n){if(!0===n)return e.classList.add(t);e.classList.remove(t)}function a(e,t,n){var a=window.document.createElement(e);return t=t||"",n=n||"",a.className=t,void 0!==n&&(a.textContent=n),a}function i(e){for(;e.firstChild;)e.removeChild(e.firstChild)}function r(e,t){return t(e)?e:e.parentNode?r(e.parentNode,t):void 0}function o(e,t){var n=a("div","numInputWrapper"),i=a("input","numInput "+e),r=a("span","arrowUp"),o=a("span","arrowDown");if(i.type="text",i.pattern="\\d*",void 0!==t)for(var c in t)i.setAttribute(c,t[c]);return n.appendChild(i),n.appendChild(r),n.appendChild(o),n}function c(c,l){function f(){Ie.utils={getDaysInMonth:function(e,t){return void 0===e&&(e=Ie.currentMonth),void 0===t&&(t=Ie.currentYear),1===e&&(t%4==0&&t%100!=0||t%400==0)?29:Ie.l10n.daysInMonth[e]}}}function g(e){return e.bind(Ie)}function v(e){0!==Ie.selectedDates.length&&(Oe(e),"input"!==e.type?(E(),Ee()):setTimeout(function(){E(),Ee()},T))}function w(e,t){return e%12+12*s(t===Ie.l10n.amPM[1])}function C(e){switch(e%24){case 0:case 12:return 12;default:return e%12}}function E(){if(void 0!==Ie.hourElement&&void 0!==Ie.minuteElement){var e=(parseInt(Ie.hourElement.value.slice(-2),10)||0)%24,n=(parseInt(Ie.minuteElement.value,10)||0)%60,a=void 0!==Ie.secondElement?(parseInt(Ie.secondElement.value,10)||0)%60:0;void 0!==Ie.amPM&&(e=w(e,Ie.amPM.textContent));var i=void 0!==Ie.config.minTime||Ie.config.minDate&&Ie.minDateHasTime&&Ie.latestSelectedDateObj&&0===t(Ie.latestSelectedDateObj,Ie.config.minDate,!0);if(void 0!==Ie.config.maxTime||Ie.config.maxDate&&Ie.maxDateHasTime&&Ie.latestSelectedDateObj&&0===t(Ie.latestSelectedDateObj,Ie.config.maxDate,!0)){var r=void 0!==Ie.config.maxTime?Ie.config.maxTime:Ie.config.maxDate;e=Math.min(e,r.getHours()),e===r.getHours()&&(n=Math.min(n,r.getMinutes())),n===r.getMinutes()&&(a=Math.min(a,r.getSeconds()))}if(i){var o=void 0!==Ie.config.minTime?Ie.config.minTime:Ie.config.minDate;e=Math.max(e,o.getHours()),e===o.getHours()&&(n=Math.max(n,o.getMinutes())),n===o.getMinutes()&&(a=Math.max(a,o.getSeconds()))}O(e,n,a)}}function S(e){var t=e||Ie.latestSelectedDateObj;t&&O(t.getHours(),t.getMinutes(),t.getSeconds())}function O(e,t,n){void 0!==Ie.latestSelectedDateObj&&Ie.latestSelectedDateObj.setHours(e%24,t,n||0,0),Ie.hourElement&&Ie.minuteElement&&!Ie.isMobile&&(Ie.hourElement.value=u(Ie.config.time_24hr?e:(12+e)%12+12*s(e%12==0)),Ie.minuteElement.value=u(t),void 0!==Ie.amPM&&(Ie.amPM.textContent=Ie.l10n.amPM[s(e>=12)]),void 0!==Ie.secondElement&&(Ie.secondElement.value=u(n)))}function I(e){var t=parseInt(e.target.value)+(e.delta||0);4!==t.toString().length&&"Enter"!==e.key||(e.target.blur(),/[^\d]/.test(t.toString())||ee(t))}function k(e,t,n,a){return t instanceof Array?t.forEach(function(t){return k(e,t,n,a)}):e instanceof Array?e.forEach(function(e){return k(e,t,n,a)}):(e.addEventListener(t,n,a),void Ie._handlers.push({element:e,event:t,handler:n}))}function _(e){return function(t){1===t.which&&e(t)}}function P(){De("onChange")}function A(){if(Ie.config.wrap&&["open","close","toggle","clear"].forEach(function(e){Array.prototype.forEach.call(Ie.element.querySelectorAll("[data-"+e+"]"),function(t){return k(t,"click",Ie[e])})}),Ie.isMobile)return void be();var t=e(ie,50);if(Ie._debouncedChange=e(P,T),Ie.daysContainer&&!/iPhone|iPad|iPod/i.test(navigator.userAgent)&&k(Ie.daysContainer,"mouseover",function(e){"range"===Ie.config.mode&&ae(e.target)}),k(window.document.body,"keydown",ne),Ie.config.static||k(Ie._input,"keydown",ne),Ie.config.inline||Ie.config.static||k(window,"resize",t),void 0!==window.ontouchstart&&k(window.document,"touchstart",Q),k(window.document,"mousedown",_(Q)),k(window.document,"focus",Q,{capture:!0}),!0===Ie.config.clickOpens&&(k(Ie._input,"focus",Ie.open),k(Ie._input,"mousedown",_(Ie.open))),void 0!==Ie.daysContainer&&(k(Ie.monthNav,"mousedown",_(Se)),k(Ie.monthNav,["keyup","increment"],I),k(Ie.daysContainer,"mousedown",_(fe))),void 0!==Ie.timeContainer&&void 0!==Ie.minuteElement&&void 0!==Ie.hourElement){var n=function(e){return e.target.select()};k(Ie.timeContainer,["input","increment"],v),k(Ie.timeContainer,"mousedown",_(N)),k(Ie.timeContainer,["input","increment"],Ie._debouncedChange,{passive:!0}),k([Ie.hourElement,Ie.minuteElement],["focus","click"],n),void 0!==Ie.secondElement&&k(Ie.secondElement,"focus",function(){return Ie.secondElement&&Ie.secondElement.select()}),void 0!==Ie.amPM&&k(Ie.amPM,"mousedown",_(function(e){v(e),P()}))}}function j(e){var t=void 0!==e?Ie.parseDate(e):Ie.latestSelectedDateObj||(Ie.config.minDate&&Ie.config.minDate>Ie.now?Ie.config.minDate:Ie.config.maxDate&&Ie.config.maxDate<Ie.now?Ie.config.maxDate:Ie.now);try{void 0!==t&&(Ie.currentYear=t.getFullYear(),Ie.currentMonth=t.getMonth())}catch(e){e.message="Invalid date supplied: "+t,Ie.config.errorHandler(e)}Ie.redraw()}function N(e){~e.target.className.indexOf("arrow")&&F(e,e.target.classList.contains("arrowUp")?1:-1)}function F(e,t,n){var a=e&&e.target,i=n||a&&a.parentNode&&a.parentNode.firstChild,r=Me("increment");r.delta=t,i&&i.dispatchEvent(r)}function L(){var e=window.document.createDocumentFragment();if(Ie.calendarContainer=a("div","flatpickr-calendar"),Ie.calendarContainer.tabIndex=-1,!Ie.config.noCalendar){if(e.appendChild(W()),Ie.innerContainer=a("div","flatpickr-innerContainer"),Ie.config.weekNumbers){var t=K(),i=t.weekWrapper,r=t.weekNumbers;Ie.innerContainer.appendChild(i),Ie.weekNumbers=r,Ie.weekWrapper=i}Ie.rContainer=a("div","flatpickr-rContainer"),Ie.rContainer.appendChild(U()),Ie.daysContainer||(Ie.daysContainer=a("div","flatpickr-days"),Ie.daysContainer.tabIndex=-1),q(),Ie.rContainer.appendChild(Ie.daysContainer),Ie.innerContainer.appendChild(Ie.rContainer),e.appendChild(Ie.innerContainer)}Ie.config.enableTime&&e.appendChild(J()),n(Ie.calendarContainer,"rangeMode","range"===Ie.config.mode),n(Ie.calendarContainer,"animate",!0===Ie.config.animate),n(Ie.calendarContainer,"multiMonth",Ie.config.showMonths>1),Ie.calendarContainer.appendChild(e);var o=void 0!==Ie.config.appendTo&&void 0!==Ie.config.appendTo.nodeType;if((Ie.config.inline||Ie.config.static)&&(Ie.calendarContainer.classList.add(Ie.config.inline?"inline":"static"),Ie.config.inline&&(!o&&Ie.element.parentNode?Ie.element.parentNode.insertBefore(Ie.calendarContainer,Ie._input.nextSibling):void 0!==Ie.config.appendTo&&Ie.config.appendTo.appendChild(Ie.calendarContainer)),Ie.config.static)){var c=a("div","flatpickr-wrapper");Ie.element.parentNode&&Ie.element.parentNode.insertBefore(c,Ie.element),c.appendChild(Ie.element),Ie.altInput&&c.appendChild(Ie.altInput),c.appendChild(Ie.calendarContainer)}Ie.config.static||Ie.config.inline||(void 0!==Ie.config.appendTo?Ie.config.appendTo:window.document.body).appendChild(Ie.calendarContainer)}function Y(e,i,r,o){var c=te(i,!0),l=a("span","flatpickr-day "+e,i.getDate().toString());return l.dateObj=i,l.$i=o,l.setAttribute("aria-label",Ie.formatDate(i,Ie.config.ariaDateFormat)),0===t(i,Ie.now)&&(Ie.todayDateElem=l,l.classList.add("today")),c?(l.tabIndex=-1,Ce(i)&&(l.classList.add("selected"),Ie.selectedDateElem=l,"range"===Ie.config.mode&&(n(l,"startRange",Ie.selectedDates[0]&&0===t(i,Ie.selectedDates[0],!0)),n(l,"endRange",Ie.selectedDates[1]&&0===t(i,Ie.selectedDates[1],!0)),"nextMonthDay"===e&&l.classList.add("inRange")))):l.classList.add("disabled"),"range"===Ie.config.mode&&Te(i)&&!Ce(i)&&l.classList.add("inRange"),Ie.weekNumbers&&1===Ie.config.showMonths&&"prevMonthDay"!==e&&r%7==1&&Ie.weekNumbers.insertAdjacentHTML("beforeend","<span class='flatpickr-day'>"+Ie.config.getWeek(i)+"</span>"),De("onDayCreate",l),l}function H(e,t){var n=void 0!==e?e:document.activeElement.$i,a=(n||0)+t||0,i=Array.prototype.find.call(Ie.days.children,function(e,t){return t>=a&&-1===e.className.indexOf("MonthDay")&&te(e.dateObj)});void 0!==i&&(i.focus(),"range"===Ie.config.mode&&ae(i))}function R(e,t){for(var n=(new Date(e,t,1).getDay()-Ie.l10n.firstDayOfWeek+7)%7,i=Ie.utils.getDaysInMonth((t-1+12)%12),r=Ie.utils.getDaysInMonth(t),o=window.document.createDocumentFragment(),c=i+1-n,l=0;c<=i;c++,l++)o.appendChild(Y("prevMonthDay",new Date(e,t-1,c),c,l));for(c=1;c<=r;c++,l++)o.appendChild(Y("",new Date(e,t,c),c,l));for(var u=r+1;u<=42-n&&(1===Ie.config.showMonths||l%7!=0);u++,l++)o.appendChild(Y("nextMonthDay",new Date(e,t+1,u%r),u,l));var s=a("div","dayContainer");return s.appendChild(o),s}function q(){if(void 0!==Ie.daysContainer){i(Ie.daysContainer),Ie.weekNumbers&&i(Ie.weekNumbers);for(var e=document.createDocumentFragment(),t=0;t<Ie.config.showMonths;t++){var n=new Date(Ie.currentYear,Ie.currentMonth,1);n.setMonth(Ie.currentMonth+t),e.appendChild(R(n.getFullYear(),n.getMonth()))}Ie.daysContainer.appendChild(e),Ie.days=Ie.daysContainer.firstChild}}function B(){var e=a("div","flatpickr-month"),t=window.document.createDocumentFragment(),n=a("span","cur-month");n.title=Ie.l10n.scrollTitle;var i=o("cur-year",{tabindex:"-1"}),r=i.childNodes[0];r.title=Ie.l10n.scrollTitle,r.setAttribute("aria-label",Ie.l10n.yearAriaLabel),Ie.config.minDate&&r.setAttribute("data-min",Ie.config.minDate.getFullYear().toString()),Ie.config.maxDate&&(r.setAttribute("data-max",Ie.config.maxDate.getFullYear().toString()),r.disabled=!!Ie.config.minDate&&Ie.config.minDate.getFullYear()===Ie.config.maxDate.getFullYear());var c=a("div","flatpickr-current-month");return c.appendChild(n),c.appendChild(i),t.appendChild(c),e.appendChild(t),{container:e,yearElement:r,monthElement:n}}function W(){Ie.monthNav=a("div","flatpickr-months"),Ie.yearElements=[],Ie.monthElements=[],Ie.prevMonthNav=a("span","flatpickr-prev-month"),Ie.prevMonthNav.innerHTML=Ie.config.prevArrow,Ie.nextMonthNav=a("span","flatpickr-next-month"),Ie.nextMonthNav.innerHTML=Ie.config.nextArrow,Ie.monthNav.appendChild(Ie.prevMonthNav);for(var e=Ie.config.showMonths;e--;){var t=B();Ie.yearElements.push(t.yearElement),Ie.monthElements.push(t.monthElement),Ie.monthNav.appendChild(t.container)}return Ie.monthNav.appendChild(Ie.nextMonthNav),Object.defineProperty(Ie,"_hidePrevMonthArrow",{get:function(){return Ie.__hidePrevMonthArrow},set:function(e){Ie.__hidePrevMonthArrow!==e&&(n(Ie.prevMonthNav,"disabled",e),Ie.__hidePrevMonthArrow=e)}}),Object.defineProperty(Ie,"_hideNextMonthArrow",{get:function(){return Ie.__hideNextMonthArrow},set:function(e){Ie.__hideNextMonthArrow!==e&&(n(Ie.nextMonthNav,"disabled",e),Ie.__hideNextMonthArrow=e)}}),Ie.currentYearElement=Ie.yearElements[0],xe(),Ie.monthNav}function J(){Ie.calendarContainer.classList.add("hasTime"),Ie.config.noCalendar&&Ie.calendarContainer.classList.add("noCalendar"),Ie.timeContainer=a("div","flatpickr-time"),Ie.timeContainer.tabIndex=-1;var e=a("span","flatpickr-time-separator",":"),t=o("flatpickr-hour");Ie.hourElement=t.childNodes[0];var n=o("flatpickr-minute");if(Ie.minuteElement=n.childNodes[0],Ie.hourElement.tabIndex=Ie.minuteElement.tabIndex=-1,Ie.hourElement.value=u(Ie.latestSelectedDateObj?Ie.latestSelectedDateObj.getHours():Ie.config.time_24hr?Ie.config.defaultHour:C(Ie.config.defaultHour)),Ie.minuteElement.value=u(Ie.latestSelectedDateObj?Ie.latestSelectedDateObj.getMinutes():Ie.config.defaultMinute),Ie.hourElement.setAttribute("data-step",Ie.config.hourIncrement.toString()),Ie.minuteElement.setAttribute("data-step",Ie.config.minuteIncrement.toString()),Ie.hourElement.setAttribute("data-min",Ie.config.time_24hr?"0":"1"),Ie.hourElement.setAttribute("data-max",Ie.config.time_24hr?"23":"12"),Ie.minuteElement.setAttribute("data-min","0"),Ie.minuteElement.setAttribute("data-max","59"),Ie.timeContainer.appendChild(t),Ie.timeContainer.appendChild(e),Ie.timeContainer.appendChild(n),Ie.config.time_24hr&&Ie.timeContainer.classList.add("time24hr"),Ie.config.enableSeconds){Ie.timeContainer.classList.add("hasSeconds");var i=o("flatpickr-second");Ie.secondElement=i.childNodes[0],Ie.secondElement.value=u(Ie.latestSelectedDateObj?Ie.latestSelectedDateObj.getSeconds():Ie.config.defaultSeconds),Ie.secondElement.setAttribute("data-step",Ie.minuteElement.getAttribute("data-step")),Ie.secondElement.setAttribute("data-min",Ie.minuteElement.getAttribute("data-min")),Ie.secondElement.setAttribute("data-max",Ie.minuteElement.getAttribute("data-max")),Ie.timeContainer.appendChild(a("span","flatpickr-time-separator",":")),Ie.timeContainer.appendChild(i)}return Ie.config.time_24hr||(Ie.amPM=a("span","flatpickr-am-pm",Ie.l10n.amPM[s((Ie.latestSelectedDateObj?Ie.hourElement.value:Ie.config.defaultHour)>11)]),Ie.amPM.title=Ie.l10n.toggleTitle,Ie.amPM.tabIndex=-1,Ie.timeContainer.appendChild(Ie.amPM)),Ie.timeContainer}function U(){Ie.weekdayContainer||(Ie.weekdayContainer=a("div","flatpickr-weekdays"));for(var e=Ie.config.showMonths;e--;){var t=a("div","flatpickr-weekdaycontainer");Ie.weekdayContainer.appendChild(t)}return z(),Ie.weekdayContainer}function z(){var e=Ie.l10n.firstDayOfWeek,t=Ie.l10n.weekdays.shorthand.concat();e>0&&e<t.length&&(t=t.splice(e,t.length).concat(t.splice(0,e)));for(var n=Ie.config.showMonths;n--;)Ie.weekdayContainer.children[n].innerHTML="\n      <span class=flatpickr-weekday>\n        "+t.join("</span><span class=flatpickr-weekday>")+"\n      </span>\n      "}function K(){Ie.calendarContainer.classList.add("hasWeeks");var e=a("div","flatpickr-weekwrapper");e.appendChild(a("span","flatpickr-weekday",Ie.l10n.weekAbbreviation));var t=a("div","flatpickr-weeks");return e.appendChild(t),{weekWrapper:e,weekNumbers:t}}function X(e,t,n){void 0===t&&(t=!0),void 0===n&&(n=!1);var a=t?e:e-Ie.currentMonth;a<0&&!0===Ie._hidePrevMonthArrow||a>0&&!0===Ie._hideNextMonthArrow||(Ie.currentMonth+=a,(Ie.currentMonth<0||Ie.currentMonth>11)&&(Ie.currentYear+=Ie.currentMonth>11?1:-1,Ie.currentMonth=(Ie.currentMonth+12)%12,De("onYearChange")),q(),De("onMonthChange"),xe(),!0===n&&H(void 0,0))}function $(e){void 0===e&&(e=!0),Ie.input.value="",void 0!==Ie.altInput&&(Ie.altInput.value=""),void 0!==Ie.mobileInput&&(Ie.mobileInput.value=""),Ie.selectedDates=[],Ie.latestSelectedDateObj=void 0,Ie.showTimeInput=!1,!0===Ie.config.enableTime&&(void 0!==Ie.config.minDate?S(Ie.config.minDate):O(Ie.config.defaultHour,Ie.config.defaultMinute,Ie.config.defaultSeconds)),Ie.redraw(),e&&De("onChange")}function G(){Ie.isOpen=!1,Ie.isMobile||(Ie.calendarContainer.classList.remove("open"),Ie._input.classList.remove("active")),De("onClose")}function V(){void 0!==Ie.config&&De("onDestroy");for(var e=Ie._handlers.length;e--;){var t=Ie._handlers[e];t.element.removeEventListener(t.event,t.handler)}Ie._handlers=[],Ie.mobileInput?(Ie.mobileInput.parentNode&&Ie.mobileInput.parentNode.removeChild(Ie.mobileInput),Ie.mobileInput=void 0):Ie.calendarContainer&&Ie.calendarContainer.parentNode&&Ie.calendarContainer.parentNode.removeChild(Ie.calendarContainer),Ie.altInput&&(Ie.input.type="text",Ie.altInput.parentNode&&Ie.altInput.parentNode.removeChild(Ie.altInput),delete Ie.altInput),Ie.input&&(Ie.input.type=Ie.input._type,Ie.input.classList.remove("flatpickr-input"),Ie.input.removeAttribute("readonly"),Ie.input.value=""),["_showTimeInput","latestSelectedDateObj","_hideNextMonthArrow","_hidePrevMonthArrow","__hideNextMonthArrow","__hidePrevMonthArrow","isMobile","isOpen","selectedDateElem","minDateHasTime","maxDateHasTime","days","daysContainer","_input","_positionElement","innerContainer","rContainer","monthNav","todayDateElem","calendarContainer","weekdayContainer","prevMonthNav","nextMonthNav","currentMonthElement","currentYearElement","navigationCurrentMonth","selectedDateElem","config"].forEach(function(e){try{delete Ie[e]}catch(e){}})}function Z(e){return!(!Ie.config.appendTo||!Ie.config.appendTo.contains(e))||Ie.calendarContainer.contains(e)}function Q(e){if(Ie.isOpen&&!Ie.config.inline){var t=Z(e.target),n=e.target===Ie.input||e.target===Ie.altInput||Ie.element.contains(e.target)||e.path&&e.path.indexOf&&(~e.path.indexOf(Ie.input)||~e.path.indexOf(Ie.altInput)),a="blur"===e.type?n&&e.relatedTarget&&!Z(e.relatedTarget):!n&&!t,i=!Ie.config.ignoredFocusElements.some(function(t){return t.contains(e.target)});a&&i&&(Ie.close(),"range"===Ie.config.mode&&1===Ie.selectedDates.length&&(Ie.clear(!1),Ie.redraw()))}}function ee(e){if(!(!e||Ie.config.minDate&&e<Ie.config.minDate.getFullYear()||Ie.config.maxDate&&e>Ie.config.maxDate.getFullYear())){var t=e,n=Ie.currentYear!==t;Ie.currentYear=t||Ie.currentYear,Ie.config.maxDate&&Ie.currentYear===Ie.config.maxDate.getFullYear()?Ie.currentMonth=Math.min(Ie.config.maxDate.getMonth(),Ie.currentMonth):Ie.config.minDate&&Ie.currentYear===Ie.config.minDate.getFullYear()&&(Ie.currentMonth=Math.max(Ie.config.minDate.getMonth(),Ie.currentMonth)),n&&(Ie.redraw(),De("onYearChange"))}}function te(e,n){void 0===n&&(n=!0);var a=Ie.parseDate(e,void 0,n);if(Ie.config.minDate&&a&&t(a,Ie.config.minDate,void 0!==n?n:!Ie.minDateHasTime)<0||Ie.config.maxDate&&a&&t(a,Ie.config.maxDate,void 0!==n?n:!Ie.maxDateHasTime)>0)return!1;if(0===Ie.config.enable.length&&0===Ie.config.disable.length)return!0;if(void 0===a)return!1;for(var i,r=Ie.config.enable.length>0,o=r?Ie.config.enable:Ie.config.disable,c=0;c<o.length;c++){if("function"==typeof(i=o[c])&&i(a))return r;if(i instanceof Date&&void 0!==a&&i.getTime()===a.getTime())return r;if("string"==typeof i&&void 0!==a){var l=Ie.parseDate(i,void 0,!0);return l&&l.getTime()===a.getTime()?r:!r}if("object"==typeof i&&void 0!==a&&i.from&&i.to&&a.getTime()>=i.from.getTime()&&a.getTime()<=i.to.getTime())return r}return!r}function ne(e){var t=e.target===Ie._input,n=Z(e.target),a=Ie.config.allowInput,i=Ie.isOpen&&(!a||!t),r=Ie.config.inline&&t&&!a;if(13===e.keyCode&&t){if(a)return Ie.setDate(Ie._input.value,!0,e.target===Ie.altInput?Ie.config.altFormat:Ie.config.dateFormat),e.target.blur();Ie.open()}else if(n||i||r){var o=!!Ie.timeContainer&&Ie.timeContainer.contains(e.target);switch(e.keyCode){case 13:o?Ee():fe(e);break;case 27:e.preventDefault(),de();break;case 8:case 46:t&&!Ie.config.allowInput&&(e.preventDefault(),Ie.clear());break;case 37:case 39:if(o)Ie.hourElement&&Ie.hourElement.focus();else if(e.preventDefault(),Ie.daysContainer){var c=t?0:39===e.keyCode?1:-1;e.ctrlKey?X(c,!0,!0):H(void 0,c)}break;case 38:case 40:e.preventDefault();var l=40===e.keyCode?1:-1;Ie.daysContainer&&void 0!==e.target.$i?e.ctrlKey?(ee(Ie.currentYear-l),H(e.target.$i,0)):o||H(e.target.$i,7*l):Ie.config.enableTime&&(!o&&Ie.hourElement&&Ie.hourElement.focus(),v(e),Ie._debouncedChange());break;case 9:e.target===Ie.hourElement?(e.preventDefault(),Ie.minuteElement.select()):e.target===Ie.minuteElement&&(Ie.secondElement||Ie.amPM)?(e.preventDefault(),void 0!==Ie.secondElement?Ie.secondElement.focus():void 0!==Ie.amPM&&Ie.amPM.focus()):e.target===Ie.secondElement&&Ie.amPM&&(e.preventDefault(),Ie.amPM.focus())}switch(e.key){case Ie.l10n.amPM[0].charAt(0):case Ie.l10n.amPM[0].charAt(0).toLowerCase():void 0!==Ie.amPM&&e.target===Ie.amPM&&(Ie.amPM.textContent=Ie.l10n.amPM[0],E(),Ee());break;case Ie.l10n.amPM[1].charAt(0):case Ie.l10n.amPM[1].charAt(0).toLowerCase():void 0!==Ie.amPM&&e.target===Ie.amPM&&(Ie.amPM.textContent=Ie.l10n.amPM[1],E(),Ee())}De("onKeyDown",e)}}function ae(e){if(1===Ie.selectedDates.length&&e.classList.contains("flatpickr-day")&&!e.classList.contains("disabled")){for(var t=e.dateObj.getTime(),n=Ie.parseDate(Ie.selectedDates[0],void 0,!0).getTime(),a=Math.min(t,Ie.selectedDates[0].getTime()),i=Math.max(t,Ie.selectedDates[0].getTime()),r=Ie.daysContainer.children,o=r[0].children[0].dateObj.getTime(),c=r[r.length-1].lastChild.dateObj.getTime(),l=!1,u=0,s=0,d=o;d<c;d+=M.DAY)te(new Date(d),!0)||(l=l||d>a&&d<i,d<n&&(!u||d>u)?u=d:d>n&&(!s||d<s)&&(s=d));for(var f=0;f<Ie.config.showMonths;f++)for(var m=Ie.daysContainer.children[f],g=Ie.daysContainer.children[f-1],p=0,v=m.children.length;p<v;p++){(function(a,i){var r=m.children[a],o=r.dateObj,c=o.getTime(),d=u>0&&c<u||s>0&&c>s;d?(r.classList.add("notAllowed"),["inRange","startRange","endRange"].forEach(function(e){r.classList.remove(e)})):l&&!d||(["startRange","inRange","endRange","notAllowed"].forEach(function(e){r.classList.remove(e)}),e.classList.add(t<Ie.selectedDates[0].getTime()?"startRange":"endRange"),!m.contains(e)&&f>0&&g&&g.lastChild.dateObj.getTime()>=c||(n<t&&c===n?r.classList.add("startRange"):n>t&&c===n&&r.classList.add("endRange"),c>=u&&(0===s||c<=s)&&D(c,n,t)&&r.classList.add("inRange")))})(p)}}}function ie(){!Ie.isOpen||Ie.config.static||Ie.config.inline||ue()}function re(e,t){if(void 0===t&&(t=Ie._input),!0===Ie.isMobile)return e&&(e.preventDefault(),e.target&&e.target.blur()),setTimeout(function(){void 0!==Ie.mobileInput&&Ie.mobileInput.click()},0),void De("onOpen");if(!Ie._input.disabled&&!Ie.config.inline){var n=Ie.isOpen;Ie.isOpen=!0,n||(Ie.calendarContainer.classList.add("open"),Ie._input.classList.add("active"),De("onOpen"),ue(t)),!0===Ie.config.enableTime&&!0===Ie.config.noCalendar&&(0===Ie.selectedDates.length&&(Ie.setDate(void 0!==Ie.config.minDate?new Date(Ie.config.minDate.getTime()):(new Date).setHours(Ie.config.defaultHour,Ie.config.defaultMinute,Ie.config.defaultSeconds,0),!1),E(),Ee()),setTimeout(function(){return Ie.hourElement.select()},50))}}function oe(e){return function(t){var n=Ie.config["_"+e+"Date"]=Ie.parseDate(t,Ie.config.dateFormat),a=Ie.config["_"+("min"===e?"max":"min")+"Date"];void 0!==n&&(Ie["min"===e?"minDateHasTime":"maxDateHasTime"]=n.getHours()>0||n.getMinutes()>0||n.getSeconds()>0),Ie.selectedDates&&(Ie.selectedDates=Ie.selectedDates.filter(function(e){return te(e)}),Ie.selectedDates.length||"min"!==e||S(n),Ee()),Ie.daysContainer&&(se(),void 0!==n?Ie.currentYearElement[e]=n.getFullYear().toString():Ie.currentYearElement.removeAttribute(e),Ie.currentYearElement.disabled=!!a&&void 0!==n&&a.getFullYear()===n.getFullYear())}}function ce(){var e=["wrap","weekNumbers","allowInput","clickOpens","time_24hr","enableTime","noCalendar","altInput","shorthandCurrentMonth","inline","static","enableSeconds","disableMobile"],t=["onChange","onClose","onDayCreate","onDestroy","onKeyDown","onMonthChange","onOpen","onParseConfig","onReady","onValueUpdate","onYearChange","onPreCalendarPosition"],n=Object.assign({},l,JSON.parse(JSON.stringify(c.dataset||{}))),a={};Ie.config.parseDate=n.parseDate,Ie.config.formatDate=n.formatDate,Object.defineProperty(Ie.config,"enable",{get:function(){return Ie.config._enable},set:function(e){Ie.config._enable=ve(e)}}),Object.defineProperty(Ie.config,"disable",{get:function(){return Ie.config._disable},set:function(e){Ie.config._disable=ve(e)}}),!n.dateFormat&&n.enableTime&&(a.dateFormat=n.noCalendar?"H:i"+(n.enableSeconds?":S":""):x.defaultConfig.dateFormat+" H:i"+(n.enableSeconds?":S":"")),n.altInput&&n.enableTime&&!n.altFormat&&(a.altFormat=n.noCalendar?"h:i"+(n.enableSeconds?":S K":" K"):x.defaultConfig.altFormat+" h:i"+(n.enableSeconds?":S":"")+" K"),Object.defineProperty(Ie.config,"minDate",{get:function(){return Ie.config._minDate},set:oe("min")}),Object.defineProperty(Ie.config,"maxDate",{get:function(){return Ie.config._maxDate},set:oe("max")});var i=function(e){return function(t){Ie.config["min"===e?"_minTime":"_maxTime"]=Ie.parseDate(t,"H:i")}};Object.defineProperty(Ie.config,"minTime",{get:function(){return Ie.config._minTime},set:i("min")}),Object.defineProperty(Ie.config,"maxTime",{get:function(){return Ie.config._maxTime},set:i("max")}),Object.assign(Ie.config,a,n);for(var r=0;r<e.length;r++)Ie.config[e[r]]=!0===Ie.config[e[r]]||"true"===Ie.config[e[r]];for(var o=t.length;o--;)void 0!==Ie.config[t[o]]&&(Ie.config[t[o]]=d(Ie.config[t[o]]||[]).map(g));"time"===Ie.config.mode&&(Ie.config.noCalendar=!0,Ie.config.enableTime=!0);for(var u=0;u<Ie.config.plugins.length;u++){var s=Ie.config.plugins[u](Ie)||{};for(var f in s)~t.indexOf(f)?Ie.config[f]=d(s[f]).map(g).concat(Ie.config[f]):void 0===n[f]&&(Ie.config[f]=s[f])}Ie.isMobile=!Ie.config.disableMobile&&!Ie.config.inline&&"single"===Ie.config.mode&&!Ie.config.disable.length&&!Ie.config.enable.length&&!Ie.config.weekNumbers&&/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),De("onParseConfig")}function le(){"object"!=typeof Ie.config.locale&&void 0===x.l10ns[Ie.config.locale]&&Ie.config.errorHandler(new Error("flatpickr: invalid locale "+Ie.config.locale)),Ie.l10n=Object.assign({},x.l10ns.default,"object"==typeof Ie.config.locale?Ie.config.locale:"default"!==Ie.config.locale?x.l10ns[Ie.config.locale]:void 0),p.K="("+Ie.l10n.amPM[0]+"|"+Ie.l10n.amPM[1]+"|"+Ie.l10n.amPM[0].toLowerCase()+"|"+Ie.l10n.amPM[1].toLowerCase()+")",Ie.formatDate=y(Ie)}function ue(e){if(void 0!==Ie.calendarContainer){De("onPreCalendarPosition");var t=e||Ie._positionElement,a=Array.prototype.reduce.call(Ie.calendarContainer.children,function(e,t){return e+t.offsetHeight},0),i=Ie.calendarContainer.offsetWidth,r=Ie.config.position,o=t.getBoundingClientRect(),c=window.innerHeight-o.bottom,l="above"===r||"below"!==r&&c<a&&o.top>a,u=window.pageYOffset+o.top+(l?-a-2:t.offsetHeight+2);if(n(Ie.calendarContainer,"arrowTop",!l),n(Ie.calendarContainer,"arrowBottom",l),!Ie.config.inline){var s=window.pageXOffset+o.left,d=window.document.body.offsetWidth-o.right,f=s+i>window.document.body.offsetWidth;n(Ie.calendarContainer,"rightMost",f),Ie.config.static||(Ie.calendarContainer.style.top=u+"px",f?(Ie.calendarContainer.style.left="auto",Ie.calendarContainer.style.right=d+"px"):(Ie.calendarContainer.style.left=s+"px",Ie.calendarContainer.style.right="auto"))}}}function se(){Ie.config.noCalendar||Ie.isMobile||(z(),xe(),q())}function de(){Ie._input.focus(),-1!==window.navigator.userAgent.indexOf("MSIE")||void 0!==navigator.msMaxTouchPoints?setTimeout(Ie.close,0):Ie.close()}function fe(e){e.preventDefault(),e.stopPropagation();var n=function(e){return e.classList&&e.classList.contains("flatpickr-day")&&!e.classList.contains("disabled")&&!e.classList.contains("notAllowed")},a=r(e.target,n);if(void 0!==a){var i=a,o=Ie.latestSelectedDateObj=new Date(i.dateObj.getTime()),c=(o.getMonth()<Ie.currentMonth||o.getMonth()>Ie.currentMonth+Ie.config.showMonths-1)&&"range"!==Ie.config.mode;if(Ie.selectedDateElem=i,"single"===Ie.config.mode)Ie.selectedDates=[o];else if("multiple"===Ie.config.mode){var l=Ce(o);l?Ie.selectedDates.splice(parseInt(l),1):Ie.selectedDates.push(o)}else"range"===Ie.config.mode&&(2===Ie.selectedDates.length&&Ie.clear(!1),Ie.selectedDates.push(o),0!==t(o,Ie.selectedDates[0],!0)&&Ie.selectedDates.sort(function(e,t){return e.getTime()-t.getTime()}));if(E(),c){var u=Ie.currentYear!==o.getFullYear();Ie.currentYear=o.getFullYear(),Ie.currentMonth=o.getMonth(),u&&De("onYearChange"),De("onMonthChange")}if(xe(),q(),Ie.config.minDate&&Ie.minDateHasTime&&Ie.config.enableTime&&0===t(o,Ie.config.minDate)&&S(Ie.config.minDate),Ee(),Ie.config.enableTime&&setTimeout(function(){return Ie.showTimeInput=!0},50),"range"===Ie.config.mode&&(1===Ie.selectedDates.length?ae(i):xe()),c||"range"===Ie.config.mode||1!==Ie.config.showMonths?Ie.selectedDateElem&&Ie.selectedDateElem.focus():H(i.$i,0),void 0!==Ie.hourElement&&setTimeout(function(){return void 0!==Ie.hourElement&&Ie.hourElement.select()},451),Ie.config.closeOnSelect){var s="single"===Ie.config.mode&&!Ie.config.enableTime,d="range"===Ie.config.mode&&2===Ie.selectedDates.length&&!Ie.config.enableTime;(s||d)&&de()}P()}}function me(e,t){null!==e&&"object"==typeof e?Object.assign(Ie.config,e):(Ie.config[e]=t,void 0!==ke[e]&&ke[e].forEach(function(e){return e()})),Ie.redraw(),j()}function ge(e,t){var n=[];if(e instanceof Array)n=e.map(function(e){return Ie.parseDate(e,t)});else if(e instanceof Date||"number"==typeof e)n=[Ie.parseDate(e,t)];else if("string"==typeof e)switch(Ie.config.mode){case"single":n=[Ie.parseDate(e,t)];break;case"multiple":n=e.split(Ie.config.conjunction).map(function(e){return Ie.parseDate(e,t)});break;case"range":n=e.split(Ie.l10n.rangeSeparator).map(function(e){return Ie.parseDate(e,t)})}else Ie.config.errorHandler(new Error("Invalid date supplied: "+JSON.stringify(e)));Ie.selectedDates=n.filter(function(e){return e instanceof Date&&te(e,!1)}),"range"===Ie.config.mode&&Ie.selectedDates.sort(function(e,t){return e.getTime()-t.getTime()})}function pe(e,t,n){if(void 0===t&&(t=!1),void 0===n&&(n=Ie.config.dateFormat),0!==e&&!e)return Ie.clear(t);ge(e,n),Ie.showTimeInput=Ie.selectedDates.length>0,Ie.latestSelectedDateObj=Ie.selectedDates[0],Ie.redraw(),j(),S(),Ee(t),t&&De("onChange")}function ve(e){return e.map(function(e){return"string"==typeof e||"number"==typeof e||e instanceof Date?Ie.parseDate(e,void 0,!0):e&&"object"==typeof e&&e.from&&e.to?{from:Ie.parseDate(e.from,void 0),to:Ie.parseDate(e.to,void 0)}:e}).filter(function(e){return e})}function he(){Ie.selectedDates=[],Ie.now=Ie.parseDate(Ie.config.now)||new Date;var e=Ie.config.defaultDate||Ie.input.value;e&&ge(e,Ie.config.dateFormat);var t=Ie.selectedDates.length>0?Ie.selectedDates[0]:Ie.config.minDate&&Ie.config.minDate.getTime()>Ie.now.getTime()?Ie.config.minDate:Ie.config.maxDate&&Ie.config.maxDate.getTime()<Ie.now.getTime()?Ie.config.maxDate:Ie.now;Ie.currentYear=t.getFullYear(),Ie.currentMonth=t.getMonth(),Ie.selectedDates.length>0&&(Ie.latestSelectedDateObj=Ie.selectedDates[0]),void 0!==Ie.config.minTime&&(Ie.config.minTime=Ie.parseDate(Ie.config.minTime,"H:i")),void 0!==Ie.config.maxTime&&(Ie.config.maxTime=Ie.parseDate(Ie.config.maxTime,"H:i")),Ie.minDateHasTime=!!Ie.config.minDate&&(Ie.config.minDate.getHours()>0||Ie.config.minDate.getMinutes()>0||Ie.config.minDate.getSeconds()>0),Ie.maxDateHasTime=!!Ie.config.maxDate&&(Ie.config.maxDate.getHours()>0||Ie.config.maxDate.getMinutes()>0||Ie.config.maxDate.getSeconds()>0),Object.defineProperty(Ie,"showTimeInput",{get:function(){return Ie._showTimeInput},set:function(e){Ie._showTimeInput=e,Ie.calendarContainer&&n(Ie.calendarContainer,"showTimeInput",e),Ie.isOpen&&ue()}})}function ye(){if(Ie.input=Ie.config.wrap?c.querySelector("[data-input]"):c,!Ie.input)return void Ie.config.errorHandler(new Error("Invalid input element specified"));Ie.input._type=Ie.input.type,Ie.input.type="text",Ie.input.classList.add("flatpickr-input"),Ie._input=Ie.input,Ie.config.altInput&&(Ie.altInput=a(Ie.input.nodeName,Ie.input.className+" "+Ie.config.altInputClass),Ie._input=Ie.altInput,Ie.altInput.placeholder=Ie.input.placeholder,Ie.altInput.disabled=Ie.input.disabled,Ie.altInput.required=Ie.input.required,Ie.altInput.tabIndex=Ie.input.tabIndex,Ie.altInput.type="text",Ie.input.type="hidden",!Ie.config.static&&Ie.input.parentNode&&Ie.input.parentNode.insertBefore(Ie.altInput,Ie.input.nextSibling)),Ie.config.allowInput||Ie._input.setAttribute("readonly","readonly"),Ie._positionElement=Ie.config.positionElement||Ie._input}function be(){var e=Ie.config.enableTime?Ie.config.noCalendar?"time":"datetime-local":"date";Ie.mobileInput=a("input",Ie.input.className+" flatpickr-mobile"),Ie.mobileInput.step=Ie.input.getAttribute("step")||"any",Ie.mobileInput.tabIndex=1,Ie.mobileInput.type=e,Ie.mobileInput.disabled=Ie.input.disabled,Ie.mobileInput.required=Ie.input.required,Ie.mobileInput.placeholder=Ie.input.placeholder,Ie.mobileFormatStr="datetime-local"===e?"Y-m-d\\TH:i:S":"date"===e?"Y-m-d":"H:i:S",Ie.selectedDates.length>0&&(Ie.mobileInput.defaultValue=Ie.mobileInput.value=Ie.formatDate(Ie.selectedDates[0],Ie.mobileFormatStr)),Ie.config.minDate&&(Ie.mobileInput.min=Ie.formatDate(Ie.config.minDate,"Y-m-d")),Ie.config.maxDate&&(Ie.mobileInput.max=Ie.formatDate(Ie.config.maxDate,"Y-m-d")),Ie.input.type="hidden",void 0!==Ie.altInput&&(Ie.altInput.type="hidden");try{Ie.input.parentNode&&Ie.input.parentNode.insertBefore(Ie.mobileInput,Ie.input.nextSibling)}catch(e){}k(Ie.mobileInput,"change",function(e){Ie.setDate(e.target.value,!1,Ie.mobileFormatStr),De("onChange"),De("onClose")})}function we(){if(Ie.isOpen)return Ie.close();Ie.open()}function De(e,t){var n=Ie.config[e];if(void 0!==n&&n.length>0)for(var a=0;n[a]&&a<n.length;a++)n[a](Ie.selectedDates,Ie.input.value,Ie,t);"onChange"===e&&(Ie.input.dispatchEvent(Me("change")),Ie.input.dispatchEvent(Me("input")))}function Me(e){var t=document.createEvent("Event");return t.initEvent(e,!0,!0),t}function Ce(e){for(var n=0;n<Ie.selectedDates.length;n++)if(0===t(Ie.selectedDates[n],e))return""+n;return!1}function Te(e){return!("range"!==Ie.config.mode||Ie.selectedDates.length<2)&&(t(e,Ie.selectedDates[0])>=0&&t(e,Ie.selectedDates[1])<=0)}function xe(){Ie.config.noCalendar||Ie.isMobile||!Ie.monthNav||(Ie.yearElements.forEach(function(e,t){var n=new Date(Ie.currentYear,Ie.currentMonth,1);n.setMonth(Ie.currentMonth+t),Ie.monthElements[t].textContent=m(n.getMonth(),Ie.config.shorthandCurrentMonth,Ie.l10n)+" ",e.value=n.getFullYear().toString()}),Ie._hidePrevMonthArrow=void 0!==Ie.config.minDate&&(Ie.currentYear===Ie.config.minDate.getFullYear()?Ie.currentMonth<=Ie.config.minDate.getMonth():Ie.currentYear<Ie.config.minDate.getFullYear()),Ie._hideNextMonthArrow=void 0!==Ie.config.maxDate&&(Ie.currentYear===Ie.config.maxDate.getFullYear()?Ie.currentMonth+1>Ie.config.maxDate.getMonth():Ie.currentYear>Ie.config.maxDate.getFullYear()))}function Ee(e){if(void 0===e&&(e=!0),0===Ie.selectedDates.length)return Ie.clear(e);void 0!==Ie.mobileInput&&Ie.mobileFormatStr&&(Ie.mobileInput.value=void 0!==Ie.latestSelectedDateObj?Ie.formatDate(Ie.latestSelectedDateObj,Ie.mobileFormatStr):"");var t="range"!==Ie.config.mode?Ie.config.conjunction:Ie.l10n.rangeSeparator;Ie.input.value=Ie.selectedDates.map(function(e){return Ie.formatDate(e,Ie.config.dateFormat)}).join(t),void 0!==Ie.altInput&&(Ie.altInput.value=Ie.selectedDates.map(function(e){return Ie.formatDate(e,Ie.config.altFormat)}).join(t)),!1!==e&&De("onValueUpdate")}function Se(e){var t=Ie.prevMonthNav.contains(e.target),n=Ie.nextMonthNav.contains(e.target);t||n?X(t?-1:1):Ie.yearElements.indexOf(e.target)>=0?(e.preventDefault(),e.target.select()):e.target.classList.contains("arrowUp")?Ie.changeYear(Ie.currentYear+1):e.target.classList.contains("arrowDown")&&Ie.changeYear(Ie.currentYear-1)}function Oe(e){e.preventDefault();var t="keydown"===e.type,n=e.target;void 0!==Ie.amPM&&e.target===Ie.amPM&&(Ie.amPM.textContent=Ie.l10n.amPM[s(Ie.amPM.textContent===Ie.l10n.amPM[0])]);var a=parseFloat(n.getAttribute("data-min")),i=parseFloat(n.getAttribute("data-max")),r=parseFloat(n.getAttribute("data-step")),o=parseInt(n.value,10),c=e.delta||(t?38===e.which?1:-1:0),l=o+r*c;if(void 0!==n.value&&2===n.value.length){var d=n===Ie.hourElement,f=n===Ie.minuteElement;l<a?(l=i+l+s(!d)+(s(d)&&s(!Ie.amPM)),f&&F(void 0,-1,Ie.hourElement)):l>i&&(l=n===Ie.hourElement?l-i-s(!Ie.amPM):a,f&&F(void 0,1,Ie.hourElement)),Ie.amPM&&d&&(1===r?l+o===23:Math.abs(l-o)>r)&&(Ie.amPM.textContent=Ie.l10n.amPM[s(Ie.amPM.textContent===Ie.l10n.amPM[0])]),n.value=u(l)}}var Ie={config:Object.assign({},x.defaultConfig),l10n:h};Ie.parseDate=b({config:Ie.config,l10n:Ie.l10n}),Ie._handlers=[],Ie._bind=k,Ie._setHoursFromDate=S,Ie.changeMonth=X,Ie.changeYear=ee,Ie.clear=$,Ie.close=G,Ie._createElement=a,Ie.destroy=V,Ie.isEnabled=te,Ie.jumpToDate=j,Ie.open=re,Ie.redraw=se,Ie.set=me,Ie.setDate=pe,Ie.toggle=we;var ke={locale:[le]};return function(){if(Ie.element=Ie.input=c,Ie.isOpen=!1,ce(),le(),ye(),he(),f(),Ie.isMobile||L(),A(),(Ie.selectedDates.length||Ie.config.noCalendar)&&(Ie.config.enableTime&&S(Ie.config.noCalendar?Ie.latestSelectedDateObj||Ie.config.minDate:void 0),Ee(!1)),Ie.showTimeInput=Ie.selectedDates.length>0||Ie.config.noCalendar,void 0!==Ie.daysContainer){Ie.calendarContainer.style.visibility="hidden",Ie.calendarContainer.style.display="block";var e=(Ie.daysContainer.offsetWidth+1)*Ie.config.showMonths;Ie.daysContainer.style.width=e+"px",Ie.calendarContainer.style.width=e+"px",void 0!==Ie.weekWrapper&&(Ie.calendarContainer.style.width=e+Ie.weekWrapper.offsetWidth+"px"),Ie.calendarContainer.style.visibility="visible",Ie.calendarContainer.style.display=null}var t=/^((?!chrome|android).)*safari/i.test(navigator.userAgent);!Ie.isMobile&&t&&ue(),De("onReady")}(),Ie}function l(e,t){for(var n=Array.prototype.slice.call(e),a=[],i=0;i<n.length;i++){var r=n[i];try{if(null!==r.getAttribute("data-fp-omit"))continue;void 0!==r._flatpickr&&(r._flatpickr.destroy(),r._flatpickr=void 0),r._flatpickr=c(r,t||{}),a.push(r._flatpickr)}catch(e){console.error(e)}}return 1===a.length?a[0]:a}var u=function(e){return("0"+e).slice(-2)},s=function(e){return!0===e?1:0},d=function(e){return e instanceof Array?e:[e]},f=function(){},m=function(e,t,n){return n.months[t?"shorthand":"longhand"][e]},g={D:f,F:function(e,t,n){e.setMonth(n.months.longhand.indexOf(t))},G:function(e,t){e.setHours(parseFloat(t))},H:function(e,t){e.setHours(parseFloat(t))},J:function(e,t){e.setDate(parseFloat(t))},K:function(e,t,n){e.setHours(e.getHours()%12+12*s(new RegExp(n.amPM[1],"i").test(t)))},M:function(e,t,n){e.setMonth(n.months.shorthand.indexOf(t))},S:function(e,t){e.setSeconds(parseFloat(t))},U:function(e,t){return new Date(1e3*parseFloat(t))},W:function(e,t){var n=parseInt(t);return new Date(e.getFullYear(),0,2+7*(n-1),0,0,0,0)},Y:function(e,t){e.setFullYear(parseFloat(t))},Z:function(e,t){return new Date(t)},d:function(e,t){e.setDate(parseFloat(t))},h:function(e,t){e.setHours(parseFloat(t))},i:function(e,t){e.setMinutes(parseFloat(t))},j:function(e,t){e.setDate(parseFloat(t))},l:f,m:function(e,t){e.setMonth(parseFloat(t)-1)},n:function(e,t){e.setMonth(parseFloat(t)-1)},s:function(e,t){e.setSeconds(parseFloat(t))},w:f,y:function(e,t){e.setFullYear(2e3+parseFloat(t))}},p={D:"(\\w+)",F:"(\\w+)",G:"(\\d\\d|\\d)",H:"(\\d\\d|\\d)",J:"(\\d\\d|\\d)\\w+",K:"",M:"(\\w+)",S:"(\\d\\d|\\d)",U:"(.+)",W:"(\\d\\d|\\d)",Y:"(\\d{4})",Z:"(.+)",d:"(\\d\\d|\\d)",h:"(\\d\\d|\\d)",i:"(\\d\\d|\\d)",j:"(\\d\\d|\\d)",l:"(\\w+)",m:"(\\d\\d|\\d)",n:"(\\d\\d|\\d)",s:"(\\d\\d|\\d)",w:"(\\d\\d|\\d)",y:"(\\d{2})"},v={Z:function(e){return e.toISOString()},D:function(e,t,n){return t.weekdays.shorthand[v.w(e,t,n)]},F:function(e,t,n){return m(v.n(e,t,n)-1,!1,t)},G:function(e,t,n){return u(v.h(e,t,n))},H:function(e){return u(e.getHours())},J:function(e,t){return void 0!==t.ordinal?e.getDate()+t.ordinal(e.getDate()):e.getDate()},K:function(e,t){return t.amPM[s(e.getHours()>11)]},M:function(e,t){return m(e.getMonth(),!0,t)},S:function(e){return u(e.getSeconds())},U:function(e){return e.getTime()/1e3},W:function(e,t,n){return n.getWeek(e)},Y:function(e){return e.getFullYear()},d:function(e){return u(e.getDate())},h:function(e){return e.getHours()%12?e.getHours()%12:12},i:function(e){return u(e.getMinutes())},j:function(e){return e.getDate()},l:function(e,t){return t.weekdays.longhand[e.getDay()]},m:function(e){return u(e.getMonth()+1)},n:function(e){return e.getMonth()+1},s:function(e){return e.getSeconds()},w:function(e){return e.getDay()},y:function(e){return String(e.getFullYear()).substring(2)}},h={weekdays:{shorthand:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],longhand:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},months:{shorthand:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],longhand:["January","February","March","April","May","June","July","August","September","October","November","December"]},daysInMonth:[31,28,31,30,31,30,31,31,30,31,30,31],firstDayOfWeek:0,ordinal:function(e){var t=e%100;if(t>3&&t<21)return"th";switch(t%10){case 1:return"st";case 2:return"nd";case 3:return"rd";default:return"th"}},rangeSeparator:" to ",weekAbbreviation:"Wk",scrollTitle:"Scroll to increment",toggleTitle:"Click to toggle",amPM:["AM","PM"],yearAriaLabel:"Year"},y=function(e){var t=e.config,n=void 0===t?C:t,a=e.l10n,i=void 0===a?h:a;return function(e,t,a){if(void 0!==n.formatDate)return n.formatDate(e,t);var r=a||i;return t.split("").map(function(t,a,i){return v[t]&&"\\"!==i[a-1]?v[t](e,r,n):"\\"!==t?t:""}).join("")}},b=function(e){var t=e.config,n=void 0===t?C:t,a=e.l10n,i=void 0===a?h:a;return function(e,t,a){if(0===e||e){var r,o=e;if(e instanceof Date)r=new Date(e.getTime());else if("string"!=typeof e&&void 0!==e.toFixed)r=new Date(e);else if("string"==typeof e){var c=t||(n||C).dateFormat,l=String(e).trim();if("today"===l)r=new Date,a=!0;else if(/Z$/.test(l)||/GMT$/.test(l))r=new Date(e);else if(n&&n.parseDate)r=n.parseDate(e,c);else{r=n&&n.noCalendar?new Date((new Date).setHours(0,0,0,0)):new Date((new Date).getFullYear(),0,1,0,0,0,0);for(var u,s=[],d=0,f=0,m="";d<c.length;d++){var v=c[d],h="\\"===v,y="\\"===c[d-1]||h;if(p[v]&&!y){m+=p[v];var b=new RegExp(m).exec(e);b&&(u=!0)&&s["Y"!==v?"push":"unshift"]({fn:g[v],val:b[++f]})}else h||(m+=".");s.forEach(function(e){var t=e.fn,n=e.val;return r=t(r,n,i)||r})}r=u?r:void 0}}return r instanceof Date?(!0===a&&r.setHours(0,0,0,0),r):void n.errorHandler(new Error("Invalid date provided: "+o))}}},w=function(e){var t=new Date(e.getTime());t.setHours(0,0,0,0),t.setDate(t.getDate()+3-(t.getDay()+6)%7);var n=new Date(t.getFullYear(),0,4);return 1+Math.round(((t.getTime()-n.getTime())/864e5-3+(n.getDay()+6)%7)/7)},D=function(e,t,n){return e>Math.min(t,n)&&e<Math.max(t,n)},M={DAY:864e5},C={_disable:[],_enable:[],allowInput:!1,altFormat:"F j, Y",altInput:!1,altInputClass:"form-control input",animate:"object"==typeof window&&-1===window.navigator.userAgent.indexOf("MSIE"),ariaDateFormat:"F j, Y",clickOpens:!0,closeOnSelect:!0,conjunction:", ",dateFormat:"Y-m-d",defaultHour:12,defaultMinute:0,defaultSeconds:0,disable:[],disableMobile:!1,enable:[],enableSeconds:!1,enableTime:!1,errorHandler:console.warn,getWeek:w,hourIncrement:1,ignoredFocusElements:[],inline:!1,locale:"default",minuteIncrement:5,mode:"single",nextArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",noCalendar:!1,now:new Date,onChange:[],onClose:[],onDayCreate:[],onDestroy:[],onKeyDown:[],onMonthChange:[],onOpen:[],onParseConfig:[],onReady:[],onValueUpdate:[],onYearChange:[],onPreCalendarPosition:[],plugins:[],position:"auto",positionElement:void 0,prevArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",shorthandCurrentMonth:!1,showMonths:1,static:!1,time_24hr:!1,weekNumbers:!1,wrap:!1};"function"!=typeof Object.assign&&(Object.assign=function(e){if(!e)throw TypeError("Cannot convert undefined or null to object");for(var t=arguments.length,n=new Array(t>1?t-1:0),a=1;a<t;a++)n[a-1]=arguments[a];for(var i=0;i<n.length;i++){var r=n[i];!function(t){t&&Object.keys(t).forEach(function(n){return e[n]=t[n]})}(r)}return e});var T=300;"undefined"!=typeof HTMLElement&&(HTMLCollection.prototype.flatpickr=NodeList.prototype.flatpickr=function(e){return l(this,e)},HTMLElement.prototype.flatpickr=function(e){return l([this],e)});var x=function(e,t){return e instanceof NodeList?l(e,t):"string"==typeof e?l(window.document.querySelectorAll(e),t):l([e],t)};return x.defaultConfig=C,x.l10ns={en:Object.assign({},h),default:Object.assign({},h)},x.localize=function(e){x.l10ns.default=Object.assign({},x.l10ns.default,e)},x.setDefaults=function(e){x.defaultConfig=Object.assign({},x.defaultConfig,e)},x.parseDate=b({}),x.formatDate=y({}),x.compareDates=t,"undefined"!=typeof jQuery&&(jQuery.fn.flatpickr=function(e){return l(this,e)}),Date.prototype.fp_incr=function(e){return new Date(this.getFullYear(),this.getMonth(),this.getDate()+("string"==typeof e?parseInt(e,10):e))},x})},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=document.querySelectorAll(".gallery-wrapper");if(!e)return!1;[].forEach.call(e,function(e){var t=e.querySelector(".add-gallery-images"),n=(0,c.default)(e,".image-gallery-hidden"),a=(0,l.removeItems)(n,l.onRemoveImage),i=(0,l.dragItems)(n,l.onDragImage),o=(0,r.default)(e,{list:".gallery-images",onDrag:i,onRemove:a,listTemplate:u}),s=wp.media({title:"Choose Media",button:{text:"Use Selected Media"},multiple:!0});t.addEventListener("click",function(e){e.preventDefault(),s.open()}),s.on("select",function(){s.state().get("selection").toJSON().forEach(function(e){o.add(e),n.add(e.id)})})})};var i=n(1),r=a(i),o=n(2),c=a(o),l=n(3),u=function(e){return'<li class="gallery-image-item"><span class="gallery-iamge-id">'+e.id+'</span><img src="'+e.url+'" class="gallery-image"/><span><svg class="remove-gallery-image" viewBox="0 0 20 20">\n  <path d="M10 2c4.42 0 8 3.58 8 8s-3.58 8-8 8-8-3.58-8-8 3.58-8 8-8zM15 13l-3-3 3-3-2-2-3 3-3-3-2 2 3 3-3 3 2 2 3-3 3 3z"></path>\n</svg></span></li>'}},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=document.querySelectorAll(".table-list");if(!e)return!1;[].forEach.call(e,function(e){var t=e.querySelector(".table-list-add"),n=(0,c.default)(e,".table-list-hidden"),a=(0,l.removeItems)(n,l.onRemoveTable),i=(0,l.dragItems)(n,l.onDragTable),o=(0,r.default)(e,{list:".table-list-list",onDrag:i,onRemove:a,listTemplate:u}),s=e.querySelector(".text-list-wrapper"),d=s.querySelector(".table-list-key"),f=s.querySelector(".table-list-value");t.addEventListener("click",function(e){e.preventDefault();var t={key:d.value,value:f.value};o.add(t),n.add(t),d.value="",f.value=""})})};var i=n(1),r=a(i),o=n(2),c=a(o),l=n(3),u=function(e){return'<li class="text-list-item table-list-item">\n    <span class="table-list-key">'+e.key+'</span>\n    <span class="table-list-value">'+e.value+'</span>\n    <svg viewBox="0 0 20 20">\n        <path d="M10 2c4.42 0 8 3.58 8 8s-3.58 8-8 8-8-3.58-8-8 3.58-8 8-8zM15 13l-3-3 3-3-2-2-3 3-3-3-2 2 3 3-3 3 2 2 3-3 3 3z"></path>\n    </svg>\n</li>'}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vaW5kZXguYnVuZGxlLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCBmMDY5YWY2ZWE1MjEwYTNhYTUzOSIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL2xpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc2VyaWFsaXplZC1pbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi91dGlsaXRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vYXV0b3N1Z2dlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vdGV4dC1saXN0LmpzIiwid2VicGFjazovLy8vVXNlcnMvYm9iYnkvV29yay9hcmNoc3lzdGVtcy93ZWIvYXBwL3BsdWdpbnMvb21nLWZpZWxkcy9ub2RlX21vZHVsZXMvZHJhZ3VsYS9kcmFndWxhLmpzIiwid2VicGFjazovLy8vVXNlcnMvYm9iYnkvV29yay9hcmNoc3lzdGVtcy93ZWIvYXBwL3BsdWdpbnMvb21nLWZpZWxkcy9ub2RlX21vZHVsZXMvY29udHJhL2VtaXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9ib2JieS9Xb3JrL2FyY2hzeXN0ZW1zL3dlYi9hcHAvcGx1Z2lucy9vbWctZmllbGRzL25vZGVfbW9kdWxlcy9hdG9hL2F0b2EuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9ib2JieS9Xb3JrL2FyY2hzeXN0ZW1zL3dlYi9hcHAvcGx1Z2lucy9vbWctZmllbGRzL25vZGVfbW9kdWxlcy9jb250cmEvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9ib2JieS9Xb3JrL2FyY2hzeXN0ZW1zL3dlYi9hcHAvcGx1Z2lucy9vbWctZmllbGRzL25vZGVfbW9kdWxlcy90aWNreS90aWNreS1icm93c2VyLmpzIiwid2VicGFjazovLy8vVXNlcnMvYm9iYnkvV29yay9hcmNoc3lzdGVtcy93ZWIvYXBwL3BsdWdpbnMvb21nLWZpZWxkcy9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2JvYmJ5L1dvcmsvYXJjaHN5c3RlbXMvd2ViL2FwcC9wbHVnaW5zL29tZy1maWVsZHMvbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9ib2JieS9Xb3JrL2FyY2hzeXN0ZW1zL3dlYi9hcHAvcGx1Z2lucy9vbWctZmllbGRzL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9ib2JieS9Xb3JrL2FyY2hzeXN0ZW1zL3dlYi9hcHAvcGx1Z2lucy9vbWctZmllbGRzL25vZGVfbW9kdWxlcy9jcm9zc3ZlbnQvc3JjL2Nyb3NzdmVudC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2JvYmJ5L1dvcmsvYXJjaHN5c3RlbXMvd2ViL2FwcC9wbHVnaW5zL29tZy1maWVsZHMvbm9kZV9tb2R1bGVzL2N1c3RvbS1ldmVudC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2JvYmJ5L1dvcmsvYXJjaHN5c3RlbXMvd2ViL2FwcC9wbHVnaW5zL29tZy1maWVsZHMvbm9kZV9tb2R1bGVzL2Nyb3NzdmVudC9zcmMvZXZlbnRtYXAuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9ib2JieS9Xb3JrL2FyY2hzeXN0ZW1zL3dlYi9hcHAvcGx1Z2lucy9vbWctZmllbGRzL25vZGVfbW9kdWxlcy9kcmFndWxhL2NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vYXV0b3N1Z2dlc3QtbGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9hdXRvLWl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vaW1hZ2UtdXBsb2Fkcy5qcyIsIndlYnBhY2s6Ly8vLi9kYXRlcGlja2VyLmpzIiwid2VicGFjazovLy8vVXNlcnMvYm9iYnkvV29yay9hcmNoc3lzdGVtcy93ZWIvYXBwL3BsdWdpbnMvb21nLWZpZWxkcy9ub2RlX21vZHVsZXMvZmxhdHBpY2tyL2Rpc3QvZmxhdHBpY2tyLmpzIiwid2VicGFjazovLy8uL2dhbGxlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vdGFibGUtbGlzdC5qcyJdLCJuYW1lcyI6WyJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZyIsInRoaXMiLCJGdW5jdGlvbiIsImV2YWwiLCJlIiwid2luZG93IiwidmFsdWUiLCJkZWZhdWx0IiwicGFyZW50IiwiYXJncyIsImxpc3QiLCJxdWVyeVNlbGVjdG9yIiwicmVnaXN0ZXJEcmFnRXZlbnRzIiwib25EcmFnIiwicmVnaXN0ZXJSZW1vdmVFdmVudHMiLCJvblJlbW92ZSIsImFkZCIsImh0bWwiLCJsaXN0VGVtcGxhdGUiLCJsaXN0SXRlbSIsImRvY3VtZW50IiwiY3JlYXRlUmFuZ2UiLCJjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQiLCJhcHBlbmRDaGlsZCIsIl9kcmFndWxhIiwiX2RyYWd1bGEyIiwib2JqIiwibGlzdEl0ZW1zIiwicXVlcnlTZWxlY3RvckFsbCIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0YXJnZXQiLCJ0YWdOYW1lIiwiY2xvc2VzdCIsImlubmVySFRNTCIsInJlbW92ZUNoaWxkIiwiY2FsbGJhY2siLCJvbiIsImVsIiwiaGlkZGVuSW5wdXQiLCJoaWRkZW5FbCIsImdldEN1cnJlbnRWYWx1ZSIsIkpTT04iLCJwYXJzZSIsImFkZFZhbHVlIiwiY29uY2F0IiwicmVtb3ZlVmFsdWUiLCJzdHJpbmdpZnkiLCJyZW1vdmUiLCJ1cGRhdGUiLCJ2YWx1ZXMiLCJyZW1vdmVJdGVtcyIsIkhpZGRlbiIsImRyYWdJdGVtcyIsIm9uRHJhZ09iamVjdCIsInJlZHVjZSIsImFjYyIsImlkIiwiZGF0YXNldCIsInRpdGxlIiwib25EcmFnVGV4dCIsIm9uRHJhZ0ltYWdlIiwicGFyc2VJbnQiLCJvblJlbW92ZU9iamVjdCIsImN1cnJlbnRWYWx1ZSIsIm5ld1ZhbHVlIiwiZmlsdGVyIiwiY3VycmVudCIsIm9uUmVtb3ZlVGV4dCIsIm9uUmVtb3ZlSW1hZ2UiLCJvbkRyYWdUYWJsZSIsImtleSIsIm9uUmVtb3ZlVGFibGUiLCJhdXRvc3VnZ2VzdCIsImVuZHBvaW50Iiwib25TZWxlY3QiLCJvbkVtcHR5Iiwic2VhcmNoVGVybSIsInhociIsImxlbmd0aCIsIm9uQXV0b1N1Z2dlc3RJbnB1dCIsImNsYXNzTGlzdCIsImdldE9wdGlvbnMiLCJ1cGRhdGVPcHRpb25zIiwiaW5wdXQiLCJpbnB1dFZhbHVlIiwibGlzdE5hbWUiLCJnZXRBdHRyaWJ1dGUiLCJsaXN0T3B0aW9ucyIsImdldEVsZW1lbnRCeUlkIiwiY2hpbGROb2RlcyIsIm1hdGNoIiwib3B0aW9uIiwicXVlcnkiLCJidWlsZFF1ZXJ5IiwidXJsIiwiYWJvcnQiLCJYTUxIdHRwUmVxdWVzdCIsImV2dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJpc0pTT04iLCJyZXNwb25zZVRleHQiLCJyZXN1bHRzIiwibWVzc2FnZSIsIm9wZW4iLCJzZW5kIiwiZXJyb3IiLCJyZXNwb25zZSIsImNvbnNvbGUiLCJ3YXJuIiwiQXJyYXkiLCJpc0FycmF5IiwiY3JlYXRlT3B0aW9ucyIsImRhdGFsaXN0IiwibmV3T3B0aW9ucyIsInJlc3VsdCIsImNyZWF0ZU9wdGlvbiIsInJlbmRlcmVkIiwic3RyIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwidG9Mb3dlckNhc2UiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2luZGV4IiwiX3RleHRMaXN0IiwiX3RleHRMaXN0MiIsIl9hdXRvc3VnZ2VzdExpc3QiLCJfYXV0b3N1Z2dlc3RMaXN0MiIsIl9saXN0IiwiX2F1dG9JdGVtIiwiX2F1dG9JdGVtMiIsIl9pbWFnZVVwbG9hZHMiLCJfaW1hZ2VVcGxvYWRzMiIsIl9kYXRlcGlja2VyIiwiX2RhdGVwaWNrZXIyIiwiX2dhbGxlcnkiLCJfZ2FsbGVyeTIiLCJfdGFibGVMaXN0IiwiX3RhYmxlTGlzdDIiLCJjcmVhdGVUZXh0SXRlbSIsImNyZWF0ZUF1dG9TdWdnZXN0SXRlbSIsImJ1dHRvbiIsImhpZGRlbiIsImxpc3RGaWVsZHMiLCJmb3JFYWNoIiwibGlzdEZpZWxkIiwidGV4dElucHV0IiwiYWRkQnV0dG9uIiwiX3NlcmlhbGl6ZWRJbnB1dDIiLCJfdXRpbGl0aWVzIiwiZHJhZyIsIkxpc3QiLCJfbGlzdDIiLCJhc3NpZ24iLCJrZXlDb2RlIiwicHJldmVudERlZmF1bHQiLCJfc2VyaWFsaXplZElucHV0IiwiZ2xvYmFsIiwiZHJhZ3VsYSIsImluaXRpYWxDb250YWluZXJzIiwib3B0aW9ucyIsImlzQ29udGFpbmVyIiwiZHJha2UiLCJjb250YWluZXJzIiwiaW5kZXhPZiIsImV2ZW50cyIsIm9wIiwidG91Y2h5IiwiZG9jdW1lbnRFbGVtZW50IiwiZ3JhYiIsInJlbGVhc2UiLCJldmVudHVhbE1vdmVtZW50cyIsInN0YXJ0QmVjYXVzZU1vdXNlTW92ZWQiLCJtb3ZlbWVudHMiLCJjcm9zc3ZlbnQiLCJwcmV2ZW50R3JhYmJlZCIsImRlc3Ryb3kiLCJfZ3JhYmJlZCIsIl9tb3ZlWCIsImNsaWVudFgiLCJfbW92ZVkiLCJjbGllbnRZIiwid2hpY2hNb3VzZUJ1dHRvbiIsIm1ldGFLZXkiLCJjdHJsS2V5IiwiaXRlbSIsImNvbnRleHQiLCJjYW5TdGFydCIsInR5cGUiLCJpc0lucHV0IiwiZm9jdXMiLCJpZ25vcmVJbnB1dFRleHRTZWxlY3Rpb24iLCJnZXRDb29yZCIsImRvYyIsImVsZW1lbnRGcm9tUG9pbnQiLCJncmFiYmVkIiwiZW5kIiwic3RhcnQiLCJvZmZzZXQiLCJnZXRPZmZzZXQiLCJfaXRlbSIsIl9vZmZzZXRYIiwibGVmdCIsIl9vZmZzZXRZIiwidG9wIiwiY2xhc3NlcyIsIl9jb3B5IiwicmVuZGVyTWlycm9ySW1hZ2UiLCJkcmFnZ2luZyIsIl9taXJyb3IiLCJoYW5kbGUiLCJnZXRQYXJlbnQiLCJpbnZhbGlkIiwic291cmNlIiwibW92ZXMiLCJuZXh0RWwiLCJjYW5Nb3ZlIiwibWFudWFsU3RhcnQiLCJpc0NvcHkiLCJjbG9uZU5vZGUiLCJlbWl0IiwiX3NvdXJjZSIsIl9pbml0aWFsU2libGluZyIsIl9jdXJyZW50U2libGluZyIsImludmFsaWRUYXJnZXQiLCJkcm9wIiwidW5ncmFiIiwiZWxlbWVudEJlaGluZEN1cnNvciIsImdldEVsZW1lbnRCZWhpbmRQb2ludCIsImRyb3BUYXJnZXQiLCJmaW5kRHJvcFRhcmdldCIsImNvcHlTb3J0U291cmNlIiwicmVtb3ZlT25TcGlsbCIsImNhbmNlbCIsImlzSW5pdGlhbFBsYWNlbWVudCIsImNsZWFudXAiLCJyZXZlcnQiLCJyZXZlcnRzIiwiYXJndW1lbnRzIiwicmV2ZXJ0T25TcGlsbCIsImluaXRpYWwiLCJpbnNlcnRCZWZvcmUiLCJyZW1vdmVNaXJyb3JJbWFnZSIsInJtIiwiX3JlbmRlclRpbWVyIiwiY2xlYXJUaW1lb3V0IiwiX2xhc3REcm9wVGFyZ2V0Iiwic2libGluZyIsImltbWVkaWF0ZSIsImdldEltbWVkaWF0ZUNoaWxkIiwicmVmZXJlbmNlIiwiZ2V0UmVmZXJlbmNlIiwiYWNjZXB0cyIsIm1vdmVkIiwieCIsInkiLCJzdHlsZSIsImNoYW5nZWQiLCJzcGlsbE92ZXIiLCJzcGlsbE91dCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aWR0aCIsImdldFJlY3RXaWR0aCIsImhlaWdodCIsImdldFJlY3RIZWlnaHQiLCJtaXJyb3JDb250YWluZXIiLCJyZXNvbHZlIiwiYWZ0ZXIiLCJob3Jpem9udGFsIiwiZGlyZWN0aW9uIiwibGVuIiwiY2hpbGRyZW4iLCJjb250YWluZXIiLCJjb3B5IiwiYWx3YXlzIiwibmV2ZXIiLCJib2R5IiwiZW1pdHRlciIsImZuIiwidG91Y2giLCJtb3VzZXVwIiwibW91c2Vkb3duIiwibW91c2Vtb3ZlIiwicG9pbnRlcnMiLCJtaWNyb3NvZnQiLCJuYXZpZ2F0b3IiLCJwb2ludGVyRW5hYmxlZCIsIm1zUG9pbnRlckVuYWJsZWQiLCJ0b3VjaGVzIiwid2hpY2giLCJidXR0b25zIiwiZ2V0U2Nyb2xsIiwic2Nyb2xsUHJvcCIsIm9mZnNldFByb3AiLCJjbGllbnRIZWlnaHQiLCJwb2ludCIsInN0YXRlIiwiY2xhc3NOYW1lIiwicmlnaHQiLCJib3R0b20iLCJwYXJlbnROb2RlIiwiaXNFZGl0YWJsZSIsImNvbnRlbnRFZGl0YWJsZSIsIm5leHRFbGVtZW50U2libGluZyIsIm5leHRTaWJsaW5nIiwibm9kZVR5cGUiLCJnZXRFdmVudEhvc3QiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJjb29yZCIsImhvc3QiLCJtaXNzTWFwIiwicGFnZVgiLCJwYWdlWSIsImF0b2EiLCJkZWJvdW5jZSIsInRoaW5nIiwib3B0cyIsInVuZGVmaW5lZCIsInB1c2giLCJvbmNlIiwiX29uY2UiLCJvZmYiLCJldCIsInNwbGljZSIsImVtaXR0ZXJTbmFwc2hvdCIsInNoaWZ0IiwiYXBwbHkiLCJzbGljZSIsImN0eCIsInRocm93cyIsImxpc3RlbiIsImFzeW5jIiwiYSIsInRpY2t5Iiwic2V0SW1tZWRpYXRlIiwidGljayIsInNpIiwic2V0VGltZW91dCIsIlRpbWVvdXQiLCJjbGVhckZuIiwiX2lkIiwiX2NsZWFyRm4iLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJ0aW1lb3V0IiwiY2xvc2UiLCJ1bnJlZiIsInJlZiIsImVucm9sbCIsIm1zZWNzIiwiX2lkbGVUaW1lb3V0SWQiLCJfaWRsZVRpbWVvdXQiLCJ1bmVucm9sbCIsIl91bnJlZkFjdGl2ZSIsImFjdGl2ZSIsIl9vblRpbWVvdXQiLCJzZWxmIiwiY2xlYXJJbW1lZGlhdGUiLCJwcm9jZXNzIiwidGFzayIsInRhc2tzQnlIYW5kbGUiLCJuZXh0SGFuZGxlIiwicmVnaXN0ZXJJbW1lZGlhdGUiLCJydW4iLCJydW5JZlByZXNlbnQiLCJjdXJyZW50bHlSdW5uaW5nQVRhc2siLCJhdHRhY2hUbyIsImdldFByb3RvdHlwZU9mIiwidG9TdHJpbmciLCJuZXh0VGljayIsInBvc3RNZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsInBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMiLCJvbGRPbk1lc3NhZ2UiLCJvbm1lc3NhZ2UiLCJtZXNzYWdlUHJlZml4IiwiTWF0aCIsInJhbmRvbSIsIm9uR2xvYmFsTWVzc2FnZSIsImV2ZW50IiwiZGF0YSIsImF0dGFjaEV2ZW50IiwiTWVzc2FnZUNoYW5uZWwiLCJjaGFubmVsIiwicG9ydDEiLCJwb3J0MiIsImNyZWF0ZUVsZW1lbnQiLCJzY3JpcHQiLCJkZWZhdWx0U2V0VGltb3V0IiwiRXJyb3IiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImNhY2hlZFNldFRpbWVvdXQiLCJydW5DbGVhclRpbWVvdXQiLCJtYXJrZXIiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpbmluZyIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwicXVldWVJbmRleCIsImRyYWluUXVldWUiLCJJdGVtIiwiYXJyYXkiLCJub29wIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiYWRkRXZlbnRFYXN5IiwiY2FwdHVyaW5nIiwiYWRkRXZlbnRIYXJkIiwid3JhcCIsInJlbW92ZUV2ZW50RWFzeSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudEhhcmQiLCJsaXN0ZW5lciIsInVud3JhcCIsImRldGFjaEV2ZW50IiwiZmFicmljYXRlRXZlbnQiLCJtb2RlbCIsImV2ZW50bWFwIiwiY3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImNyZWF0ZUV2ZW50T2JqZWN0IiwiZGlzcGF0Y2hFdmVudCIsImZpcmVFdmVudCIsIndyYXBwZXJGYWN0b3J5Iiwib3JpZ2luYWxFdmVudCIsInNyY0VsZW1lbnQiLCJyZXR1cm5WYWx1ZSIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsIndyYXBwZXIiLCJoYXJkQ2FjaGUiLCJlbGVtZW50IiwiZmluZCIsImFkZEV2ZW50IiwicmVtb3ZlRXZlbnQiLCJmYWJyaWNhdGUiLCJOYXRpdmVDdXN0b21FdmVudCIsIkN1c3RvbUV2ZW50IiwiZm9vIiwicGFyYW1zIiwiaW5pdEN1c3RvbUV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJCb29sZWFuIiwiZXZlbnRuYW1lIiwicm9uIiwidGVzdCIsImxvb2t1cENsYXNzIiwiY2FjaGVkIiwiY2FjaGUiLCJsYXN0SW5kZXgiLCJSZWdFeHAiLCJhZGRDbGFzcyIsInJtQ2xhc3MiLCJyZXBsYWNlIiwidHJpbSIsImZpZWxkcyIsImF1dG9MaXN0IiwiZWxOYW1lIiwibmFtZXNwYWNlIiwiT01HRmllbGRzIiwiYmFzZVVSTCIsInJlc291cmNlIiwiX2F1dG9zdWdnZXN0MiIsIl9hdXRvc3VnZ2VzdCIsImF1dG9JdGVtIiwiaW1hZ2VVcGxvYWRzIiwiZmVhdHVyZWRJbWFnZVdyYXAiLCJtYXAiLCJyZW1vdmVJbWFnZSIsInJlcGxhY2VJbWFnZSIsInNldEltYWdlIiwiZmVhdHVyZWRJbWFnZVRhZyIsImZlYXR1cmVkSW1hZ2VJRCIsImZlYXR1cmVkSW1hZ2VUaXRsZSIsIm1lZGlhRnJhbWUiLCJ3cCIsIm1lZGlhIiwidGV4dCIsIm11bHRpcGxlIiwiYXR0YWNobWVudCIsImZpcnN0IiwidG9KU09OIiwidG9nZ2xlIiwic2V0QXR0cmlidXRlIiwic2l6ZXMiLCJ0aHVtYm5haWwiLCJpY29uIiwiZmlsZW5hbWUiLCJkYXRlcGlja2VycyIsImRhdGVGaWVsZCIsImN1cnJlbnREYXRlIiwiZGF0ZSIsIl9mbGF0cGlja3IyIiwiYWx0SW5wdXQiLCJhbHRGb3JtYXQiLCJkYXRlRm9ybWF0IiwiZGVmYXVsdERhdGUiLCJfZmxhdHBpY2tyIiwiZmFjdG9yeSIsImZ1bmMiLCJ3YWl0IiwiY29tcGFyZURhdGVzIiwiZGF0ZTEiLCJkYXRlMiIsInRpbWVsZXNzIiwiRGF0ZSIsImdldFRpbWUiLCJzZXRIb3VycyIsInRvZ2dsZUNsYXNzIiwiZWxlbSIsImJvb2wiLCJ0YWciLCJjb250ZW50IiwidGV4dENvbnRlbnQiLCJjbGVhck5vZGUiLCJub2RlIiwiZmlyc3RDaGlsZCIsImZpbmRQYXJlbnQiLCJjb25kaXRpb24iLCJjcmVhdGVOdW1iZXJJbnB1dCIsImlucHV0Q2xhc3NOYW1lIiwibnVtSW5wdXQiLCJhcnJvd1VwIiwiYXJyb3dEb3duIiwicGF0dGVybiIsIkZsYXRwaWNrckluc3RhbmNlIiwiaW5zdGFuY2VDb25maWciLCJzZXR1cEhlbHBlckZ1bmN0aW9ucyIsInV0aWxzIiwiZ2V0RGF5c0luTW9udGgiLCJtb250aCIsInlyIiwiY3VycmVudE1vbnRoIiwiY3VycmVudFllYXIiLCJsMTBuIiwiZGF5c0luTW9udGgiLCJiaW5kVG9JbnN0YW5jZSIsImJpbmQiLCJ1cGRhdGVUaW1lIiwic2VsZWN0ZWREYXRlcyIsInRpbWVXcmFwcGVyIiwic2V0SG91cnNGcm9tSW5wdXRzIiwidXBkYXRlVmFsdWUiLCJERUJPVU5DRURfQ0hBTkdFX01TIiwiYW1wbTJtaWxpdGFyeSIsImhvdXIiLCJhbVBNIiwiaW50IiwibWlsaXRhcnkyYW1wbSIsImhvdXJFbGVtZW50IiwibWludXRlRWxlbWVudCIsImhvdXJzIiwibWludXRlcyIsInNlY29uZHMiLCJzZWNvbmRFbGVtZW50IiwibGltaXRNaW5Ib3VycyIsImNvbmZpZyIsIm1pblRpbWUiLCJtaW5EYXRlIiwibWluRGF0ZUhhc1RpbWUiLCJsYXRlc3RTZWxlY3RlZERhdGVPYmoiLCJtYXhUaW1lIiwibWF4RGF0ZSIsIm1heERhdGVIYXNUaW1lIiwibWluIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsIm1heCIsInNldEhvdXJzRnJvbURhdGUiLCJkYXRlT2JqIiwiaXNNb2JpbGUiLCJwYWQiLCJ0aW1lXzI0aHIiLCJvblllYXJJbnB1dCIsInllYXIiLCJkZWx0YSIsImJsdXIiLCJjaGFuZ2VZZWFyIiwiaGFuZGxlciIsImV2IiwiX2hhbmRsZXJzIiwib25DbGljayIsInRyaWdnZXJDaGFuZ2UiLCJ0cmlnZ2VyRXZlbnQiLCJiaW5kRXZlbnRzIiwic2V0dXBNb2JpbGUiLCJkZWJvdW5jZWRSZXNpemUiLCJvblJlc2l6ZSIsIl9kZWJvdW5jZWRDaGFuZ2UiLCJkYXlzQ29udGFpbmVyIiwidXNlckFnZW50IiwibW9kZSIsIm9uTW91c2VPdmVyIiwib25LZXlEb3duIiwic3RhdGljIiwiX2lucHV0IiwiaW5saW5lIiwib250b3VjaHN0YXJ0IiwiZG9jdW1lbnRDbGljayIsImNhcHR1cmUiLCJjbGlja09wZW5zIiwibW9udGhOYXYiLCJvbk1vbnRoTmF2Q2xpY2siLCJzZWxlY3REYXRlIiwidGltZUNvbnRhaW5lciIsInNlbFRleHQiLCJzZWxlY3QiLCJ0aW1lSW5jcmVtZW50IiwicGFzc2l2ZSIsImp1bXBUb0RhdGUiLCJqdW1wRGF0ZSIsImp1bXBUbyIsInBhcnNlRGF0ZSIsIm5vdyIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJlcnJvckhhbmRsZXIiLCJyZWRyYXciLCJpbmNyZW1lbnROdW1JbnB1dCIsImNvbnRhaW5zIiwiaW5wdXRFbGVtIiwiYnVpbGQiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjYWxlbmRhckNvbnRhaW5lciIsInRhYkluZGV4Iiwibm9DYWxlbmRhciIsImJ1aWxkTW9udGhOYXYiLCJpbm5lckNvbnRhaW5lciIsIndlZWtOdW1iZXJzIiwiX2J1aWxkV2Vla3MiLCJidWlsZFdlZWtzIiwid2Vla1dyYXBwZXIiLCJyQ29udGFpbmVyIiwiYnVpbGRXZWVrZGF5cyIsImJ1aWxkRGF5cyIsImVuYWJsZVRpbWUiLCJidWlsZFRpbWUiLCJhbmltYXRlIiwic2hvd01vbnRocyIsImN1c3RvbUFwcGVuZCIsImFwcGVuZFRvIiwiY3JlYXRlRGF5IiwiZGF5TnVtYmVyIiwiZGF0ZUlzRW5hYmxlZCIsImlzRW5hYmxlZCIsImRheUVsZW1lbnQiLCJnZXREYXRlIiwiJGkiLCJmb3JtYXREYXRlIiwiYXJpYURhdGVGb3JtYXQiLCJ0b2RheURhdGVFbGVtIiwiaXNEYXRlU2VsZWN0ZWQiLCJzZWxlY3RlZERhdGVFbGVtIiwiaXNEYXRlSW5SYW5nZSIsImluc2VydEFkamFjZW50SFRNTCIsImdldFdlZWsiLCJmb2N1c09uRGF5IiwiY3VycmVudEluZCIsImN1cnJlbnRJbmRleCIsImFjdGl2ZUVsZW1lbnQiLCJuZXdJbmRleCIsInRhcmdldE5vZGUiLCJkYXlzIiwiYnVpbGRNb250aERheXMiLCJmaXJzdE9mTW9udGgiLCJnZXREYXkiLCJmaXJzdERheU9mV2VlayIsInByZXZNb250aERheXMiLCJkYXlJbmRleCIsImRheU51bSIsImRheUNvbnRhaW5lciIsImZyYWciLCJzZXRNb250aCIsImJ1aWxkTW9udGgiLCJtb250aE5hdkZyYWdtZW50IiwibW9udGhFbGVtZW50Iiwic2Nyb2xsVGl0bGUiLCJ5ZWFySW5wdXQiLCJ0YWJpbmRleCIsInllYXJFbGVtZW50IiwieWVhckFyaWFMYWJlbCIsImRpc2FibGVkIiwieWVhckVsZW1lbnRzIiwibW9udGhFbGVtZW50cyIsInByZXZNb250aE5hdiIsInByZXZBcnJvdyIsIm5leHRNb250aE5hdiIsIm5leHRBcnJvdyIsIl9faGlkZVByZXZNb250aEFycm93Iiwic2V0IiwiX19oaWRlTmV4dE1vbnRoQXJyb3ciLCJjdXJyZW50WWVhckVsZW1lbnQiLCJ1cGRhdGVOYXZpZ2F0aW9uQ3VycmVudE1vbnRoIiwic2VwYXJhdG9yIiwiaG91cklucHV0IiwibWludXRlSW5wdXQiLCJkZWZhdWx0SG91ciIsImRlZmF1bHRNaW51dGUiLCJob3VySW5jcmVtZW50IiwibWludXRlSW5jcmVtZW50IiwiZW5hYmxlU2Vjb25kcyIsInNlY29uZElucHV0IiwiZGVmYXVsdFNlY29uZHMiLCJ0b2dnbGVUaXRsZSIsIndlZWtkYXlDb250YWluZXIiLCJ1cGRhdGVXZWVrZGF5cyIsIndlZWtkYXlzIiwic2hvcnRoYW5kIiwiam9pbiIsIndlZWtBYmJyZXZpYXRpb24iLCJjaGFuZ2VNb250aCIsImlzX29mZnNldCIsImZyb21fa2V5Ym9hcmQiLCJfaGlkZVByZXZNb250aEFycm93IiwiX2hpZGVOZXh0TW9udGhBcnJvdyIsImNsZWFyIiwidHJpZ2dlckNoYW5nZUV2ZW50IiwibW9iaWxlSW5wdXQiLCJzaG93VGltZUlucHV0IiwiaXNPcGVuIiwiaCIsIl90eXBlIiwicmVtb3ZlQXR0cmlidXRlIiwiayIsIl8iLCJpc0NhbGVuZGFyRWxlbSIsImlzQ2FsZW5kYXJFbGVtZW50IiwicGF0aCIsImxvc3RGb2N1cyIsInJlbGF0ZWRUYXJnZXQiLCJpc0lnbm9yZWQiLCJpZ25vcmVkRm9jdXNFbGVtZW50cyIsInNvbWUiLCJuZXdZZWFyIiwibmV3WWVhck51bSIsImlzTmV3WWVhciIsImRhdGVUb0NoZWNrIiwiZW5hYmxlIiwiZGlzYWJsZSIsInBhcnNlZCIsImZyb20iLCJ0byIsImNhbGVuZGFyRWxlbSIsImFsbG93SW5wdXQiLCJhbGxvd0tleWRvd24iLCJhbGxvd0lubGluZUtleWRvd24iLCJzZXREYXRlIiwiaXNUaW1lT2JqIiwiZm9jdXNBbmRDbG9zZSIsIl9kZWx0YSIsImNoYXJBdCIsImhvdmVyRGF0ZSIsImluaXRpYWxEYXRlIiwicmFuZ2VTdGFydERhdGUiLCJyYW5nZUVuZERhdGUiLCJtb250aHMiLCJmaXJzdERheSIsImxhc3REYXkiLCJsYXN0Q2hpbGQiLCJjb250YWluc0Rpc2FibGVkIiwibWluUmFuZ2UiLCJtYXhSYW5nZSIsInQiLCJkdXJhdGlvbiIsIkRBWSIsInByZXZNb250aCIsImRheUVsZW0iLCJ0aW1lc3RhbXAiLCJvdXRPZlJhbmdlIiwiaXNCZXR3ZWVuIiwicG9zaXRpb25DYWxlbmRhciIsInBvc2l0aW9uRWxlbWVudCIsImNsaWNrIiwid2FzT3BlbiIsIm1pbk1heERhdGVTZXR0ZXIiLCJpbnZlcnNlRGF0ZU9iaiIsInBhcnNlQ29uZmlnIiwiYm9vbE9wdHMiLCJob29rcyIsInVzZXJDb25maWciLCJmb3JtYXRzJCQxIiwiX2VuYWJsZSIsImRhdGVzIiwicGFyc2VEYXRlUnVsZXMiLCJfZGlzYWJsZSIsImZsYXRwaWNrciIsImRlZmF1bHRDb25maWciLCJfbWluRGF0ZSIsIl9tYXhEYXRlIiwibWluTWF4VGltZVNldHRlciIsInZhbCIsIl9taW5UaW1lIiwiX21heFRpbWUiLCJfaSIsImFycmF5aWZ5IiwiX2kyIiwicGx1Z2lucyIsInBsdWdpbkNvbmYiLCJkaXNhYmxlTW9iaWxlIiwic2V0dXBMb2NhbGUiLCJsb2NhbGUiLCJsMTBucyIsInRva2VuUmVnZXgiLCJLIiwiY3JlYXRlRGF0ZUZvcm1hdHRlciIsImN1c3RvbVBvc2l0aW9uRWxlbWVudCIsIl9wb3NpdGlvbkVsZW1lbnQiLCJjYWxlbmRhckhlaWdodCIsImNoaWxkIiwib2Zmc2V0SGVpZ2h0IiwiY2FsZW5kYXJXaWR0aCIsIm9mZnNldFdpZHRoIiwiY29uZmlnUG9zIiwicG9zaXRpb24iLCJpbnB1dEJvdW5kcyIsImRpc3RhbmNlRnJvbUJvdHRvbSIsImlubmVySGVpZ2h0Iiwic2hvd09uVG9wIiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsInJpZ2h0TW9zdCIsIm1zTWF4VG91Y2hQb2ludHMiLCJpc1NlbGVjdGFibGUiLCJkYXkiLCJzZWxlY3RlZERhdGUiLCJzaG91bGRDaGFuZ2VNb250aCIsInNlbGVjdGVkSW5kZXgiLCJzb3J0IiwiYiIsImNsb3NlT25TZWxlY3QiLCJzaW5nbGUiLCJyYW5nZSIsIkNBTExCQUNLUyIsInNldFNlbGVjdGVkRGF0ZSIsImlucHV0RGF0ZSIsImZvcm1hdCIsInNwbGl0IiwiY29uanVuY3Rpb24iLCJyYW5nZVNlcGFyYXRvciIsImFyciIsInJ1bGUiLCJzZXR1cERhdGVzIiwicHJlbG9hZGVkRGF0ZSIsIl9zaG93VGltZUlucHV0Iiwic2V0dXBJbnB1dHMiLCJub2RlTmFtZSIsImFsdElucHV0Q2xhc3MiLCJwbGFjZWhvbGRlciIsInJlcXVpcmVkIiwiaW5wdXRUeXBlIiwic3RlcCIsIm1vYmlsZUZvcm1hdFN0ciIsImRlZmF1bHRWYWx1ZSIsIl9hIiwibW9udGhUb1N0ciIsInNob3J0aGFuZEN1cnJlbnRNb250aCIsImpvaW5DaGFyIiwiZE9iaiIsImlzUHJldk1vbnRoIiwiaXNOZXh0TW9udGgiLCJpc0tleURvd24iLCJwYXJzZUZsb2F0IiwiY3VyVmFsdWUiLCJpc0hvdXJFbGVtIiwiaXNNaW51dGVFbGVtIiwiYWJzIiwiZW5nbGlzaCIsImNyZWF0ZURhdGVQYXJzZXIiLCJfYmluZCIsIl9zZXRIb3Vyc0Zyb21EYXRlIiwiX2NyZWF0ZUVsZW1lbnQiLCJ2aXNpYmlsaXR5IiwiZGlzcGxheSIsImRheXNXaWR0aCIsImlzU2FmYXJpIiwibm9kZUxpc3QiLCJub2RlcyIsImluc3RhbmNlcyIsIm51bWJlciIsImRvX25vdGhpbmciLCJtb250aE51bWJlciIsInJldkZvcm1hdCIsIkQiLCJGIiwibW9udGhOYW1lIiwibG9uZ2hhbmQiLCJHIiwiSCIsIkoiLCJNIiwic2hvcnRNb250aCIsIlMiLCJzZXRTZWNvbmRzIiwiVSIsInVuaXhTZWNvbmRzIiwiVyIsIndlZWtOdW0iLCJ3ZWVrTnVtYmVyIiwiWSIsInNldEZ1bGxZZWFyIiwiWiIsIklTT0RhdGUiLCJzZXRNaW51dGVzIiwiaiIsInciLCJmb3JtYXRzIiwidG9JU09TdHJpbmciLCJvcmRpbmFsIiwiU3RyaW5nIiwic3Vic3RyaW5nIiwibnRoIiwiX3JlZiIsIl9yZWYkY29uZmlnIiwiZGVmYXVsdHMiLCJfcmVmJGwxMG4iLCJmcm10Iiwib3ZlcnJpZGVMb2NhbGUiLCJfcmVmMiIsIl9yZWYyJGNvbmZpZyIsIl9yZWYyJGwxMG4iLCJnaXZlbkZvcm1hdCIsInBhcnNlZERhdGUiLCJkYXRlX29yaWciLCJ0b0ZpeGVkIiwiZGF0ZXN0ciIsIm1hdGNoZWQiLCJvcHMiLCJtYXRjaEluZGV4IiwicmVnZXhTdHIiLCJ0b2tlbiIsImlzQmFja1NsYXNoIiwiZXNjYXBlZCIsImV4ZWMiLCJfcmVmMyIsImdpdmVuRGF0ZSIsIndlZWsxIiwicm91bmQiLCJ0cyIsInRzMSIsInRzMiIsIm9uQ2hhbmdlIiwib25DbG9zZSIsIm9uRGF5Q3JlYXRlIiwib25EZXN0cm95Iiwib25Nb250aENoYW5nZSIsIm9uT3BlbiIsIm9uUGFyc2VDb25maWciLCJvblJlYWR5Iiwib25WYWx1ZVVwZGF0ZSIsIm9uWWVhckNoYW5nZSIsIm9uUHJlQ2FsZW5kYXJQb3NpdGlvbiIsIlR5cGVFcnJvciIsIl9sZW4iLCJfa2V5Iiwia2V5cyIsIkhUTUxFbGVtZW50IiwiSFRNTENvbGxlY3Rpb24iLCJOb2RlTGlzdCIsInNlbGVjdG9yIiwiZW4iLCJsb2NhbGl6ZSIsInNldERlZmF1bHRzIiwialF1ZXJ5IiwiZnBfaW5jciIsImdhbGxlcnlTZWN0aW9ucyIsImdhbGxlcnkiLCJhZGRJbWFnZSIsImltYWdlSXRlbSIsImltYWdlIiwidGFibGVMaXN0cyIsInRhYmxlTGlzdCIsImFkZFJvdyIsInRhYmxlSXRlbSIsInJvd0RhdGEiXSwibWFwcGluZ3MiOiJDQUFTLFNBQVVBLEdDSW5CLFFBQUFDLEdBQUFDLEdBR0EsR0FBQUMsRUFBQUQsR0FDQSxNQUFBQyxHQUFBRCxHQUFBRSxPQUdBLElBQUFDLEdBQUFGLEVBQUFELElBQ0FJLEVBQUFKLEVBQ0FLLEdBQUEsRUFDQUgsV0FVQSxPQU5BSixHQUFBRSxHQUFBTSxLQUFBSCxFQUFBRCxRQUFBQyxJQUFBRCxRQUFBSCxHQUdBSSxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBdkJBLEdBQUFELEtBNEJBRixHQUFBUSxFQUFBVCxFQUdBQyxFQUFBUyxFQUFBUCxFQUdBRixFQUFBVSxFQUFBLFNBQUFQLEVB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Z0osR0FBS3RJLElBQUlvOUIsR0FDVGo3QixFQUFPbkMsSUFBSW85QixHQUVYOTVCLEVBQUloRSxNQUFRLEdBQ1pBLEVBQU1BLE1BQVEsT0E1Q3BCLElBQUF5SCxHQUFBMUosRUFBQSxHM0JreElJa0wsRUFBUzlCLEVBQXVCTSxHMkJqeElwQzRCLEVBQUF0TCxFQUFBLEczQnF4SUk4SyxFQUFvQjFCLEVBQXVCa0MsRzJCcHhJL0NQLEVBQUEvSyxFQUFBLEdBK0NNOC9CLEVBQVksU0FBQUMsR0FDaEIsdUZBQ2lDQSxFQUFROTVCLElBRHpDLCtDQUVtQzg1QixFQUFROTlCLE1BRjNDIiwiZmlsZSI6ImluZGV4LmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA1KTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxudmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpXHJcblx0XHRnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuXG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChwYXJlbnQsIGFyZ3MpIHtcbiAgICB2YXIgbGlzdCA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKGFyZ3MubGlzdCk7XG5cbiAgICByZWdpc3RlckRyYWdFdmVudHMobGlzdCwgYXJncy5vbkRyYWcpO1xuICAgIHJlZ2lzdGVyUmVtb3ZlRXZlbnRzKGxpc3QsIGFyZ3Mub25SZW1vdmUpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBodG1sID0gYXJncy5saXN0VGVtcGxhdGUodmFsdWUpO1xuICAgICAgICAgICAgdmFyIGxpc3RJdGVtID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQoaHRtbCk7XG5cbiAgICAgICAgICAgIGxpc3QuYXBwZW5kQ2hpbGQobGlzdEl0ZW0pO1xuICAgICAgICB9XG4gICAgfTtcbn07XG5cbnZhciBfZHJhZ3VsYSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cbnZhciBfZHJhZ3VsYTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kcmFndWxhKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHJlZ2lzdGVyUmVtb3ZlRXZlbnRzID0gZnVuY3Rpb24gcmVnaXN0ZXJSZW1vdmVFdmVudHMobGlzdCwgb25SZW1vdmUpIHtcbiAgICB2YXIgbGlzdEl0ZW1zID0gbGlzdC5xdWVyeVNlbGVjdG9yQWxsKCdsaScpO1xuXG4gICAgbGlzdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSAnc3ZnJyA9PT0gZS50YXJnZXQudGFnTmFtZSA/IGUudGFyZ2V0IDogZS50YXJnZXQuY2xvc2VzdCgnc3ZnJyk7XG5cbiAgICAgICAgaWYgKCdzdmcnID09PSB0YXJnZXQudGFnTmFtZSkge1xuICAgICAgICAgICAgdmFyIGxpc3RJdGVtID0gZS50YXJnZXQuY2xvc2VzdCgnbGknKTtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGxpc3RJdGVtLnF1ZXJ5U2VsZWN0b3IoJ3NwYW4nKS5pbm5lckhUTUw7XG4gICAgICAgICAgICBsaXN0LnJlbW92ZUNoaWxkKGxpc3RJdGVtKTtcbiAgICAgICAgICAgIG9uUmVtb3ZlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGxpc3RJdGVtcztcbn07XG5cbnZhciByZWdpc3RlckRyYWdFdmVudHMgPSBmdW5jdGlvbiByZWdpc3RlckRyYWdFdmVudHMobGlzdCwgY2FsbGJhY2spIHtcbiAgICB2YXIgZHJha2UgPSAoMCwgX2RyYWd1bGEyLmRlZmF1bHQpKFtsaXN0XSk7XG5cbiAgICBkcmFrZS5vbignZHJhZ2VuZCcsIGZ1bmN0aW9uIChlbCkge1xuICAgICAgICB2YXIgbGlzdEl0ZW1zID0gbGlzdC5xdWVyeVNlbGVjdG9yQWxsKCdsaScpO1xuICAgICAgICBjYWxsYmFjayhsaXN0LCBsaXN0SXRlbXMpO1xuICAgIH0pO1xufTtcblxuLyoqKi8gfSksXG4vKiAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChwYXJlbnQsIGhpZGRlbklucHV0KSB7XG4gIHZhciBoaWRkZW5FbCA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKGhpZGRlbklucHV0KTtcblxuICB2YXIgZ2V0Q3VycmVudFZhbHVlID0gZnVuY3Rpb24gZ2V0Q3VycmVudFZhbHVlKCkge1xuICAgIHJldHVybiBoaWRkZW5FbC52YWx1ZSA/IEpTT04ucGFyc2UoaGlkZGVuRWwudmFsdWUpIDogW107XG4gIH07XG5cbiAgdmFyIGFkZFZhbHVlID0gZnVuY3Rpb24gYWRkVmFsdWUodmFsdWUpIHtcbiAgICB2YXIgY3VycmVudFZhbHVlID0gZ2V0Q3VycmVudFZhbHVlKCk7XG4gICAgcmV0dXJuIGN1cnJlbnRWYWx1ZS5jb25jYXQodmFsdWUpO1xuICB9O1xuXG4gIHZhciByZW1vdmVWYWx1ZSA9IGZ1bmN0aW9uIHJlbW92ZVZhbHVlKHZhbHVlLCBvblJlbW92ZSkge1xuICAgIHZhciBjdXJyZW50VmFsdWUgPSBnZXRDdXJyZW50VmFsdWUoKTtcbiAgICByZXR1cm4gb25SZW1vdmUoY3VycmVudFZhbHVlLCB2YWx1ZSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgICAgaGlkZGVuRWwudmFsdWUgPSBKU09OLnN0cmluZ2lmeShhZGRWYWx1ZSh2YWx1ZSkpO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUodmFsdWUsIG9uUmVtb3ZlKSB7XG4gICAgICBoaWRkZW5FbC52YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHJlbW92ZVZhbHVlKHZhbHVlLCBvblJlbW92ZSkpO1xuICAgIH0sXG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUodmFsdWVzKSB7XG4gICAgICBoaWRkZW5FbC52YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlcyk7XG4gICAgfVxuICB9O1xufTtcblxuLyoqKi8gfSksXG4vKiAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgcmVtb3ZlSXRlbXMgPSBleHBvcnRzLnJlbW92ZUl0ZW1zID0gZnVuY3Rpb24gcmVtb3ZlSXRlbXMoSGlkZGVuLCBvblJlbW92ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgSGlkZGVuLnJlbW92ZSh2YWx1ZSwgb25SZW1vdmUpO1xuICB9O1xufTtcblxudmFyIGRyYWdJdGVtcyA9IGV4cG9ydHMuZHJhZ0l0ZW1zID0gZnVuY3Rpb24gZHJhZ0l0ZW1zKEhpZGRlbiwgb25EcmFnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobGlzdCwgbGlzdEl0ZW1zKSB7XG4gICAgdmFyIHZhbHVlcyA9IG9uRHJhZyhsaXN0LCBsaXN0SXRlbXMpO1xuICAgIEhpZGRlbi51cGRhdGUodmFsdWVzKTtcbiAgfTtcbn07XG5cbnZhciBvbkRyYWdPYmplY3QgPSBleHBvcnRzLm9uRHJhZ09iamVjdCA9IGZ1bmN0aW9uIG9uRHJhZ09iamVjdChsaXN0LCBsaXN0SXRlbXMpIHtcbiAgcmV0dXJuIFtdLnJlZHVjZS5jYWxsKGxpc3RJdGVtcywgZnVuY3Rpb24gKGFjYywgbGlzdEl0ZW0pIHtcbiAgICB2YXIgdmFsdWUgPSB7XG4gICAgICBpZDogbGlzdEl0ZW0uZGF0YXNldC5pZCxcbiAgICAgIHRpdGxlOiBsaXN0SXRlbS5xdWVyeVNlbGVjdG9yKCdzcGFuJykuaW5uZXJIVE1MXG4gICAgfTtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChbdmFsdWVdKTtcbiAgfSwgW10pO1xufTtcblxudmFyIG9uRHJhZ1RleHQgPSBleHBvcnRzLm9uRHJhZ1RleHQgPSBmdW5jdGlvbiBvbkRyYWdUZXh0KGxpc3QsIGxpc3RJdGVtcykge1xuICByZXR1cm4gW10ucmVkdWNlLmNhbGwobGlzdEl0ZW1zLCBmdW5jdGlvbiAoYWNjLCBsaXN0SXRlbSkge1xuICAgIHZhciB2YWx1ZSA9IGxpc3RJdGVtLnF1ZXJ5U2VsZWN0b3IoJ3NwYW4nKS5pbm5lckhUTUw7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQoW3ZhbHVlXSk7XG4gIH0sIFtdKTtcbn07XG5cbnZhciBvbkRyYWdJbWFnZSA9IGV4cG9ydHMub25EcmFnSW1hZ2UgPSBmdW5jdGlvbiBvbkRyYWdJbWFnZShsaXN0LCBsaXN0SXRlbXMpIHtcbiAgcmV0dXJuIFtdLnJlZHVjZS5jYWxsKGxpc3RJdGVtcywgZnVuY3Rpb24gKGFjYywgbGlzdEl0ZW0pIHtcbiAgICB2YXIgdmFsdWUgPSBwYXJzZUludChsaXN0SXRlbS5xdWVyeVNlbGVjdG9yKCdzcGFuJykuaW5uZXJIVE1MKTtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChbdmFsdWVdKTtcbiAgfSwgW10pO1xufTtcblxudmFyIG9uUmVtb3ZlT2JqZWN0ID0gZXhwb3J0cy5vblJlbW92ZU9iamVjdCA9IGZ1bmN0aW9uIG9uUmVtb3ZlT2JqZWN0KGN1cnJlbnRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgcmV0dXJuIGN1cnJlbnRWYWx1ZS5maWx0ZXIoZnVuY3Rpb24gKGN1cnJlbnQpIHtcbiAgICByZXR1cm4gY3VycmVudC50aXRsZSAhPT0gbmV3VmFsdWU7XG4gIH0pO1xufTtcblxudmFyIG9uUmVtb3ZlVGV4dCA9IGV4cG9ydHMub25SZW1vdmVUZXh0ID0gZnVuY3Rpb24gb25SZW1vdmVUZXh0KGN1cnJlbnRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgcmV0dXJuIGN1cnJlbnRWYWx1ZS5maWx0ZXIoZnVuY3Rpb24gKGN1cnJlbnQpIHtcbiAgICByZXR1cm4gY3VycmVudCAhPT0gbmV3VmFsdWU7XG4gIH0pO1xufTtcblxudmFyIG9uUmVtb3ZlSW1hZ2UgPSBleHBvcnRzLm9uUmVtb3ZlSW1hZ2UgPSBmdW5jdGlvbiBvblJlbW92ZUltYWdlKGN1cnJlbnRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgcmV0dXJuIGN1cnJlbnRWYWx1ZS5maWx0ZXIoZnVuY3Rpb24gKGN1cnJlbnQpIHtcbiAgICByZXR1cm4gY3VycmVudCAhPT0gcGFyc2VJbnQobmV3VmFsdWUpO1xuICB9KTtcbn07XG5cbnZhciBvbkRyYWdUYWJsZSA9IGV4cG9ydHMub25EcmFnVGFibGUgPSBmdW5jdGlvbiBvbkRyYWdUYWJsZShsaXN0LCBsaXN0SXRlbXMpIHtcbiAgcmV0dXJuIFtdLnJlZHVjZS5jYWxsKGxpc3RJdGVtcywgZnVuY3Rpb24gKGFjYywgbGlzdEl0ZW0pIHtcbiAgICB2YXIga2V5ID0gbGlzdEl0ZW0ucXVlcnlTZWxlY3RvcignLnRhYmxlLWxpc3Qta2V5JykuaW5uZXJIVE1MO1xuICAgIHZhciB2YWx1ZSA9IGxpc3RJdGVtLnF1ZXJ5U2VsZWN0b3IoJy50YWJsZS1saXN0LXZhbHVlJykuaW5uZXJIVE1MO1xuICAgIHJldHVybiBhY2MuY29uY2F0KFt7IGtleToga2V5LCB2YWx1ZTogdmFsdWUgfV0pO1xuICB9LCBbXSk7XG59O1xuXG52YXIgb25SZW1vdmVUYWJsZSA9IGV4cG9ydHMub25SZW1vdmVUYWJsZSA9IGZ1bmN0aW9uIG9uUmVtb3ZlVGFibGUoY3VycmVudFZhbHVlLCBuZXdWYWx1ZSkge1xuICByZXR1cm4gY3VycmVudFZhbHVlLmZpbHRlcihmdW5jdGlvbiAoY3VycmVudCkge1xuICAgIHJldHVybiBjdXJyZW50LmtleSAhPT0gbmV3VmFsdWU7XG4gIH0pO1xufTtcblxuLyoqKi8gfSksXG4vKiA0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChhdXRvc3VnZ2VzdCwgZW5kcG9pbnQsIG9uU2VsZWN0LCBvbkVtcHR5KSB7XG4gIHZhciBzZWFyY2hUZXJtID0gdm9pZCAwO1xuICBpZiAoIWF1dG9zdWdnZXN0KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHhociA9IGZhbHNlO1xuXG4gIGF1dG9zdWdnZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoMCA9PT0gZS50YXJnZXQudmFsdWUubGVuZ3RoICYmIG9uRW1wdHkpIHtcbiAgICAgIHNlYXJjaFRlcm0gPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgIG9uRW1wdHkoKTtcbiAgICB9XG5cbiAgICBpZiAoMyA+IGUudGFyZ2V0LnZhbHVlLmxlbmd0aCkge1xuICAgICAgc2VhcmNoVGVybSA9IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChlLnRhcmdldC52YWx1ZSA9PT0gc2VhcmNoVGVybSkge1xuICAgICAgdmFyIHZhbHVlID0gb25BdXRvU3VnZ2VzdElucHV0KGUpO1xuXG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgb25TZWxlY3QodmFsdWUsIGF1dG9zdWdnZXN0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHNlYXJjaFRlcm0gPSBlLnRhcmdldC52YWx1ZTtcblxuICAgIGF1dG9zdWdnZXN0LmNsYXNzTGlzdC5hZGQoJ3Nob3cnKTtcbiAgICB4aHIgPSBnZXRPcHRpb25zKHhociwgdXBkYXRlT3B0aW9ucywgYXV0b3N1Z2dlc3QsIGVuZHBvaW50KTtcbiAgfSk7XG4gIGF1dG9zdWdnZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgdmFsdWUgPSBvbkF1dG9TdWdnZXN0SW5wdXQoZSk7XG5cbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIG9uU2VsZWN0KHZhbHVlLCBhdXRvc3VnZ2VzdCk7XG4gICAgfVxuICB9KTtcbn07XG5cbnZhciBvbkF1dG9TdWdnZXN0SW5wdXQgPSBmdW5jdGlvbiBvbkF1dG9TdWdnZXN0SW5wdXQoZSkge1xuICB2YXIgaW5wdXQgPSBlLnRhcmdldDtcbiAgdmFyIGlucHV0VmFsdWUgPSBpbnB1dC52YWx1ZTtcbiAgdmFyIGxpc3ROYW1lID0gaW5wdXQuZ2V0QXR0cmlidXRlKCdsaXN0Jyk7XG4gIHZhciBsaXN0T3B0aW9ucyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGxpc3ROYW1lKS5jaGlsZE5vZGVzO1xuXG4gIHZhciBtYXRjaCA9IFtdLnJlZHVjZS5jYWxsKGxpc3RPcHRpb25zLCBmdW5jdGlvbiAoYWNjLCBvcHRpb24pIHtcbiAgICBpZiAob3B0aW9uLnZhbHVlID09PSBpbnB1dFZhbHVlKSB7XG4gICAgICByZXR1cm4gYWNjLmNvbmNhdCh7XG4gICAgICAgIGlkOiBvcHRpb24uZGF0YXNldC5pZCxcbiAgICAgICAgdGl0bGU6IG9wdGlvbi52YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhY2M7XG4gIH0sIFtdKTtcblxuICByZXR1cm4gMCA9PT0gbWF0Y2gubGVuZ3RoID8gZmFsc2UgOiBtYXRjaFswXTtcbn07XG5cbnZhciBnZXRPcHRpb25zID0gZnVuY3Rpb24gZ2V0T3B0aW9ucyh4aHIsIGNhbGxiYWNrLCBpbnB1dCwgZW5kcG9pbnQpIHtcbiAgdmFyIHF1ZXJ5ID0gYnVpbGRRdWVyeShpbnB1dC52YWx1ZSk7XG4gIHZhciB1cmwgPSBlbmRwb2ludCArIHF1ZXJ5O1xuXG4gIGlmICh4aHIpIHtcbiAgICB4aHIuYWJvcnQoKTtcbiAgfVxuXG4gIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gIHhoci5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKGV2dCkge1xuICAgIGNhbGxiYWNrKGZhbHNlLCBldnQpO1xuICB9LCBmYWxzZSk7XG5cbiAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQgJiYgaXNKU09OKHhoci5yZXNwb25zZVRleHQpKSB7XG4gICAgICBjYWxsYmFjayhmYWxzZSwgeyByZXN1bHRzOiBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpLCBpbnB1dDogaW5wdXQgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh4aHIucmVzcG9uc2VUZXh0ICYmIGlzSlNPTih4aHIucmVzcG9uc2VUZXh0KSkge1xuICAgICAgICBjYWxsYmFjayh7IG1lc3NhZ2U6IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCksIGlucHV0OiBpbnB1dCB9LCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHhoci5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGZ1bmN0aW9uIChldnQpIHtcbiAgICBjYWxsYmFjayhldnQsIGZhbHNlKTtcbiAgfSwgZmFsc2UpO1xuXG4gIHhoci5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGZ1bmN0aW9uIChldnQpIHtcbiAgICBjYWxsYmFjayh0cnVlLCBmYWxzZSk7XG4gIH0sIGZhbHNlKTtcblxuICB4aHIub3BlbignR0VUJywgdXJsLCB0cnVlKTtcblxuICB4aHIuc2VuZCgpO1xuXG4gIHJldHVybiB4aHI7XG59O1xuXG52YXIgdXBkYXRlT3B0aW9ucyA9IGZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMoZXJyb3IsIHJlc3BvbnNlKSB7XG4gIGlmIChlcnJvcikge1xuICAgIGlmICh0cnVlID09PSBlcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGVycm9yLmlucHV0LmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnKTtcbiAgICBjb25zb2xlLndhcm4oZXJyb3IpO1xuICB9XG5cbiAgaWYgKHJlc3BvbnNlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHJlc3BvbnNlLnJlc3VsdHMpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY3JlYXRlT3B0aW9ucyhyZXNwb25zZS5yZXN1bHRzLCByZXNwb25zZS5pbnB1dCk7XG4gIH1cbn07XG5cbnZhciBjcmVhdGVPcHRpb25zID0gZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyhyZXN1bHRzLCBpbnB1dCkge1xuICB2YXIgbGlzdE5hbWUgPSBpbnB1dC5nZXRBdHRyaWJ1dGUoJ2xpc3QnKTtcbiAgdmFyIGRhdGFsaXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobGlzdE5hbWUpO1xuXG4gIHZhciBuZXdPcHRpb25zID0gcmVzdWx0cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcmVzdWx0KSB7XG4gICAgdmFyIG9wdGlvbiA9IGNyZWF0ZU9wdGlvbihyZXN1bHQpO1xuICAgIHJldHVybiBhY2MuY29uY2F0KG9wdGlvbik7XG4gIH0sICcnKTtcblxuICBpbnB1dC5jbGFzc0xpc3QucmVtb3ZlKCdzaG93Jyk7XG4gIGRhdGFsaXN0LmlubmVySFRNTCA9IG5ld09wdGlvbnM7XG59O1xuXG52YXIgY3JlYXRlT3B0aW9uID0gZnVuY3Rpb24gY3JlYXRlT3B0aW9uKHZhbHVlKSB7XG4gIGlmICh2YWx1ZS50aXRsZSkge1xuICAgIHJldHVybiAnPG9wdGlvbiBkYXRhLWlkPScgKyB2YWx1ZS5pZCArICcgdmFsdWU9XCInICsgdmFsdWUudGl0bGUucmVuZGVyZWQgKyAnXCI+JztcbiAgfVxuXG4gIGlmICh2YWx1ZS5uYW1lKSB7XG4gICAgcmV0dXJuICc8b3B0aW9uIGRhdGEtaWQ9JyArIHZhbHVlLmlkICsgJyB2YWx1ZT1cIicgKyB2YWx1ZS5uYW1lICsgJ1wiPic7XG4gIH1cbn07XG5cbnZhciBpc0pTT04gPSBmdW5jdGlvbiBpc0pTT04oc3RyKSB7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB0cnkge1xuICAgIEpTT04ucGFyc2Uoc3RyKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxudmFyIGJ1aWxkUXVlcnkgPSBmdW5jdGlvbiBidWlsZFF1ZXJ5KHZhbHVlKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsdWUudG9Mb3dlckNhc2UoKSk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIF9pbmRleCA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5kZXgpO1xuXG52YXIgX3RleHRMaXN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxudmFyIF90ZXh0TGlzdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90ZXh0TGlzdCk7XG5cbnZhciBfYXV0b3N1Z2dlc3RMaXN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XG5cbnZhciBfYXV0b3N1Z2dlc3RMaXN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2F1dG9zdWdnZXN0TGlzdCk7XG5cbnZhciBfbGlzdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cbnZhciBfbGlzdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9saXN0KTtcblxudmFyIF9hdXRvSXRlbSA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXG52YXIgX2F1dG9JdGVtMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2F1dG9JdGVtKTtcblxudmFyIF9pbWFnZVVwbG9hZHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKTtcblxudmFyIF9pbWFnZVVwbG9hZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW1hZ2VVcGxvYWRzKTtcblxudmFyIF9kYXRlcGlja2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XG5cbnZhciBfZGF0ZXBpY2tlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kYXRlcGlja2VyKTtcblxudmFyIF9nYWxsZXJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSk7XG5cbnZhciBfZ2FsbGVyeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nYWxsZXJ5KTtcblxudmFyIF90YWJsZUxpc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KTtcblxudmFyIF90YWJsZUxpc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdGFibGVMaXN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNyZWF0ZVRleHRJdGVtID0gZnVuY3Rpb24gY3JlYXRlVGV4dEl0ZW0odmFsdWUpIHtcbiAgcmV0dXJuICc8bGkgY2xhc3M9XCJ0ZXh0LWxpc3QtaXRlbVwiPlxcbiAgICAgICAgPHNwYW4+JyArIHZhbHVlICsgJzwvc3Bhbj5cXG4gICAgICAgIDxzdmcgdmlld0JveD1cIjAgMCAyMCAyMFwiPlxcbiAgICAgICAgICAgIDxwYXRoIGQ9XCJNMTAgMmM0LjQyIDAgOCAzLjU4IDggOHMtMy41OCA4LTggOC04LTMuNTgtOC04IDMuNTgtOCA4LTh6TTE1IDEzbC0zLTMgMy0zLTItMi0zIDMtMy0zLTIgMiAzIDMtMyAzIDIgMiAzLTMgMyAzelwiPjwvcGF0aD5cXG4gICAgICAgIDwvc3ZnPlxcbiAgICA8L2xpPic7XG59O1xuXG52YXIgY3JlYXRlQXV0b1N1Z2dlc3RJdGVtID0gZnVuY3Rpb24gY3JlYXRlQXV0b1N1Z2dlc3RJdGVtKHZhbHVlKSB7XG4gIHJldHVybiAnPGxpIGNsYXNzPVwidGV4dC1saXN0LWl0ZW1cIiBkYXRhLWlkPVwiJyArIHZhbHVlLmlkICsgJ1wiPlxcbiAgICAgICAgPHNwYW4+JyArIHZhbHVlLnRpdGxlICsgJzwvc3Bhbj5cXG4gICAgICAgIDxzdmcgdmlld0JveD1cIjAgMCAyMCAyMFwiPlxcbiAgICAgICAgICAgIDxwYXRoIGQ9XCJNMTAgMmM0LjQyIDAgOCAzLjU4IDggOHMtMy41OCA4LTggOC04LTMuNTgtOC04IDMuNTgtOCA4LTh6TTE1IDEzbC0zLTMgMy0zLTItMi0zIDMtMy0zLTIgMiAzIDMtMyAzIDIgMiAzLTMgMyAzelwiPjwvcGF0aD5cXG4gICAgICAgIDwvc3ZnPlxcbiAgICA8L2xpPic7XG59O1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKCkge1xuICAoMCwgX2ltYWdlVXBsb2FkczIuZGVmYXVsdCkoKTtcbiAgKDAsIF90ZXh0TGlzdDIuZGVmYXVsdCkoe1xuICAgIHBhcmVudDogJy50ZXh0LWxpc3QnLFxuICAgIGJ1dHRvbjogJy50ZXh0LWxpc3QtYWRkJyxcbiAgICBsaXN0OiAnLnRleHQtbGlzdC1saXN0JyxcbiAgICBoaWRkZW46ICcudGV4dC1saXN0LWhpZGRlbicsXG4gICAgbGlzdFRlbXBsYXRlOiBjcmVhdGVUZXh0SXRlbVxuICB9KTtcblxuICAoMCwgX2F1dG9zdWdnZXN0TGlzdDIuZGVmYXVsdCkoe1xuICAgIHBhcmVudDogJy5hdXRvc3VnZ2VzdC1saXN0JyxcbiAgICBpbnB1dDogJ2F1dG9zdWdnZXN0LWxpc3QtaW5wdXQnLFxuICAgIGxpc3Q6ICcuYXV0b3N1Z2dlc3QtbGlzdC1saXN0JyxcbiAgICBoaWRkZW46ICcuYXV0b3N1Z2dlc3QtbGlzdC1oaWRkZW4nLFxuICAgIGxpc3RUZW1wbGF0ZTogY3JlYXRlQXV0b1N1Z2dlc3RJdGVtXG4gIH0pO1xuXG4gICgwLCBfYXV0b0l0ZW0yLmRlZmF1bHQpKHtcbiAgICBwYXJlbnQ6ICcuYXV0b3N1Z2dlc3Qtd3JhcHBlcicsXG4gICAgaW5wdXQ6ICcuYXV0b3N1Z2dlc3QtaW5wdXQnLFxuICAgIGhpZGRlbjogJy5hdXRvc3VnZ2VzdC1oaWRkZW4nXG4gIH0pO1xuXG4gICgwLCBfZGF0ZXBpY2tlcjIuZGVmYXVsdCkoKTtcbiAgKDAsIF9nYWxsZXJ5Mi5kZWZhdWx0KSgpO1xuICAoMCwgX3RhYmxlTGlzdDIuZGVmYXVsdCkoKTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuLyoqKi8gfSksXG4vKiA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICB2YXIgbGlzdEZpZWxkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYXJncy5wYXJlbnQpO1xuXG4gICAgaWYgKCFsaXN0RmllbGRzKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBbXS5mb3JFYWNoLmNhbGwobGlzdEZpZWxkcywgZnVuY3Rpb24gKGxpc3RGaWVsZCkge1xuICAgICAgICB2YXIgdGV4dElucHV0ID0gbGlzdEZpZWxkLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3R5cGU9dGV4dF0nKTtcbiAgICAgICAgdmFyIGFkZEJ1dHRvbiA9IGxpc3RGaWVsZC5xdWVyeVNlbGVjdG9yKGFyZ3MuYnV0dG9uKTtcbiAgICAgICAgdmFyIEhpZGRlbiA9ICgwLCBfc2VyaWFsaXplZElucHV0Mi5kZWZhdWx0KShsaXN0RmllbGQsIGFyZ3MuaGlkZGVuKTtcbiAgICAgICAgdmFyIHJlbW92ZSA9ICgwLCBfdXRpbGl0aWVzLnJlbW92ZUl0ZW1zKShIaWRkZW4sIF91dGlsaXRpZXMub25SZW1vdmVUZXh0KTtcbiAgICAgICAgdmFyIGRyYWcgPSAoMCwgX3V0aWxpdGllcy5kcmFnSXRlbXMpKEhpZGRlbiwgX3V0aWxpdGllcy5vbkRyYWdUZXh0KTtcbiAgICAgICAgdmFyIExpc3QgPSAoMCwgX2xpc3QyLmRlZmF1bHQpKGxpc3RGaWVsZCwgT2JqZWN0LmFzc2lnbihhcmdzLCB7IG9uRHJhZzogZHJhZywgb25SZW1vdmU6IHJlbW92ZSB9KSk7XG5cbiAgICAgICAgbGlzdEZpZWxkLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGlmICgxMyA9PT0gZS5rZXlDb2RlKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIExpc3QuYWRkKHRleHRJbnB1dC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgSGlkZGVuLmFkZCh0ZXh0SW5wdXQudmFsdWUpO1xuICAgICAgICAgICAgICAgIHRleHRJbnB1dC52YWx1ZSA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBhZGRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgTGlzdC5hZGQodGV4dElucHV0LnZhbHVlKTtcbiAgICAgICAgICAgIEhpZGRlbi5hZGQodGV4dElucHV0LnZhbHVlKTtcbiAgICAgICAgICAgIHRleHRJbnB1dC52YWx1ZSA9ICcnO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG5cbnZhciBfbGlzdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cbnZhciBfbGlzdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9saXN0KTtcblxudmFyIF9zZXJpYWxpemVkSW5wdXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX3NlcmlhbGl6ZWRJbnB1dDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXJpYWxpemVkSW5wdXQpO1xuXG52YXIgX3V0aWxpdGllcyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKiovIH0pLFxuLyogOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHtcblxudmFyIGVtaXR0ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xudmFyIGNyb3NzdmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xudmFyIGNsYXNzZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcbnZhciBkb2MgPSBkb2N1bWVudDtcbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXG5mdW5jdGlvbiBkcmFndWxhIChpbml0aWFsQ29udGFpbmVycywgb3B0aW9ucykge1xuICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgaWYgKGxlbiA9PT0gMSAmJiBBcnJheS5pc0FycmF5KGluaXRpYWxDb250YWluZXJzKSA9PT0gZmFsc2UpIHtcbiAgICBvcHRpb25zID0gaW5pdGlhbENvbnRhaW5lcnM7XG4gICAgaW5pdGlhbENvbnRhaW5lcnMgPSBbXTtcbiAgfVxuICB2YXIgX21pcnJvcjsgLy8gbWlycm9yIGltYWdlXG4gIHZhciBfc291cmNlOyAvLyBzb3VyY2UgY29udGFpbmVyXG4gIHZhciBfaXRlbTsgLy8gaXRlbSBiZWluZyBkcmFnZ2VkXG4gIHZhciBfb2Zmc2V0WDsgLy8gcmVmZXJlbmNlIHhcbiAgdmFyIF9vZmZzZXRZOyAvLyByZWZlcmVuY2UgeVxuICB2YXIgX21vdmVYOyAvLyByZWZlcmVuY2UgbW92ZSB4XG4gIHZhciBfbW92ZVk7IC8vIHJlZmVyZW5jZSBtb3ZlIHlcbiAgdmFyIF9pbml0aWFsU2libGluZzsgLy8gcmVmZXJlbmNlIHNpYmxpbmcgd2hlbiBncmFiYmVkXG4gIHZhciBfY3VycmVudFNpYmxpbmc7IC8vIHJlZmVyZW5jZSBzaWJsaW5nIG5vd1xuICB2YXIgX2NvcHk7IC8vIGl0ZW0gdXNlZCBmb3IgY29weWluZ1xuICB2YXIgX3JlbmRlclRpbWVyOyAvLyB0aW1lciBmb3Igc2V0VGltZW91dCByZW5kZXJNaXJyb3JJbWFnZVxuICB2YXIgX2xhc3REcm9wVGFyZ2V0ID0gbnVsbDsgLy8gbGFzdCBjb250YWluZXIgaXRlbSB3YXMgb3ZlclxuICB2YXIgX2dyYWJiZWQ7IC8vIGhvbGRzIG1vdXNlZG93biBjb250ZXh0IHVudGlsIGZpcnN0IG1vdXNlbW92ZVxuXG4gIHZhciBvID0gb3B0aW9ucyB8fCB7fTtcbiAgaWYgKG8ubW92ZXMgPT09IHZvaWQgMCkgeyBvLm1vdmVzID0gYWx3YXlzOyB9XG4gIGlmIChvLmFjY2VwdHMgPT09IHZvaWQgMCkgeyBvLmFjY2VwdHMgPSBhbHdheXM7IH1cbiAgaWYgKG8uaW52YWxpZCA9PT0gdm9pZCAwKSB7IG8uaW52YWxpZCA9IGludmFsaWRUYXJnZXQ7IH1cbiAgaWYgKG8uY29udGFpbmVycyA9PT0gdm9pZCAwKSB7IG8uY29udGFpbmVycyA9IGluaXRpYWxDb250YWluZXJzIHx8IFtdOyB9XG4gIGlmIChvLmlzQ29udGFpbmVyID09PSB2b2lkIDApIHsgby5pc0NvbnRhaW5lciA9IG5ldmVyOyB9XG4gIGlmIChvLmNvcHkgPT09IHZvaWQgMCkgeyBvLmNvcHkgPSBmYWxzZTsgfVxuICBpZiAoby5jb3B5U29ydFNvdXJjZSA9PT0gdm9pZCAwKSB7IG8uY29weVNvcnRTb3VyY2UgPSBmYWxzZTsgfVxuICBpZiAoby5yZXZlcnRPblNwaWxsID09PSB2b2lkIDApIHsgby5yZXZlcnRPblNwaWxsID0gZmFsc2U7IH1cbiAgaWYgKG8ucmVtb3ZlT25TcGlsbCA9PT0gdm9pZCAwKSB7IG8ucmVtb3ZlT25TcGlsbCA9IGZhbHNlOyB9XG4gIGlmIChvLmRpcmVjdGlvbiA9PT0gdm9pZCAwKSB7IG8uZGlyZWN0aW9uID0gJ3ZlcnRpY2FsJzsgfVxuICBpZiAoby5pZ25vcmVJbnB1dFRleHRTZWxlY3Rpb24gPT09IHZvaWQgMCkgeyBvLmlnbm9yZUlucHV0VGV4dFNlbGVjdGlvbiA9IHRydWU7IH1cbiAgaWYgKG8ubWlycm9yQ29udGFpbmVyID09PSB2b2lkIDApIHsgby5taXJyb3JDb250YWluZXIgPSBkb2MuYm9keTsgfVxuXG4gIHZhciBkcmFrZSA9IGVtaXR0ZXIoe1xuICAgIGNvbnRhaW5lcnM6IG8uY29udGFpbmVycyxcbiAgICBzdGFydDogbWFudWFsU3RhcnQsXG4gICAgZW5kOiBlbmQsXG4gICAgY2FuY2VsOiBjYW5jZWwsXG4gICAgcmVtb3ZlOiByZW1vdmUsXG4gICAgZGVzdHJveTogZGVzdHJveSxcbiAgICBjYW5Nb3ZlOiBjYW5Nb3ZlLFxuICAgIGRyYWdnaW5nOiBmYWxzZVxuICB9KTtcblxuICBpZiAoby5yZW1vdmVPblNwaWxsID09PSB0cnVlKSB7XG4gICAgZHJha2Uub24oJ292ZXInLCBzcGlsbE92ZXIpLm9uKCdvdXQnLCBzcGlsbE91dCk7XG4gIH1cblxuICBldmVudHMoKTtcblxuICByZXR1cm4gZHJha2U7XG5cbiAgZnVuY3Rpb24gaXNDb250YWluZXIgKGVsKSB7XG4gICAgcmV0dXJuIGRyYWtlLmNvbnRhaW5lcnMuaW5kZXhPZihlbCkgIT09IC0xIHx8IG8uaXNDb250YWluZXIoZWwpO1xuICB9XG5cbiAgZnVuY3Rpb24gZXZlbnRzIChyZW1vdmUpIHtcbiAgICB2YXIgb3AgPSByZW1vdmUgPyAncmVtb3ZlJyA6ICdhZGQnO1xuICAgIHRvdWNoeShkb2N1bWVudEVsZW1lbnQsIG9wLCAnbW91c2Vkb3duJywgZ3JhYik7XG4gICAgdG91Y2h5KGRvY3VtZW50RWxlbWVudCwgb3AsICdtb3VzZXVwJywgcmVsZWFzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBldmVudHVhbE1vdmVtZW50cyAocmVtb3ZlKSB7XG4gICAgdmFyIG9wID0gcmVtb3ZlID8gJ3JlbW92ZScgOiAnYWRkJztcbiAgICB0b3VjaHkoZG9jdW1lbnRFbGVtZW50LCBvcCwgJ21vdXNlbW92ZScsIHN0YXJ0QmVjYXVzZU1vdXNlTW92ZWQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbW92ZW1lbnRzIChyZW1vdmUpIHtcbiAgICB2YXIgb3AgPSByZW1vdmUgPyAncmVtb3ZlJyA6ICdhZGQnO1xuICAgIGNyb3NzdmVudFtvcF0oZG9jdW1lbnRFbGVtZW50LCAnc2VsZWN0c3RhcnQnLCBwcmV2ZW50R3JhYmJlZCk7IC8vIElFOFxuICAgIGNyb3NzdmVudFtvcF0oZG9jdW1lbnRFbGVtZW50LCAnY2xpY2snLCBwcmV2ZW50R3JhYmJlZCk7XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgICBldmVudHModHJ1ZSk7XG4gICAgcmVsZWFzZSh7fSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcmV2ZW50R3JhYmJlZCAoZSkge1xuICAgIGlmIChfZ3JhYmJlZCkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdyYWIgKGUpIHtcbiAgICBfbW92ZVggPSBlLmNsaWVudFg7XG4gICAgX21vdmVZID0gZS5jbGllbnRZO1xuXG4gICAgdmFyIGlnbm9yZSA9IHdoaWNoTW91c2VCdXR0b24oZSkgIT09IDEgfHwgZS5tZXRhS2V5IHx8IGUuY3RybEtleTtcbiAgICBpZiAoaWdub3JlKSB7XG4gICAgICByZXR1cm47IC8vIHdlIG9ubHkgY2FyZSBhYm91dCBob25lc3QtdG8tZ29kIGxlZnQgY2xpY2tzIGFuZCB0b3VjaCBldmVudHNcbiAgICB9XG4gICAgdmFyIGl0ZW0gPSBlLnRhcmdldDtcbiAgICB2YXIgY29udGV4dCA9IGNhblN0YXJ0KGl0ZW0pO1xuICAgIGlmICghY29udGV4dCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBfZ3JhYmJlZCA9IGNvbnRleHQ7XG4gICAgZXZlbnR1YWxNb3ZlbWVudHMoKTtcbiAgICBpZiAoZS50eXBlID09PSAnbW91c2Vkb3duJykge1xuICAgICAgaWYgKGlzSW5wdXQoaXRlbSkpIHsgLy8gc2VlIGFsc286IGh0dHBzOi8vZ2l0aHViLmNvbS9iZXZhY3F1YS9kcmFndWxhL2lzc3Vlcy8yMDhcbiAgICAgICAgaXRlbS5mb2N1cygpOyAvLyBmaXhlcyBodHRwczovL2dpdGh1Yi5jb20vYmV2YWNxdWEvZHJhZ3VsYS9pc3N1ZXMvMTc2XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIGZpeGVzIGh0dHBzOi8vZ2l0aHViLmNvbS9iZXZhY3F1YS9kcmFndWxhL2lzc3Vlcy8xNTVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydEJlY2F1c2VNb3VzZU1vdmVkIChlKSB7XG4gICAgaWYgKCFfZ3JhYmJlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAod2hpY2hNb3VzZUJ1dHRvbihlKSA9PT0gMCkge1xuICAgICAgcmVsZWFzZSh7fSk7XG4gICAgICByZXR1cm47IC8vIHdoZW4gdGV4dCBpcyBzZWxlY3RlZCBvbiBhbiBpbnB1dCBhbmQgdGhlbiBkcmFnZ2VkLCBtb3VzZXVwIGRvZXNuJ3QgZmlyZS4gdGhpcyBpcyBvdXIgb25seSBob3BlXG4gICAgfVxuICAgIC8vIHRydXRoeSBjaGVjayBmaXhlcyAjMjM5LCBlcXVhbGl0eSBmaXhlcyAjMjA3XG4gICAgaWYgKGUuY2xpZW50WCAhPT0gdm9pZCAwICYmIGUuY2xpZW50WCA9PT0gX21vdmVYICYmIGUuY2xpZW50WSAhPT0gdm9pZCAwICYmIGUuY2xpZW50WSA9PT0gX21vdmVZKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChvLmlnbm9yZUlucHV0VGV4dFNlbGVjdGlvbikge1xuICAgICAgdmFyIGNsaWVudFggPSBnZXRDb29yZCgnY2xpZW50WCcsIGUpO1xuICAgICAgdmFyIGNsaWVudFkgPSBnZXRDb29yZCgnY2xpZW50WScsIGUpO1xuICAgICAgdmFyIGVsZW1lbnRCZWhpbmRDdXJzb3IgPSBkb2MuZWxlbWVudEZyb21Qb2ludChjbGllbnRYLCBjbGllbnRZKTtcbiAgICAgIGlmIChpc0lucHV0KGVsZW1lbnRCZWhpbmRDdXJzb3IpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZ3JhYmJlZCA9IF9ncmFiYmVkOyAvLyBjYWxsIHRvIGVuZCgpIHVuc2V0cyBfZ3JhYmJlZFxuICAgIGV2ZW50dWFsTW92ZW1lbnRzKHRydWUpO1xuICAgIG1vdmVtZW50cygpO1xuICAgIGVuZCgpO1xuICAgIHN0YXJ0KGdyYWJiZWQpO1xuXG4gICAgdmFyIG9mZnNldCA9IGdldE9mZnNldChfaXRlbSk7XG4gICAgX29mZnNldFggPSBnZXRDb29yZCgncGFnZVgnLCBlKSAtIG9mZnNldC5sZWZ0O1xuICAgIF9vZmZzZXRZID0gZ2V0Q29vcmQoJ3BhZ2VZJywgZSkgLSBvZmZzZXQudG9wO1xuXG4gICAgY2xhc3Nlcy5hZGQoX2NvcHkgfHwgX2l0ZW0sICdndS10cmFuc2l0Jyk7XG4gICAgcmVuZGVyTWlycm9ySW1hZ2UoKTtcbiAgICBkcmFnKGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuU3RhcnQgKGl0ZW0pIHtcbiAgICBpZiAoZHJha2UuZHJhZ2dpbmcgJiYgX21pcnJvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNDb250YWluZXIoaXRlbSkpIHtcbiAgICAgIHJldHVybjsgLy8gZG9uJ3QgZHJhZyBjb250YWluZXIgaXRzZWxmXG4gICAgfVxuICAgIHZhciBoYW5kbGUgPSBpdGVtO1xuICAgIHdoaWxlIChnZXRQYXJlbnQoaXRlbSkgJiYgaXNDb250YWluZXIoZ2V0UGFyZW50KGl0ZW0pKSA9PT0gZmFsc2UpIHtcbiAgICAgIGlmIChvLmludmFsaWQoaXRlbSwgaGFuZGxlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpdGVtID0gZ2V0UGFyZW50KGl0ZW0pOyAvLyBkcmFnIHRhcmdldCBzaG91bGQgYmUgYSB0b3AgZWxlbWVudFxuICAgICAgaWYgKCFpdGVtKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIHNvdXJjZSA9IGdldFBhcmVudChpdGVtKTtcbiAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoby5pbnZhbGlkKGl0ZW0sIGhhbmRsZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbW92YWJsZSA9IG8ubW92ZXMoaXRlbSwgc291cmNlLCBoYW5kbGUsIG5leHRFbChpdGVtKSk7XG4gICAgaWYgKCFtb3ZhYmxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGl0ZW06IGl0ZW0sXG4gICAgICBzb3VyY2U6IHNvdXJjZVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjYW5Nb3ZlIChpdGVtKSB7XG4gICAgcmV0dXJuICEhY2FuU3RhcnQoaXRlbSk7XG4gIH1cblxuICBmdW5jdGlvbiBtYW51YWxTdGFydCAoaXRlbSkge1xuICAgIHZhciBjb250ZXh0ID0gY2FuU3RhcnQoaXRlbSk7XG4gICAgaWYgKGNvbnRleHQpIHtcbiAgICAgIHN0YXJ0KGNvbnRleHQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0IChjb250ZXh0KSB7XG4gICAgaWYgKGlzQ29weShjb250ZXh0Lml0ZW0sIGNvbnRleHQuc291cmNlKSkge1xuICAgICAgX2NvcHkgPSBjb250ZXh0Lml0ZW0uY2xvbmVOb2RlKHRydWUpO1xuICAgICAgZHJha2UuZW1pdCgnY2xvbmVkJywgX2NvcHksIGNvbnRleHQuaXRlbSwgJ2NvcHknKTtcbiAgICB9XG5cbiAgICBfc291cmNlID0gY29udGV4dC5zb3VyY2U7XG4gICAgX2l0ZW0gPSBjb250ZXh0Lml0ZW07XG4gICAgX2luaXRpYWxTaWJsaW5nID0gX2N1cnJlbnRTaWJsaW5nID0gbmV4dEVsKGNvbnRleHQuaXRlbSk7XG5cbiAgICBkcmFrZS5kcmFnZ2luZyA9IHRydWU7XG4gICAgZHJha2UuZW1pdCgnZHJhZycsIF9pdGVtLCBfc291cmNlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludmFsaWRUYXJnZXQgKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuZCAoKSB7XG4gICAgaWYgKCFkcmFrZS5kcmFnZ2luZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgaXRlbSA9IF9jb3B5IHx8IF9pdGVtO1xuICAgIGRyb3AoaXRlbSwgZ2V0UGFyZW50KGl0ZW0pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuZ3JhYiAoKSB7XG4gICAgX2dyYWJiZWQgPSBmYWxzZTtcbiAgICBldmVudHVhbE1vdmVtZW50cyh0cnVlKTtcbiAgICBtb3ZlbWVudHModHJ1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiByZWxlYXNlIChlKSB7XG4gICAgdW5ncmFiKCk7XG5cbiAgICBpZiAoIWRyYWtlLmRyYWdnaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBpdGVtID0gX2NvcHkgfHwgX2l0ZW07XG4gICAgdmFyIGNsaWVudFggPSBnZXRDb29yZCgnY2xpZW50WCcsIGUpO1xuICAgIHZhciBjbGllbnRZID0gZ2V0Q29vcmQoJ2NsaWVudFknLCBlKTtcbiAgICB2YXIgZWxlbWVudEJlaGluZEN1cnNvciA9IGdldEVsZW1lbnRCZWhpbmRQb2ludChfbWlycm9yLCBjbGllbnRYLCBjbGllbnRZKTtcbiAgICB2YXIgZHJvcFRhcmdldCA9IGZpbmREcm9wVGFyZ2V0KGVsZW1lbnRCZWhpbmRDdXJzb3IsIGNsaWVudFgsIGNsaWVudFkpO1xuICAgIGlmIChkcm9wVGFyZ2V0ICYmICgoX2NvcHkgJiYgby5jb3B5U29ydFNvdXJjZSkgfHwgKCFfY29weSB8fCBkcm9wVGFyZ2V0ICE9PSBfc291cmNlKSkpIHtcbiAgICAgIGRyb3AoaXRlbSwgZHJvcFRhcmdldCk7XG4gICAgfSBlbHNlIGlmIChvLnJlbW92ZU9uU3BpbGwpIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYW5jZWwoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkcm9wIChpdGVtLCB0YXJnZXQpIHtcbiAgICB2YXIgcGFyZW50ID0gZ2V0UGFyZW50KGl0ZW0pO1xuICAgIGlmIChfY29weSAmJiBvLmNvcHlTb3J0U291cmNlICYmIHRhcmdldCA9PT0gX3NvdXJjZSkge1xuICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKF9pdGVtKTtcbiAgICB9XG4gICAgaWYgKGlzSW5pdGlhbFBsYWNlbWVudCh0YXJnZXQpKSB7XG4gICAgICBkcmFrZS5lbWl0KCdjYW5jZWwnLCBpdGVtLCBfc291cmNlLCBfc291cmNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZHJha2UuZW1pdCgnZHJvcCcsIGl0ZW0sIHRhcmdldCwgX3NvdXJjZSwgX2N1cnJlbnRTaWJsaW5nKTtcbiAgICB9XG4gICAgY2xlYW51cCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlICgpIHtcbiAgICBpZiAoIWRyYWtlLmRyYWdnaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBpdGVtID0gX2NvcHkgfHwgX2l0ZW07XG4gICAgdmFyIHBhcmVudCA9IGdldFBhcmVudChpdGVtKTtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoaXRlbSk7XG4gICAgfVxuICAgIGRyYWtlLmVtaXQoX2NvcHkgPyAnY2FuY2VsJyA6ICdyZW1vdmUnLCBpdGVtLCBwYXJlbnQsIF9zb3VyY2UpO1xuICAgIGNsZWFudXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbCAocmV2ZXJ0KSB7XG4gICAgaWYgKCFkcmFrZS5kcmFnZ2luZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgcmV2ZXJ0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwID8gcmV2ZXJ0IDogby5yZXZlcnRPblNwaWxsO1xuICAgIHZhciBpdGVtID0gX2NvcHkgfHwgX2l0ZW07XG4gICAgdmFyIHBhcmVudCA9IGdldFBhcmVudChpdGVtKTtcbiAgICB2YXIgaW5pdGlhbCA9IGlzSW5pdGlhbFBsYWNlbWVudChwYXJlbnQpO1xuICAgIGlmIChpbml0aWFsID09PSBmYWxzZSAmJiByZXZlcnRzKSB7XG4gICAgICBpZiAoX2NvcHkpIHtcbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChfY29weSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9zb3VyY2UuaW5zZXJ0QmVmb3JlKGl0ZW0sIF9pbml0aWFsU2libGluZyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpbml0aWFsIHx8IHJldmVydHMpIHtcbiAgICAgIGRyYWtlLmVtaXQoJ2NhbmNlbCcsIGl0ZW0sIF9zb3VyY2UsIF9zb3VyY2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkcmFrZS5lbWl0KCdkcm9wJywgaXRlbSwgcGFyZW50LCBfc291cmNlLCBfY3VycmVudFNpYmxpbmcpO1xuICAgIH1cbiAgICBjbGVhbnVwKCk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhbnVwICgpIHtcbiAgICB2YXIgaXRlbSA9IF9jb3B5IHx8IF9pdGVtO1xuICAgIHVuZ3JhYigpO1xuICAgIHJlbW92ZU1pcnJvckltYWdlKCk7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIGNsYXNzZXMucm0oaXRlbSwgJ2d1LXRyYW5zaXQnKTtcbiAgICB9XG4gICAgaWYgKF9yZW5kZXJUaW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KF9yZW5kZXJUaW1lcik7XG4gICAgfVxuICAgIGRyYWtlLmRyYWdnaW5nID0gZmFsc2U7XG4gICAgaWYgKF9sYXN0RHJvcFRhcmdldCkge1xuICAgICAgZHJha2UuZW1pdCgnb3V0JywgaXRlbSwgX2xhc3REcm9wVGFyZ2V0LCBfc291cmNlKTtcbiAgICB9XG4gICAgZHJha2UuZW1pdCgnZHJhZ2VuZCcsIGl0ZW0pO1xuICAgIF9zb3VyY2UgPSBfaXRlbSA9IF9jb3B5ID0gX2luaXRpYWxTaWJsaW5nID0gX2N1cnJlbnRTaWJsaW5nID0gX3JlbmRlclRpbWVyID0gX2xhc3REcm9wVGFyZ2V0ID0gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzSW5pdGlhbFBsYWNlbWVudCAodGFyZ2V0LCBzKSB7XG4gICAgdmFyIHNpYmxpbmc7XG4gICAgaWYgKHMgIT09IHZvaWQgMCkge1xuICAgICAgc2libGluZyA9IHM7XG4gICAgfSBlbHNlIGlmIChfbWlycm9yKSB7XG4gICAgICBzaWJsaW5nID0gX2N1cnJlbnRTaWJsaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaWJsaW5nID0gbmV4dEVsKF9jb3B5IHx8IF9pdGVtKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldCA9PT0gX3NvdXJjZSAmJiBzaWJsaW5nID09PSBfaW5pdGlhbFNpYmxpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kRHJvcFRhcmdldCAoZWxlbWVudEJlaGluZEN1cnNvciwgY2xpZW50WCwgY2xpZW50WSkge1xuICAgIHZhciB0YXJnZXQgPSBlbGVtZW50QmVoaW5kQ3Vyc29yO1xuICAgIHdoaWxlICh0YXJnZXQgJiYgIWFjY2VwdGVkKCkpIHtcbiAgICAgIHRhcmdldCA9IGdldFBhcmVudCh0YXJnZXQpO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuXG4gICAgZnVuY3Rpb24gYWNjZXB0ZWQgKCkge1xuICAgICAgdmFyIGRyb3BwYWJsZSA9IGlzQ29udGFpbmVyKHRhcmdldCk7XG4gICAgICBpZiAoZHJvcHBhYmxlID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciBpbW1lZGlhdGUgPSBnZXRJbW1lZGlhdGVDaGlsZCh0YXJnZXQsIGVsZW1lbnRCZWhpbmRDdXJzb3IpO1xuICAgICAgdmFyIHJlZmVyZW5jZSA9IGdldFJlZmVyZW5jZSh0YXJnZXQsIGltbWVkaWF0ZSwgY2xpZW50WCwgY2xpZW50WSk7XG4gICAgICB2YXIgaW5pdGlhbCA9IGlzSW5pdGlhbFBsYWNlbWVudCh0YXJnZXQsIHJlZmVyZW5jZSk7XG4gICAgICBpZiAoaW5pdGlhbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gc2hvdWxkIGFsd2F5cyBiZSBhYmxlIHRvIGRyb3AgaXQgcmlnaHQgYmFjayB3aGVyZSBpdCB3YXNcbiAgICAgIH1cbiAgICAgIHJldHVybiBvLmFjY2VwdHMoX2l0ZW0sIHRhcmdldCwgX3NvdXJjZSwgcmVmZXJlbmNlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkcmFnIChlKSB7XG4gICAgaWYgKCFfbWlycm9yKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIHZhciBjbGllbnRYID0gZ2V0Q29vcmQoJ2NsaWVudFgnLCBlKTtcbiAgICB2YXIgY2xpZW50WSA9IGdldENvb3JkKCdjbGllbnRZJywgZSk7XG4gICAgdmFyIHggPSBjbGllbnRYIC0gX29mZnNldFg7XG4gICAgdmFyIHkgPSBjbGllbnRZIC0gX29mZnNldFk7XG5cbiAgICBfbWlycm9yLnN0eWxlLmxlZnQgPSB4ICsgJ3B4JztcbiAgICBfbWlycm9yLnN0eWxlLnRvcCA9IHkgKyAncHgnO1xuXG4gICAgdmFyIGl0ZW0gPSBfY29weSB8fCBfaXRlbTtcbiAgICB2YXIgZWxlbWVudEJlaGluZEN1cnNvciA9IGdldEVsZW1lbnRCZWhpbmRQb2ludChfbWlycm9yLCBjbGllbnRYLCBjbGllbnRZKTtcbiAgICB2YXIgZHJvcFRhcmdldCA9IGZpbmREcm9wVGFyZ2V0KGVsZW1lbnRCZWhpbmRDdXJzb3IsIGNsaWVudFgsIGNsaWVudFkpO1xuICAgIHZhciBjaGFuZ2VkID0gZHJvcFRhcmdldCAhPT0gbnVsbCAmJiBkcm9wVGFyZ2V0ICE9PSBfbGFzdERyb3BUYXJnZXQ7XG4gICAgaWYgKGNoYW5nZWQgfHwgZHJvcFRhcmdldCA9PT0gbnVsbCkge1xuICAgICAgb3V0KCk7XG4gICAgICBfbGFzdERyb3BUYXJnZXQgPSBkcm9wVGFyZ2V0O1xuICAgICAgb3ZlcigpO1xuICAgIH1cbiAgICB2YXIgcGFyZW50ID0gZ2V0UGFyZW50KGl0ZW0pO1xuICAgIGlmIChkcm9wVGFyZ2V0ID09PSBfc291cmNlICYmIF9jb3B5ICYmICFvLmNvcHlTb3J0U291cmNlKSB7XG4gICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChpdGVtKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHJlZmVyZW5jZTtcbiAgICB2YXIgaW1tZWRpYXRlID0gZ2V0SW1tZWRpYXRlQ2hpbGQoZHJvcFRhcmdldCwgZWxlbWVudEJlaGluZEN1cnNvcik7XG4gICAgaWYgKGltbWVkaWF0ZSAhPT0gbnVsbCkge1xuICAgICAgcmVmZXJlbmNlID0gZ2V0UmVmZXJlbmNlKGRyb3BUYXJnZXQsIGltbWVkaWF0ZSwgY2xpZW50WCwgY2xpZW50WSk7XG4gICAgfSBlbHNlIGlmIChvLnJldmVydE9uU3BpbGwgPT09IHRydWUgJiYgIV9jb3B5KSB7XG4gICAgICByZWZlcmVuY2UgPSBfaW5pdGlhbFNpYmxpbmc7XG4gICAgICBkcm9wVGFyZ2V0ID0gX3NvdXJjZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKF9jb3B5ICYmIHBhcmVudCkge1xuICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoaXRlbSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChcbiAgICAgIChyZWZlcmVuY2UgPT09IG51bGwgJiYgY2hhbmdlZCkgfHxcbiAgICAgIHJlZmVyZW5jZSAhPT0gaXRlbSAmJlxuICAgICAgcmVmZXJlbmNlICE9PSBuZXh0RWwoaXRlbSlcbiAgICApIHtcbiAgICAgIF9jdXJyZW50U2libGluZyA9IHJlZmVyZW5jZTtcbiAgICAgIGRyb3BUYXJnZXQuaW5zZXJ0QmVmb3JlKGl0ZW0sIHJlZmVyZW5jZSk7XG4gICAgICBkcmFrZS5lbWl0KCdzaGFkb3cnLCBpdGVtLCBkcm9wVGFyZ2V0LCBfc291cmNlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbW92ZWQgKHR5cGUpIHsgZHJha2UuZW1pdCh0eXBlLCBpdGVtLCBfbGFzdERyb3BUYXJnZXQsIF9zb3VyY2UpOyB9XG4gICAgZnVuY3Rpb24gb3ZlciAoKSB7IGlmIChjaGFuZ2VkKSB7IG1vdmVkKCdvdmVyJyk7IH0gfVxuICAgIGZ1bmN0aW9uIG91dCAoKSB7IGlmIChfbGFzdERyb3BUYXJnZXQpIHsgbW92ZWQoJ291dCcpOyB9IH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNwaWxsT3ZlciAoZWwpIHtcbiAgICBjbGFzc2VzLnJtKGVsLCAnZ3UtaGlkZScpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3BpbGxPdXQgKGVsKSB7XG4gICAgaWYgKGRyYWtlLmRyYWdnaW5nKSB7IGNsYXNzZXMuYWRkKGVsLCAnZ3UtaGlkZScpOyB9XG4gIH1cblxuICBmdW5jdGlvbiByZW5kZXJNaXJyb3JJbWFnZSAoKSB7XG4gICAgaWYgKF9taXJyb3IpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHJlY3QgPSBfaXRlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBfbWlycm9yID0gX2l0ZW0uY2xvbmVOb2RlKHRydWUpO1xuICAgIF9taXJyb3Iuc3R5bGUud2lkdGggPSBnZXRSZWN0V2lkdGgocmVjdCkgKyAncHgnO1xuICAgIF9taXJyb3Iuc3R5bGUuaGVpZ2h0ID0gZ2V0UmVjdEhlaWdodChyZWN0KSArICdweCc7XG4gICAgY2xhc3Nlcy5ybShfbWlycm9yLCAnZ3UtdHJhbnNpdCcpO1xuICAgIGNsYXNzZXMuYWRkKF9taXJyb3IsICdndS1taXJyb3InKTtcbiAgICBvLm1pcnJvckNvbnRhaW5lci5hcHBlbmRDaGlsZChfbWlycm9yKTtcbiAgICB0b3VjaHkoZG9jdW1lbnRFbGVtZW50LCAnYWRkJywgJ21vdXNlbW92ZScsIGRyYWcpO1xuICAgIGNsYXNzZXMuYWRkKG8ubWlycm9yQ29udGFpbmVyLCAnZ3UtdW5zZWxlY3RhYmxlJyk7XG4gICAgZHJha2UuZW1pdCgnY2xvbmVkJywgX21pcnJvciwgX2l0ZW0sICdtaXJyb3InKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU1pcnJvckltYWdlICgpIHtcbiAgICBpZiAoX21pcnJvcikge1xuICAgICAgY2xhc3Nlcy5ybShvLm1pcnJvckNvbnRhaW5lciwgJ2d1LXVuc2VsZWN0YWJsZScpO1xuICAgICAgdG91Y2h5KGRvY3VtZW50RWxlbWVudCwgJ3JlbW92ZScsICdtb3VzZW1vdmUnLCBkcmFnKTtcbiAgICAgIGdldFBhcmVudChfbWlycm9yKS5yZW1vdmVDaGlsZChfbWlycm9yKTtcbiAgICAgIF9taXJyb3IgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEltbWVkaWF0ZUNoaWxkIChkcm9wVGFyZ2V0LCB0YXJnZXQpIHtcbiAgICB2YXIgaW1tZWRpYXRlID0gdGFyZ2V0O1xuICAgIHdoaWxlIChpbW1lZGlhdGUgIT09IGRyb3BUYXJnZXQgJiYgZ2V0UGFyZW50KGltbWVkaWF0ZSkgIT09IGRyb3BUYXJnZXQpIHtcbiAgICAgIGltbWVkaWF0ZSA9IGdldFBhcmVudChpbW1lZGlhdGUpO1xuICAgIH1cbiAgICBpZiAoaW1tZWRpYXRlID09PSBkb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gaW1tZWRpYXRlO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UmVmZXJlbmNlIChkcm9wVGFyZ2V0LCB0YXJnZXQsIHgsIHkpIHtcbiAgICB2YXIgaG9yaXpvbnRhbCA9IG8uZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCc7XG4gICAgdmFyIHJlZmVyZW5jZSA9IHRhcmdldCAhPT0gZHJvcFRhcmdldCA/IGluc2lkZSgpIDogb3V0c2lkZSgpO1xuICAgIHJldHVybiByZWZlcmVuY2U7XG5cbiAgICBmdW5jdGlvbiBvdXRzaWRlICgpIHsgLy8gc2xvd2VyLCBidXQgYWJsZSB0byBmaWd1cmUgb3V0IGFueSBwb3NpdGlvblxuICAgICAgdmFyIGxlbiA9IGRyb3BUYXJnZXQuY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgZWw7XG4gICAgICB2YXIgcmVjdDtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBlbCA9IGRyb3BUYXJnZXQuY2hpbGRyZW5baV07XG4gICAgICAgIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgaWYgKGhvcml6b250YWwgJiYgKHJlY3QubGVmdCArIHJlY3Qud2lkdGggLyAyKSA+IHgpIHsgcmV0dXJuIGVsOyB9XG4gICAgICAgIGlmICghaG9yaXpvbnRhbCAmJiAocmVjdC50b3AgKyByZWN0LmhlaWdodCAvIDIpID4geSkgeyByZXR1cm4gZWw7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc2lkZSAoKSB7IC8vIGZhc3RlciwgYnV0IG9ubHkgYXZhaWxhYmxlIGlmIGRyb3BwZWQgaW5zaWRlIGEgY2hpbGQgZWxlbWVudFxuICAgICAgdmFyIHJlY3QgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBpZiAoaG9yaXpvbnRhbCkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZSh4ID4gcmVjdC5sZWZ0ICsgZ2V0UmVjdFdpZHRoKHJlY3QpIC8gMik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzb2x2ZSh5ID4gcmVjdC50b3AgKyBnZXRSZWN0SGVpZ2h0KHJlY3QpIC8gMik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZSAoYWZ0ZXIpIHtcbiAgICAgIHJldHVybiBhZnRlciA/IG5leHRFbCh0YXJnZXQpIDogdGFyZ2V0O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQ29weSAoaXRlbSwgY29udGFpbmVyKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvLmNvcHkgPT09ICdib29sZWFuJyA/IG8uY29weSA6IG8uY29weShpdGVtLCBjb250YWluZXIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvdWNoeSAoZWwsIG9wLCB0eXBlLCBmbikge1xuICB2YXIgdG91Y2ggPSB7XG4gICAgbW91c2V1cDogJ3RvdWNoZW5kJyxcbiAgICBtb3VzZWRvd246ICd0b3VjaHN0YXJ0JyxcbiAgICBtb3VzZW1vdmU6ICd0b3VjaG1vdmUnXG4gIH07XG4gIHZhciBwb2ludGVycyA9IHtcbiAgICBtb3VzZXVwOiAncG9pbnRlcnVwJyxcbiAgICBtb3VzZWRvd246ICdwb2ludGVyZG93bicsXG4gICAgbW91c2Vtb3ZlOiAncG9pbnRlcm1vdmUnXG4gIH07XG4gIHZhciBtaWNyb3NvZnQgPSB7XG4gICAgbW91c2V1cDogJ01TUG9pbnRlclVwJyxcbiAgICBtb3VzZWRvd246ICdNU1BvaW50ZXJEb3duJyxcbiAgICBtb3VzZW1vdmU6ICdNU1BvaW50ZXJNb3ZlJ1xuICB9O1xuICBpZiAoZ2xvYmFsLm5hdmlnYXRvci5wb2ludGVyRW5hYmxlZCkge1xuICAgIGNyb3NzdmVudFtvcF0oZWwsIHBvaW50ZXJzW3R5cGVdLCBmbik7XG4gIH0gZWxzZSBpZiAoZ2xvYmFsLm5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkKSB7XG4gICAgY3Jvc3N2ZW50W29wXShlbCwgbWljcm9zb2Z0W3R5cGVdLCBmbik7XG4gIH0gZWxzZSB7XG4gICAgY3Jvc3N2ZW50W29wXShlbCwgdG91Y2hbdHlwZV0sIGZuKTtcbiAgICBjcm9zc3ZlbnRbb3BdKGVsLCB0eXBlLCBmbik7XG4gIH1cbn1cblxuZnVuY3Rpb24gd2hpY2hNb3VzZUJ1dHRvbiAoZSkge1xuICBpZiAoZS50b3VjaGVzICE9PSB2b2lkIDApIHsgcmV0dXJuIGUudG91Y2hlcy5sZW5ndGg7IH1cbiAgaWYgKGUud2hpY2ggIT09IHZvaWQgMCAmJiBlLndoaWNoICE9PSAwKSB7IHJldHVybiBlLndoaWNoOyB9IC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vYmV2YWNxdWEvZHJhZ3VsYS9pc3N1ZXMvMjYxXG4gIGlmIChlLmJ1dHRvbnMgIT09IHZvaWQgMCkgeyByZXR1cm4gZS5idXR0b25zOyB9XG4gIHZhciBidXR0b24gPSBlLmJ1dHRvbjtcbiAgaWYgKGJ1dHRvbiAhPT0gdm9pZCAwKSB7IC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9ibG9iLzk5ZThmZjFiYWE3YWUzNDFlOTRiYjg5YzNlODQ1NzBjN2MzYWQ5ZWEvc3JjL2V2ZW50LmpzI0w1NzMtTDU3NVxuICAgIHJldHVybiBidXR0b24gJiAxID8gMSA6IGJ1dHRvbiAmIDIgPyAzIDogKGJ1dHRvbiAmIDQgPyAyIDogMCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0IChlbCkge1xuICB2YXIgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4ge1xuICAgIGxlZnQ6IHJlY3QubGVmdCArIGdldFNjcm9sbCgnc2Nyb2xsTGVmdCcsICdwYWdlWE9mZnNldCcpLFxuICAgIHRvcDogcmVjdC50b3AgKyBnZXRTY3JvbGwoJ3Njcm9sbFRvcCcsICdwYWdlWU9mZnNldCcpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbCAoc2Nyb2xsUHJvcCwgb2Zmc2V0UHJvcCkge1xuICBpZiAodHlwZW9mIGdsb2JhbFtvZmZzZXRQcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZ2xvYmFsW29mZnNldFByb3BdO1xuICB9XG4gIGlmIChkb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50RWxlbWVudFtzY3JvbGxQcm9wXTtcbiAgfVxuICByZXR1cm4gZG9jLmJvZHlbc2Nyb2xsUHJvcF07XG59XG5cbmZ1bmN0aW9uIGdldEVsZW1lbnRCZWhpbmRQb2ludCAocG9pbnQsIHgsIHkpIHtcbiAgdmFyIHAgPSBwb2ludCB8fCB7fTtcbiAgdmFyIHN0YXRlID0gcC5jbGFzc05hbWU7XG4gIHZhciBlbDtcbiAgcC5jbGFzc05hbWUgKz0gJyBndS1oaWRlJztcbiAgZWwgPSBkb2MuZWxlbWVudEZyb21Qb2ludCh4LCB5KTtcbiAgcC5jbGFzc05hbWUgPSBzdGF0ZTtcbiAgcmV0dXJuIGVsO1xufVxuXG5mdW5jdGlvbiBuZXZlciAoKSB7IHJldHVybiBmYWxzZTsgfVxuZnVuY3Rpb24gYWx3YXlzICgpIHsgcmV0dXJuIHRydWU7IH1cbmZ1bmN0aW9uIGdldFJlY3RXaWR0aCAocmVjdCkgeyByZXR1cm4gcmVjdC53aWR0aCB8fCAocmVjdC5yaWdodCAtIHJlY3QubGVmdCk7IH1cbmZ1bmN0aW9uIGdldFJlY3RIZWlnaHQgKHJlY3QpIHsgcmV0dXJuIHJlY3QuaGVpZ2h0IHx8IChyZWN0LmJvdHRvbSAtIHJlY3QudG9wKTsgfVxuZnVuY3Rpb24gZ2V0UGFyZW50IChlbCkgeyByZXR1cm4gZWwucGFyZW50Tm9kZSA9PT0gZG9jID8gbnVsbCA6IGVsLnBhcmVudE5vZGU7IH1cbmZ1bmN0aW9uIGlzSW5wdXQgKGVsKSB7IHJldHVybiBlbC50YWdOYW1lID09PSAnSU5QVVQnIHx8IGVsLnRhZ05hbWUgPT09ICdURVhUQVJFQScgfHwgZWwudGFnTmFtZSA9PT0gJ1NFTEVDVCcgfHwgaXNFZGl0YWJsZShlbCk7IH1cbmZ1bmN0aW9uIGlzRWRpdGFibGUgKGVsKSB7XG4gIGlmICghZWwpIHsgcmV0dXJuIGZhbHNlOyB9IC8vIG5vIHBhcmVudHMgd2VyZSBlZGl0YWJsZVxuICBpZiAoZWwuY29udGVudEVkaXRhYmxlID09PSAnZmFsc2UnKSB7IHJldHVybiBmYWxzZTsgfSAvLyBzdG9wIHRoZSBsb29rdXBcbiAgaWYgKGVsLmNvbnRlbnRFZGl0YWJsZSA9PT0gJ3RydWUnKSB7IHJldHVybiB0cnVlOyB9IC8vIGZvdW5kIGEgY29udGVudEVkaXRhYmxlIGVsZW1lbnQgaW4gdGhlIGNoYWluXG4gIHJldHVybiBpc0VkaXRhYmxlKGdldFBhcmVudChlbCkpOyAvLyBjb250ZW50RWRpdGFibGUgaXMgc2V0IHRvICdpbmhlcml0J1xufVxuXG5mdW5jdGlvbiBuZXh0RWwgKGVsKSB7XG4gIHJldHVybiBlbC5uZXh0RWxlbWVudFNpYmxpbmcgfHwgbWFudWFsbHkoKTtcbiAgZnVuY3Rpb24gbWFudWFsbHkgKCkge1xuICAgIHZhciBzaWJsaW5nID0gZWw7XG4gICAgZG8ge1xuICAgICAgc2libGluZyA9IHNpYmxpbmcubmV4dFNpYmxpbmc7XG4gICAgfSB3aGlsZSAoc2libGluZyAmJiBzaWJsaW5nLm5vZGVUeXBlICE9PSAxKTtcbiAgICByZXR1cm4gc2libGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRFdmVudEhvc3QgKGUpIHtcbiAgLy8gb24gdG91Y2hlbmQgZXZlbnQsIHdlIGhhdmUgdG8gdXNlIGBlLmNoYW5nZWRUb3VjaGVzYFxuICAvLyBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83MTkyNTYzL3RvdWNoZW5kLWV2ZW50LXByb3BlcnRpZXNcbiAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9iZXZhY3F1YS9kcmFndWxhL2lzc3Vlcy8zNFxuICBpZiAoZS50YXJnZXRUb3VjaGVzICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZS50YXJnZXRUb3VjaGVzWzBdO1xuICB9XG4gIGlmIChlLmNoYW5nZWRUb3VjaGVzICYmIGUuY2hhbmdlZFRvdWNoZXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGUuY2hhbmdlZFRvdWNoZXNbMF07XG4gIH1cbiAgcmV0dXJuIGU7XG59XG5cbmZ1bmN0aW9uIGdldENvb3JkIChjb29yZCwgZSkge1xuICB2YXIgaG9zdCA9IGdldEV2ZW50SG9zdChlKTtcbiAgdmFyIG1pc3NNYXAgPSB7XG4gICAgcGFnZVg6ICdjbGllbnRYJywgLy8gSUU4XG4gICAgcGFnZVk6ICdjbGllbnRZJyAvLyBJRThcbiAgfTtcbiAgaWYgKGNvb3JkIGluIG1pc3NNYXAgJiYgIShjb29yZCBpbiBob3N0KSAmJiBtaXNzTWFwW2Nvb3JkXSBpbiBob3N0KSB7XG4gICAgY29vcmQgPSBtaXNzTWFwW2Nvb3JkXTtcbiAgfVxuICByZXR1cm4gaG9zdFtjb29yZF07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZHJhZ3VsYTtcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMCkpKVxuXG4vKioqLyB9KSxcbi8qIDkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGF0b2EgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcbnZhciBkZWJvdW5jZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVtaXR0ZXIgKHRoaW5nLCBvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIGV2dCA9IHt9O1xuICBpZiAodGhpbmcgPT09IHVuZGVmaW5lZCkgeyB0aGluZyA9IHt9OyB9XG4gIHRoaW5nLm9uID0gZnVuY3Rpb24gKHR5cGUsIGZuKSB7XG4gICAgaWYgKCFldnRbdHlwZV0pIHtcbiAgICAgIGV2dFt0eXBlXSA9IFtmbl07XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2dFt0eXBlXS5wdXNoKGZuKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaW5nO1xuICB9O1xuICB0aGluZy5vbmNlID0gZnVuY3Rpb24gKHR5cGUsIGZuKSB7XG4gICAgZm4uX29uY2UgPSB0cnVlOyAvLyB0aGluZy5vZmYoZm4pIHN0aWxsIHdvcmtzIVxuICAgIHRoaW5nLm9uKHR5cGUsIGZuKTtcbiAgICByZXR1cm4gdGhpbmc7XG4gIH07XG4gIHRoaW5nLm9mZiA9IGZ1bmN0aW9uICh0eXBlLCBmbikge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBpZiAoYyA9PT0gMSkge1xuICAgICAgZGVsZXRlIGV2dFt0eXBlXTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IDApIHtcbiAgICAgIGV2dCA9IHt9O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZXQgPSBldnRbdHlwZV07XG4gICAgICBpZiAoIWV0KSB7IHJldHVybiB0aGluZzsgfVxuICAgICAgZXQuc3BsaWNlKGV0LmluZGV4T2YoZm4pLCAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaW5nO1xuICB9O1xuICB0aGluZy5lbWl0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcmdzID0gYXRvYShhcmd1bWVudHMpO1xuICAgIHJldHVybiB0aGluZy5lbWl0dGVyU25hcHNob3QoYXJncy5zaGlmdCgpKS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfTtcbiAgdGhpbmcuZW1pdHRlclNuYXBzaG90ID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICB2YXIgZXQgPSAoZXZ0W3R5cGVdIHx8IFtdKS5zbGljZSgwKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGFyZ3MgPSBhdG9hKGFyZ3VtZW50cyk7XG4gICAgICB2YXIgY3R4ID0gdGhpcyB8fCB0aGluZztcbiAgICAgIGlmICh0eXBlID09PSAnZXJyb3InICYmIG9wdHMudGhyb3dzICE9PSBmYWxzZSAmJiAhZXQubGVuZ3RoKSB7IHRocm93IGFyZ3MubGVuZ3RoID09PSAxID8gYXJnc1swXSA6IGFyZ3M7IH1cbiAgICAgIGV0LmZvckVhY2goZnVuY3Rpb24gZW1pdHRlciAobGlzdGVuKSB7XG4gICAgICAgIGlmIChvcHRzLmFzeW5jKSB7IGRlYm91bmNlKGxpc3RlbiwgYXJncywgY3R4KTsgfSBlbHNlIHsgbGlzdGVuLmFwcGx5KGN0eCwgYXJncyk7IH1cbiAgICAgICAgaWYgKGxpc3Rlbi5fb25jZSkgeyB0aGluZy5vZmYodHlwZSwgbGlzdGVuKTsgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGhpbmc7XG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIHRoaW5nO1xufTtcblxuXG4vKioqLyB9KSxcbi8qIDEwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYXRvYSAoYSwgbikgeyByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSwgbik7IH1cblxuXG4vKioqLyB9KSxcbi8qIDExICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciB0aWNreSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlYm91bmNlIChmbiwgYXJncywgY3R4KSB7XG4gIGlmICghZm4pIHsgcmV0dXJuOyB9XG4gIHRpY2t5KGZ1bmN0aW9uIHJ1biAoKSB7XG4gICAgZm4uYXBwbHkoY3R4IHx8IG51bGwsIGFyZ3MgfHwgW10pO1xuICB9KTtcbn07XG5cblxuLyoqKi8gfSksXG4vKiAxMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oc2V0SW1tZWRpYXRlKSB7dmFyIHNpID0gdHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJywgdGljaztcbmlmIChzaSkge1xuICB0aWNrID0gZnVuY3Rpb24gKGZuKSB7IHNldEltbWVkaWF0ZShmbik7IH07XG59IGVsc2Uge1xuICB0aWNrID0gZnVuY3Rpb24gKGZuKSB7IHNldFRpbWVvdXQoZm4sIDApOyB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRpY2s7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxMykuc2V0SW1tZWRpYXRlKSlcblxuLyoqKi8gfSksXG4vKiAxMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7dmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHdpbmRvdywgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbCh3aW5kb3csIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcbi8vIE9uIHNvbWUgZXhvdGljIGVudmlyb25tZW50cywgaXQncyBub3QgY2xlYXIgd2hpY2ggb2JqZWN0IGBzZXRpbW1laWRhdGVgIHdhc1xuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbi8vIGBzZXRpbW1lZGlhdGVgIGxpYnJhcnkuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUpO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlKTtcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMCkpKVxuXG4vKioqLyB9KSxcbi8qIDE0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwsIHByb2Nlc3MpIHsoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDApLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KSkpXG5cbi8qKiovIH0pLFxuLyogMTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcblxuXG4vKioqLyB9KSxcbi8qIDE2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG52YXIgY3VzdG9tRXZlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KTtcbnZhciBldmVudG1hcCA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xudmFyIGRvYyA9IGdsb2JhbC5kb2N1bWVudDtcbnZhciBhZGRFdmVudCA9IGFkZEV2ZW50RWFzeTtcbnZhciByZW1vdmVFdmVudCA9IHJlbW92ZUV2ZW50RWFzeTtcbnZhciBoYXJkQ2FjaGUgPSBbXTtcblxuaWYgKCFnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICBhZGRFdmVudCA9IGFkZEV2ZW50SGFyZDtcbiAgcmVtb3ZlRXZlbnQgPSByZW1vdmVFdmVudEhhcmQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhZGQ6IGFkZEV2ZW50LFxuICByZW1vdmU6IHJlbW92ZUV2ZW50LFxuICBmYWJyaWNhdGU6IGZhYnJpY2F0ZUV2ZW50XG59O1xuXG5mdW5jdGlvbiBhZGRFdmVudEVhc3kgKGVsLCB0eXBlLCBmbiwgY2FwdHVyaW5nKSB7XG4gIHJldHVybiBlbC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGZuLCBjYXB0dXJpbmcpO1xufVxuXG5mdW5jdGlvbiBhZGRFdmVudEhhcmQgKGVsLCB0eXBlLCBmbikge1xuICByZXR1cm4gZWwuYXR0YWNoRXZlbnQoJ29uJyArIHR5cGUsIHdyYXAoZWwsIHR5cGUsIGZuKSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50RWFzeSAoZWwsIHR5cGUsIGZuLCBjYXB0dXJpbmcpIHtcbiAgcmV0dXJuIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgZm4sIGNhcHR1cmluZyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50SGFyZCAoZWwsIHR5cGUsIGZuKSB7XG4gIHZhciBsaXN0ZW5lciA9IHVud3JhcChlbCwgdHlwZSwgZm4pO1xuICBpZiAobGlzdGVuZXIpIHtcbiAgICByZXR1cm4gZWwuZGV0YWNoRXZlbnQoJ29uJyArIHR5cGUsIGxpc3RlbmVyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmYWJyaWNhdGVFdmVudCAoZWwsIHR5cGUsIG1vZGVsKSB7XG4gIHZhciBlID0gZXZlbnRtYXAuaW5kZXhPZih0eXBlKSA9PT0gLTEgPyBtYWtlQ3VzdG9tRXZlbnQoKSA6IG1ha2VDbGFzc2ljRXZlbnQoKTtcbiAgaWYgKGVsLmRpc3BhdGNoRXZlbnQpIHtcbiAgICBlbC5kaXNwYXRjaEV2ZW50KGUpO1xuICB9IGVsc2Uge1xuICAgIGVsLmZpcmVFdmVudCgnb24nICsgdHlwZSwgZSk7XG4gIH1cbiAgZnVuY3Rpb24gbWFrZUNsYXNzaWNFdmVudCAoKSB7XG4gICAgdmFyIGU7XG4gICAgaWYgKGRvYy5jcmVhdGVFdmVudCkge1xuICAgICAgZSA9IGRvYy5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICAgIGUuaW5pdEV2ZW50KHR5cGUsIHRydWUsIHRydWUpO1xuICAgIH0gZWxzZSBpZiAoZG9jLmNyZWF0ZUV2ZW50T2JqZWN0KSB7XG4gICAgICBlID0gZG9jLmNyZWF0ZUV2ZW50T2JqZWN0KCk7XG4gICAgfVxuICAgIHJldHVybiBlO1xuICB9XG4gIGZ1bmN0aW9uIG1ha2VDdXN0b21FdmVudCAoKSB7XG4gICAgcmV0dXJuIG5ldyBjdXN0b21FdmVudCh0eXBlLCB7IGRldGFpbDogbW9kZWwgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gd3JhcHBlckZhY3RvcnkgKGVsLCB0eXBlLCBmbikge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcHBlciAob3JpZ2luYWxFdmVudCkge1xuICAgIHZhciBlID0gb3JpZ2luYWxFdmVudCB8fCBnbG9iYWwuZXZlbnQ7XG4gICAgZS50YXJnZXQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCA9IGUucHJldmVudERlZmF1bHQgfHwgZnVuY3Rpb24gcHJldmVudERlZmF1bHQgKCkgeyBlLnJldHVyblZhbHVlID0gZmFsc2U7IH07XG4gICAgZS5zdG9wUHJvcGFnYXRpb24gPSBlLnN0b3BQcm9wYWdhdGlvbiB8fCBmdW5jdGlvbiBzdG9wUHJvcGFnYXRpb24gKCkgeyBlLmNhbmNlbEJ1YmJsZSA9IHRydWU7IH07XG4gICAgZS53aGljaCA9IGUud2hpY2ggfHwgZS5rZXlDb2RlO1xuICAgIGZuLmNhbGwoZWwsIGUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiB3cmFwIChlbCwgdHlwZSwgZm4pIHtcbiAgdmFyIHdyYXBwZXIgPSB1bndyYXAoZWwsIHR5cGUsIGZuKSB8fCB3cmFwcGVyRmFjdG9yeShlbCwgdHlwZSwgZm4pO1xuICBoYXJkQ2FjaGUucHVzaCh7XG4gICAgd3JhcHBlcjogd3JhcHBlcixcbiAgICBlbGVtZW50OiBlbCxcbiAgICB0eXBlOiB0eXBlLFxuICAgIGZuOiBmblxuICB9KTtcbiAgcmV0dXJuIHdyYXBwZXI7XG59XG5cbmZ1bmN0aW9uIHVud3JhcCAoZWwsIHR5cGUsIGZuKSB7XG4gIHZhciBpID0gZmluZChlbCwgdHlwZSwgZm4pO1xuICBpZiAoaSkge1xuICAgIHZhciB3cmFwcGVyID0gaGFyZENhY2hlW2ldLndyYXBwZXI7XG4gICAgaGFyZENhY2hlLnNwbGljZShpLCAxKTsgLy8gZnJlZSB1cCBhIHRhZCBvZiBtZW1vcnlcbiAgICByZXR1cm4gd3JhcHBlcjtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kIChlbCwgdHlwZSwgZm4pIHtcbiAgdmFyIGksIGl0ZW07XG4gIGZvciAoaSA9IDA7IGkgPCBoYXJkQ2FjaGUubGVuZ3RoOyBpKyspIHtcbiAgICBpdGVtID0gaGFyZENhY2hlW2ldO1xuICAgIGlmIChpdGVtLmVsZW1lbnQgPT09IGVsICYmIGl0ZW0udHlwZSA9PT0gdHlwZSAmJiBpdGVtLmZuID09PSBmbikge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG59XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDApKSlcblxuLyoqKi8gfSksXG4vKiAxNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7XG52YXIgTmF0aXZlQ3VzdG9tRXZlbnQgPSBnbG9iYWwuQ3VzdG9tRXZlbnQ7XG5cbmZ1bmN0aW9uIHVzZU5hdGl2ZSAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIHAgPSBuZXcgTmF0aXZlQ3VzdG9tRXZlbnQoJ2NhdCcsIHsgZGV0YWlsOiB7IGZvbzogJ2JhcicgfSB9KTtcbiAgICByZXR1cm4gICdjYXQnID09PSBwLnR5cGUgJiYgJ2JhcicgPT09IHAuZGV0YWlsLmZvbztcbiAgfSBjYXRjaCAoZSkge1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBDcm9zcy1icm93c2VyIGBDdXN0b21FdmVudGAgY29uc3RydWN0b3IuXG4gKlxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0N1c3RvbUV2ZW50LkN1c3RvbUV2ZW50XG4gKlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gdXNlTmF0aXZlKCkgPyBOYXRpdmVDdXN0b21FdmVudCA6XG5cbi8vIElFID49IDlcbidmdW5jdGlvbicgPT09IHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFdmVudCA/IGZ1bmN0aW9uIEN1c3RvbUV2ZW50ICh0eXBlLCBwYXJhbXMpIHtcbiAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgaWYgKHBhcmFtcykge1xuICAgIGUuaW5pdEN1c3RvbUV2ZW50KHR5cGUsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSwgcGFyYW1zLmRldGFpbCk7XG4gIH0gZWxzZSB7XG4gICAgZS5pbml0Q3VzdG9tRXZlbnQodHlwZSwgZmFsc2UsIGZhbHNlLCB2b2lkIDApO1xuICB9XG4gIHJldHVybiBlO1xufSA6XG5cbi8vIElFIDw9IDhcbmZ1bmN0aW9uIEN1c3RvbUV2ZW50ICh0eXBlLCBwYXJhbXMpIHtcbiAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudE9iamVjdCgpO1xuICBlLnR5cGUgPSB0eXBlO1xuICBpZiAocGFyYW1zKSB7XG4gICAgZS5idWJibGVzID0gQm9vbGVhbihwYXJhbXMuYnViYmxlcyk7XG4gICAgZS5jYW5jZWxhYmxlID0gQm9vbGVhbihwYXJhbXMuY2FuY2VsYWJsZSk7XG4gICAgZS5kZXRhaWwgPSBwYXJhbXMuZGV0YWlsO1xuICB9IGVsc2Uge1xuICAgIGUuYnViYmxlcyA9IGZhbHNlO1xuICAgIGUuY2FuY2VsYWJsZSA9IGZhbHNlO1xuICAgIGUuZGV0YWlsID0gdm9pZCAwO1xuICB9XG4gIHJldHVybiBlO1xufVxuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygwKSkpXG5cbi8qKiovIH0pLFxuLyogMTggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbnZhciBldmVudG1hcCA9IFtdO1xudmFyIGV2ZW50bmFtZSA9ICcnO1xudmFyIHJvbiA9IC9eb24vO1xuXG5mb3IgKGV2ZW50bmFtZSBpbiBnbG9iYWwpIHtcbiAgaWYgKHJvbi50ZXN0KGV2ZW50bmFtZSkpIHtcbiAgICBldmVudG1hcC5wdXNoKGV2ZW50bmFtZS5zbGljZSgyKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBldmVudG1hcDtcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMCkpKVxuXG4vKioqLyB9KSxcbi8qIDE5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBjYWNoZSA9IHt9O1xudmFyIHN0YXJ0ID0gJyg/Ol58XFxcXHMpJztcbnZhciBlbmQgPSAnKD86XFxcXHN8JCknO1xuXG5mdW5jdGlvbiBsb29rdXBDbGFzcyAoY2xhc3NOYW1lKSB7XG4gIHZhciBjYWNoZWQgPSBjYWNoZVtjbGFzc05hbWVdO1xuICBpZiAoY2FjaGVkKSB7XG4gICAgY2FjaGVkLmxhc3RJbmRleCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgY2FjaGVbY2xhc3NOYW1lXSA9IGNhY2hlZCA9IG5ldyBSZWdFeHAoc3RhcnQgKyBjbGFzc05hbWUgKyBlbmQsICdnJyk7XG4gIH1cbiAgcmV0dXJuIGNhY2hlZDtcbn1cblxuZnVuY3Rpb24gYWRkQ2xhc3MgKGVsLCBjbGFzc05hbWUpIHtcbiAgdmFyIGN1cnJlbnQgPSBlbC5jbGFzc05hbWU7XG4gIGlmICghY3VycmVudC5sZW5ndGgpIHtcbiAgICBlbC5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gIH0gZWxzZSBpZiAoIWxvb2t1cENsYXNzKGNsYXNzTmFtZSkudGVzdChjdXJyZW50KSkge1xuICAgIGVsLmNsYXNzTmFtZSArPSAnICcgKyBjbGFzc05hbWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcm1DbGFzcyAoZWwsIGNsYXNzTmFtZSkge1xuICBlbC5jbGFzc05hbWUgPSBlbC5jbGFzc05hbWUucmVwbGFjZShsb29rdXBDbGFzcyhjbGFzc05hbWUpLCAnICcpLnRyaW0oKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFkZDogYWRkQ2xhc3MsXG4gIHJtOiBybUNsYXNzXG59O1xuXG5cbi8qKiovIH0pLFxuLyogMjAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgdmFyIGZpZWxkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYXJncy5wYXJlbnQpO1xuXG4gIGlmICghZmllbGRzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgW10uZm9yRWFjaC5jYWxsKGZpZWxkcywgZnVuY3Rpb24gKGF1dG9MaXN0KSB7XG4gICAgdmFyIEhpZGRlbiA9ICgwLCBfc2VyaWFsaXplZElucHV0Mi5kZWZhdWx0KShhdXRvTGlzdCwgYXJncy5oaWRkZW4pO1xuICAgIHZhciByZW1vdmUgPSAoMCwgX3V0aWxpdGllcy5yZW1vdmVJdGVtcykoSGlkZGVuLCBfdXRpbGl0aWVzLm9uUmVtb3ZlT2JqZWN0KTtcbiAgICB2YXIgZHJhZyA9ICgwLCBfdXRpbGl0aWVzLmRyYWdJdGVtcykoSGlkZGVuLCBfdXRpbGl0aWVzLm9uRHJhZ09iamVjdCk7XG4gICAgdmFyIExpc3QgPSAoMCwgX2xpc3QyLmRlZmF1bHQpKGF1dG9MaXN0LCBPYmplY3QuYXNzaWduKGFyZ3MsIHsgb25EcmFnOiBkcmFnLCBvblJlbW92ZTogcmVtb3ZlIH0pKTtcbiAgICB2YXIgaW5wdXQgPSBhdXRvTGlzdC5xdWVyeVNlbGVjdG9yKCcuYXV0b3N1Z2dlc3QtbGlzdC1pbnB1dCcpO1xuICAgIHZhciBlbE5hbWUgPSAnYXV0b0xpc3RfJyArIGlucHV0LmdldEF0dHJpYnV0ZSgnbGlzdCcpO1xuICAgIHZhciBlbmRwb2ludCA9IHZvaWQgMDtcblxuICAgIGlmICh3aW5kb3dbZWxOYW1lXS5uYW1lc3BhY2UpIHtcbiAgICAgIGVuZHBvaW50ID0gT01HRmllbGRzLmJhc2VVUkwgKyAnL3dwLWpzb24vJyArIHdpbmRvd1tlbE5hbWVdLm5hbWVzcGFjZSArICcvJyArIHdpbmRvd1tlbE5hbWVdLnJlc291cmNlICsgJz9zZWFyY2g9JztcbiAgICB9IGVsc2Uge1xuICAgICAgZW5kcG9pbnQgPSBPTUdGaWVsZHMuYmFzZVVSTCArICcvd3AtanNvbi93cC92Mi8nICsgd2luZG93W2VsTmFtZV0ucmVzb3VyY2UgKyAnP3NlYXJjaD0nO1xuICAgIH1cblxuICAgICgwLCBfYXV0b3N1Z2dlc3QyLmRlZmF1bHQpKGlucHV0LCBlbmRwb2ludCwgZnVuY3Rpb24gKHZhbHVlLCBpbnB1dCkge1xuICAgICAgTGlzdC5hZGQodmFsdWUpO1xuICAgICAgaW5wdXQudmFsdWUgPSAnJztcbiAgICAgIEhpZGRlbi5hZGQodmFsdWUpO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbnZhciBfbGlzdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cbnZhciBfbGlzdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9saXN0KTtcblxudmFyIF9hdXRvc3VnZ2VzdCA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfYXV0b3N1Z2dlc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXV0b3N1Z2dlc3QpO1xuXG52YXIgX3NlcmlhbGl6ZWRJbnB1dCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cbnZhciBfc2VyaWFsaXplZElucHV0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NlcmlhbGl6ZWRJbnB1dCk7XG5cbnZhciBfdXRpbGl0aWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqKi8gfSksXG4vKiAyMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoYXJncykge1xuICB2YXIgZmllbGRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChhcmdzLnBhcmVudCk7XG5cbiAgaWYgKCFmaWVsZHMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBbXS5mb3JFYWNoLmNhbGwoZmllbGRzLCBmdW5jdGlvbiAoYXV0b0l0ZW0pIHtcbiAgICB2YXIgaGlkZGVuID0gYXV0b0l0ZW0ucXVlcnlTZWxlY3RvcihhcmdzLmhpZGRlbik7XG4gICAgdmFyIGlucHV0ID0gYXV0b0l0ZW0ucXVlcnlTZWxlY3RvcignLmF1dG9zdWdnZXN0LWlucHV0Jyk7XG4gICAgdmFyIGVsTmFtZSA9ICdhdXRvTGlzdF8nICsgaW5wdXQuZ2V0QXR0cmlidXRlKCdsaXN0Jyk7XG4gICAgdmFyIGVuZHBvaW50ID0gdm9pZCAwO1xuXG4gICAgaWYgKHdpbmRvd1tlbE5hbWVdLm5hbWVzcGFjZSkge1xuICAgICAgZW5kcG9pbnQgPSBPTUdGaWVsZHMuYmFzZVVSTCArICcvd3AtanNvbi8nICsgd2luZG93W2VsTmFtZV0ubmFtZXNwYWNlICsgJy8nICsgd2luZG93W2VsTmFtZV0ucmVzb3VyY2UgKyAnP3NlYXJjaD0nO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmRwb2ludCA9IE9NR0ZpZWxkcy5iYXNlVVJMICsgJy93cC1qc29uL3dwL3YyLycgKyB3aW5kb3dbZWxOYW1lXS5yZXNvdXJjZSArICc/c2VhcmNoPSc7XG4gICAgfVxuXG4gICAgKDAsIF9hdXRvc3VnZ2VzdDIuZGVmYXVsdCkoaW5wdXQsIGVuZHBvaW50LCBmdW5jdGlvbiAodmFsdWUsIGlucHV0KSB7XG4gICAgICBoaWRkZW4udmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgaGlkZGVuLnZhbHVlID0gJyc7XG4gICAgfSk7XG4gIH0pO1xufTtcblxudmFyIF9hdXRvc3VnZ2VzdCA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfYXV0b3N1Z2dlc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXV0b3N1Z2dlc3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKioqLyB9KSxcbi8qIDIyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpbWFnZVVwbG9hZHM7XG5mdW5jdGlvbiBpbWFnZVVwbG9hZHMoKSB7XG5cdHZhciBmZWF0dXJlZEltYWdlV3JhcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jdXN0b20tbWVkaWEtdXBsb2FkJyk7XG5cblx0aWYgKGZlYXR1cmVkSW1hZ2VXcmFwLmxlbmd0aCA9PT0gMCkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdFtdLm1hcC5jYWxsKGZlYXR1cmVkSW1hZ2VXcmFwLCBmdW5jdGlvbiAoaXRlbSkge1xuXHRcdC8vIHZhciBJbWFnZVdyYXBJZCA9IGl0ZW0uYXR0cmlidXRlLmlkO1xuXHRcdHZhciByZW1vdmVJbWFnZSA9IGl0ZW0ucXVlcnlTZWxlY3RvcignLnJlbW92ZS1pbWFnZScpO1xuXHRcdHZhciByZXBsYWNlSW1hZ2UgPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoJy5yZXBsYWNlLWltYWdlJyk7XG5cdFx0dmFyIHNldEltYWdlID0gaXRlbS5xdWVyeVNlbGVjdG9yKCcuc2V0LWltYWdlJyk7XG5cdFx0dmFyIGZlYXR1cmVkSW1hZ2VUYWcgPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoJ2EucmVwbGFjZS1pbWFnZSBpbWcnKTtcblx0XHR2YXIgZmVhdHVyZWRJbWFnZUlEID0gaXRlbS5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPVwiaGlkZGVuXCJdJyk7XG5cdFx0dmFyIGZlYXR1cmVkSW1hZ2VUaXRsZSA9IGl0ZW0ucXVlcnlTZWxlY3RvcignLnRodW1ibmFpbC10aXRsZScpO1xuXHRcdHZhciBtZWRpYUZyYW1lID0gd3AubWVkaWEoe1xuXHRcdFx0dGl0bGU6ICdDaG9vc2UgTWVkaWEnLFxuXHRcdFx0YnV0dG9uOiB7XG5cdFx0XHRcdHRleHQ6ICdVc2UgU2VsZWN0ZWQgTWVkaWEnXG5cdFx0XHR9LFxuXHRcdFx0bXVsdGlwbGU6IGZhbHNlXG5cdFx0fSk7XG5cblx0XHRtZWRpYUZyYW1lLm9uKCdzZWxlY3QnLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgYXR0YWNobWVudCA9IG1lZGlhRnJhbWUuc3RhdGUoKS5nZXQoJ3NlbGVjdGlvbicpLmZpcnN0KCkudG9KU09OKCk7XG5cblx0XHRcdGl0ZW0uY2xhc3NMaXN0LnRvZ2dsZSgnaGFzLWltYWdlJyk7XG5cdFx0XHRmZWF0dXJlZEltYWdlSUQudmFsdWUgPSBhdHRhY2htZW50LmlkO1xuXHRcdFx0aWYgKGF0dGFjaG1lbnQuaGFzT3duUHJvcGVydHkoJ3NpemVzJykpIHtcblx0XHRcdFx0ZmVhdHVyZWRJbWFnZVRhZy5zZXRBdHRyaWJ1dGUoJ3NyYycsIGF0dGFjaG1lbnQuc2l6ZXMudGh1bWJuYWlsLnVybCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmZWF0dXJlZEltYWdlVGFnLnNldEF0dHJpYnV0ZSgnc3JjJywgYXR0YWNobWVudC5pY29uKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGZlYXR1cmVkSW1hZ2VUaXRsZSkge1xuXHRcdFx0XHRmZWF0dXJlZEltYWdlVGl0bGUuaW5uZXJIVE1MID0gYXR0YWNobWVudC5maWxlbmFtZTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJlbW92ZUltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0aXRlbS5jbGFzc0xpc3QudG9nZ2xlKCdoYXMtaW1hZ2UnKTtcblx0XHRcdGZlYXR1cmVkSW1hZ2VUYWcuc2V0QXR0cmlidXRlKCdzcmMnLCAnJyk7XG5cdFx0XHRmZWF0dXJlZEltYWdlSUQudmFsdWUgPSAnJztcblxuXHRcdFx0aWYgKGZlYXR1cmVkSW1hZ2VUaXRsZSkge1xuXHRcdFx0XHRmZWF0dXJlZEltYWdlVGl0bGUuaW5uZXJIVE1MID0gJyc7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXBsYWNlSW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRtZWRpYUZyYW1lLm9wZW4oKTtcblx0XHR9KTtcblxuXHRcdHNldEltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0bWVkaWFGcmFtZS5vcGVuKCk7XG5cdFx0fSk7XG5cdH0pO1xufTtcblxuLyoqKi8gfSksXG4vKiAyMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBkYXRlcGlja2VycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5kYXRlcGlja2VyLWlucHV0Jyk7XG5cbiAgaWYgKCFkYXRlcGlja2Vycykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIFtdLmZvckVhY2guY2FsbChkYXRlcGlja2VycywgZnVuY3Rpb24gKGRhdGVGaWVsZCkge1xuICAgIHZhciBjdXJyZW50RGF0ZSA9IGRhdGVGaWVsZC5kYXRhc2V0LmRhdGU7XG5cbiAgICAoMCwgX2ZsYXRwaWNrcjIuZGVmYXVsdCkoZGF0ZUZpZWxkLCB7XG4gICAgICBhbHRJbnB1dDogdHJ1ZSxcbiAgICAgIGFsdEZvcm1hdDogJ0YgaiwgWScsXG4gICAgICBkYXRlRm9ybWF0OiAnVScsXG4gICAgICBkZWZhdWx0RGF0ZTogIWN1cnJlbnREYXRlID8gJycgOiBjdXJyZW50RGF0ZVxuICAgIH0pO1xuICB9KTtcbn07XG5cbnZhciBfZmxhdHBpY2tyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XG5cbnZhciBfZmxhdHBpY2tyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZsYXRwaWNrcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKiovIH0pLFxuLyogMjQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyogZmxhdHBpY2tyIHY0LjQuMywgQGxpY2Vuc2UgTUlUICovXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgICB0cnVlID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgKGdsb2JhbC5mbGF0cGlja3IgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgcGFkID0gZnVuY3Rpb24gcGFkKG51bWJlcikge1xuICAgICAgcmV0dXJuIChcIjBcIiArIG51bWJlcikuc2xpY2UoLTIpO1xuICAgIH07XG4gICAgdmFyIGludCA9IGZ1bmN0aW9uIGludChib29sKSB7XG4gICAgICByZXR1cm4gYm9vbCA9PT0gdHJ1ZSA/IDEgOiAwO1xuICAgIH07XG4gICAgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XG4gICAgICBpZiAoaW1tZWRpYXRlID09PSB2b2lkIDApIHtcbiAgICAgICAgaW1tZWRpYXRlID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciB0aW1lb3V0O1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLFxuICAgICAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgdGltZW91dCAhPT0gbnVsbCAmJiBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgICAgaWYgKCFpbW1lZGlhdGUpIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIH0sIHdhaXQpO1xuICAgICAgICBpZiAoaW1tZWRpYXRlICYmICF0aW1lb3V0KSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9XG4gICAgdmFyIGFycmF5aWZ5ID0gZnVuY3Rpb24gYXJyYXlpZnkob2JqKSB7XG4gICAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgQXJyYXkgPyBvYmogOiBbb2JqXTtcbiAgICB9O1xuXG4gICAgdmFyIGRvX25vdGhpbmcgPSBmdW5jdGlvbiBkb19ub3RoaW5nKCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuXG4gICAgdmFyIG1vbnRoVG9TdHIgPSBmdW5jdGlvbiBtb250aFRvU3RyKG1vbnRoTnVtYmVyLCBzaG9ydGhhbmQsIGxvY2FsZSkge1xuICAgICAgcmV0dXJuIGxvY2FsZS5tb250aHNbc2hvcnRoYW5kID8gXCJzaG9ydGhhbmRcIiA6IFwibG9uZ2hhbmRcIl1bbW9udGhOdW1iZXJdO1xuICAgIH07XG4gICAgdmFyIHJldkZvcm1hdCA9IHtcbiAgICAgIEQ6IGRvX25vdGhpbmcsXG4gICAgICBGOiBmdW5jdGlvbiBGKGRhdGVPYmosIG1vbnRoTmFtZSwgbG9jYWxlKSB7XG4gICAgICAgIGRhdGVPYmouc2V0TW9udGgobG9jYWxlLm1vbnRocy5sb25naGFuZC5pbmRleE9mKG1vbnRoTmFtZSkpO1xuICAgICAgfSxcbiAgICAgIEc6IGZ1bmN0aW9uIEcoZGF0ZU9iaiwgaG91cikge1xuICAgICAgICBkYXRlT2JqLnNldEhvdXJzKHBhcnNlRmxvYXQoaG91cikpO1xuICAgICAgfSxcbiAgICAgIEg6IGZ1bmN0aW9uIEgoZGF0ZU9iaiwgaG91cikge1xuICAgICAgICBkYXRlT2JqLnNldEhvdXJzKHBhcnNlRmxvYXQoaG91cikpO1xuICAgICAgfSxcbiAgICAgIEo6IGZ1bmN0aW9uIEooZGF0ZU9iaiwgZGF5KSB7XG4gICAgICAgIGRhdGVPYmouc2V0RGF0ZShwYXJzZUZsb2F0KGRheSkpO1xuICAgICAgfSxcbiAgICAgIEs6IGZ1bmN0aW9uIEsoZGF0ZU9iaiwgYW1QTSwgbG9jYWxlKSB7XG4gICAgICAgIGRhdGVPYmouc2V0SG91cnMoZGF0ZU9iai5nZXRIb3VycygpICUgMTIgKyAxMiAqIGludChuZXcgUmVnRXhwKGxvY2FsZS5hbVBNWzFdLCBcImlcIikudGVzdChhbVBNKSkpO1xuICAgICAgfSxcbiAgICAgIE06IGZ1bmN0aW9uIE0oZGF0ZU9iaiwgc2hvcnRNb250aCwgbG9jYWxlKSB7XG4gICAgICAgIGRhdGVPYmouc2V0TW9udGgobG9jYWxlLm1vbnRocy5zaG9ydGhhbmQuaW5kZXhPZihzaG9ydE1vbnRoKSk7XG4gICAgICB9LFxuICAgICAgUzogZnVuY3Rpb24gUyhkYXRlT2JqLCBzZWNvbmRzKSB7XG4gICAgICAgIGRhdGVPYmouc2V0U2Vjb25kcyhwYXJzZUZsb2F0KHNlY29uZHMpKTtcbiAgICAgIH0sXG4gICAgICBVOiBmdW5jdGlvbiBVKF8sIHVuaXhTZWNvbmRzKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShwYXJzZUZsb2F0KHVuaXhTZWNvbmRzKSAqIDEwMDApO1xuICAgICAgfSxcbiAgICAgIFc6IGZ1bmN0aW9uIFcoZGF0ZU9iaiwgd2Vla051bSkge1xuICAgICAgICB2YXIgd2Vla051bWJlciA9IHBhcnNlSW50KHdlZWtOdW0pO1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZU9iai5nZXRGdWxsWWVhcigpLCAwLCAyICsgKHdlZWtOdW1iZXIgLSAxKSAqIDcsIDAsIDAsIDAsIDApO1xuICAgICAgfSxcbiAgICAgIFk6IGZ1bmN0aW9uIFkoZGF0ZU9iaiwgeWVhcikge1xuICAgICAgICBkYXRlT2JqLnNldEZ1bGxZZWFyKHBhcnNlRmxvYXQoeWVhcikpO1xuICAgICAgfSxcbiAgICAgIFo6IGZ1bmN0aW9uIFooXywgSVNPRGF0ZSkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoSVNPRGF0ZSk7XG4gICAgICB9LFxuICAgICAgZDogZnVuY3Rpb24gZChkYXRlT2JqLCBkYXkpIHtcbiAgICAgICAgZGF0ZU9iai5zZXREYXRlKHBhcnNlRmxvYXQoZGF5KSk7XG4gICAgICB9LFxuICAgICAgaDogZnVuY3Rpb24gaChkYXRlT2JqLCBob3VyKSB7XG4gICAgICAgIGRhdGVPYmouc2V0SG91cnMocGFyc2VGbG9hdChob3VyKSk7XG4gICAgICB9LFxuICAgICAgaTogZnVuY3Rpb24gaShkYXRlT2JqLCBtaW51dGVzKSB7XG4gICAgICAgIGRhdGVPYmouc2V0TWludXRlcyhwYXJzZUZsb2F0KG1pbnV0ZXMpKTtcbiAgICAgIH0sXG4gICAgICBqOiBmdW5jdGlvbiBqKGRhdGVPYmosIGRheSkge1xuICAgICAgICBkYXRlT2JqLnNldERhdGUocGFyc2VGbG9hdChkYXkpKTtcbiAgICAgIH0sXG4gICAgICBsOiBkb19ub3RoaW5nLFxuICAgICAgbTogZnVuY3Rpb24gbShkYXRlT2JqLCBtb250aCkge1xuICAgICAgICBkYXRlT2JqLnNldE1vbnRoKHBhcnNlRmxvYXQobW9udGgpIC0gMSk7XG4gICAgICB9LFxuICAgICAgbjogZnVuY3Rpb24gbihkYXRlT2JqLCBtb250aCkge1xuICAgICAgICBkYXRlT2JqLnNldE1vbnRoKHBhcnNlRmxvYXQobW9udGgpIC0gMSk7XG4gICAgICB9LFxuICAgICAgczogZnVuY3Rpb24gcyhkYXRlT2JqLCBzZWNvbmRzKSB7XG4gICAgICAgIGRhdGVPYmouc2V0U2Vjb25kcyhwYXJzZUZsb2F0KHNlY29uZHMpKTtcbiAgICAgIH0sXG4gICAgICB3OiBkb19ub3RoaW5nLFxuICAgICAgeTogZnVuY3Rpb24geShkYXRlT2JqLCB5ZWFyKSB7XG4gICAgICAgIGRhdGVPYmouc2V0RnVsbFllYXIoMjAwMCArIHBhcnNlRmxvYXQoeWVhcikpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHRva2VuUmVnZXggPSB7XG4gICAgICBEOiBcIihcXFxcdyspXCIsXG4gICAgICBGOiBcIihcXFxcdyspXCIsXG4gICAgICBHOiBcIihcXFxcZFxcXFxkfFxcXFxkKVwiLFxuICAgICAgSDogXCIoXFxcXGRcXFxcZHxcXFxcZClcIixcbiAgICAgIEo6IFwiKFxcXFxkXFxcXGR8XFxcXGQpXFxcXHcrXCIsXG4gICAgICBLOiBcIlwiLFxuICAgICAgTTogXCIoXFxcXHcrKVwiLFxuICAgICAgUzogXCIoXFxcXGRcXFxcZHxcXFxcZClcIixcbiAgICAgIFU6IFwiKC4rKVwiLFxuICAgICAgVzogXCIoXFxcXGRcXFxcZHxcXFxcZClcIixcbiAgICAgIFk6IFwiKFxcXFxkezR9KVwiLFxuICAgICAgWjogXCIoLispXCIsXG4gICAgICBkOiBcIihcXFxcZFxcXFxkfFxcXFxkKVwiLFxuICAgICAgaDogXCIoXFxcXGRcXFxcZHxcXFxcZClcIixcbiAgICAgIGk6IFwiKFxcXFxkXFxcXGR8XFxcXGQpXCIsXG4gICAgICBqOiBcIihcXFxcZFxcXFxkfFxcXFxkKVwiLFxuICAgICAgbDogXCIoXFxcXHcrKVwiLFxuICAgICAgbTogXCIoXFxcXGRcXFxcZHxcXFxcZClcIixcbiAgICAgIG46IFwiKFxcXFxkXFxcXGR8XFxcXGQpXCIsXG4gICAgICBzOiBcIihcXFxcZFxcXFxkfFxcXFxkKVwiLFxuICAgICAgdzogXCIoXFxcXGRcXFxcZHxcXFxcZClcIixcbiAgICAgIHk6IFwiKFxcXFxkezJ9KVwiXG4gICAgfTtcbiAgICB2YXIgZm9ybWF0cyA9IHtcbiAgICAgIFo6IGZ1bmN0aW9uIFooZGF0ZSkge1xuICAgICAgICByZXR1cm4gZGF0ZS50b0lTT1N0cmluZygpO1xuICAgICAgfSxcbiAgICAgIEQ6IGZ1bmN0aW9uIEQoZGF0ZSwgbG9jYWxlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXMuc2hvcnRoYW5kW2Zvcm1hdHMudyhkYXRlLCBsb2NhbGUsIG9wdGlvbnMpXTtcbiAgICAgIH0sXG4gICAgICBGOiBmdW5jdGlvbiBGKGRhdGUsIGxvY2FsZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbW9udGhUb1N0cihmb3JtYXRzLm4oZGF0ZSwgbG9jYWxlLCBvcHRpb25zKSAtIDEsIGZhbHNlLCBsb2NhbGUpO1xuICAgICAgfSxcbiAgICAgIEc6IGZ1bmN0aW9uIEcoZGF0ZSwgbG9jYWxlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBwYWQoZm9ybWF0cy5oKGRhdGUsIGxvY2FsZSwgb3B0aW9ucykpO1xuICAgICAgfSxcbiAgICAgIEg6IGZ1bmN0aW9uIEgoZGF0ZSkge1xuICAgICAgICByZXR1cm4gcGFkKGRhdGUuZ2V0SG91cnMoKSk7XG4gICAgICB9LFxuICAgICAgSjogZnVuY3Rpb24gSihkYXRlLCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5vcmRpbmFsICE9PSB1bmRlZmluZWQgPyBkYXRlLmdldERhdGUoKSArIGxvY2FsZS5vcmRpbmFsKGRhdGUuZ2V0RGF0ZSgpKSA6IGRhdGUuZ2V0RGF0ZSgpO1xuICAgICAgfSxcbiAgICAgIEs6IGZ1bmN0aW9uIEsoZGF0ZSwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuYW1QTVtpbnQoZGF0ZS5nZXRIb3VycygpID4gMTEpXTtcbiAgICAgIH0sXG4gICAgICBNOiBmdW5jdGlvbiBNKGRhdGUsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbW9udGhUb1N0cihkYXRlLmdldE1vbnRoKCksIHRydWUsIGxvY2FsZSk7XG4gICAgICB9LFxuICAgICAgUzogZnVuY3Rpb24gUyhkYXRlKSB7XG4gICAgICAgIHJldHVybiBwYWQoZGF0ZS5nZXRTZWNvbmRzKCkpO1xuICAgICAgfSxcbiAgICAgIFU6IGZ1bmN0aW9uIFUoZGF0ZSkge1xuICAgICAgICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgLyAxMDAwO1xuICAgICAgfSxcbiAgICAgIFc6IGZ1bmN0aW9uIFcoZGF0ZSwgXywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5nZXRXZWVrKGRhdGUpO1xuICAgICAgfSxcbiAgICAgIFk6IGZ1bmN0aW9uIFkoZGF0ZSkge1xuICAgICAgICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgfSxcbiAgICAgIGQ6IGZ1bmN0aW9uIGQoZGF0ZSkge1xuICAgICAgICByZXR1cm4gcGFkKGRhdGUuZ2V0RGF0ZSgpKTtcbiAgICAgIH0sXG4gICAgICBoOiBmdW5jdGlvbiBoKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIGRhdGUuZ2V0SG91cnMoKSAlIDEyID8gZGF0ZS5nZXRIb3VycygpICUgMTIgOiAxMjtcbiAgICAgIH0sXG4gICAgICBpOiBmdW5jdGlvbiBpKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIHBhZChkYXRlLmdldE1pbnV0ZXMoKSk7XG4gICAgICB9LFxuICAgICAgajogZnVuY3Rpb24gaihkYXRlKSB7XG4gICAgICAgIHJldHVybiBkYXRlLmdldERhdGUoKTtcbiAgICAgIH0sXG4gICAgICBsOiBmdW5jdGlvbiBsKGRhdGUsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzLmxvbmdoYW5kW2RhdGUuZ2V0RGF5KCldO1xuICAgICAgfSxcbiAgICAgIG06IGZ1bmN0aW9uIG0oZGF0ZSkge1xuICAgICAgICByZXR1cm4gcGFkKGRhdGUuZ2V0TW9udGgoKSArIDEpO1xuICAgICAgfSxcbiAgICAgIG46IGZ1bmN0aW9uIG4oZGF0ZSkge1xuICAgICAgICByZXR1cm4gZGF0ZS5nZXRNb250aCgpICsgMTtcbiAgICAgIH0sXG4gICAgICBzOiBmdW5jdGlvbiBzKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIGRhdGUuZ2V0U2Vjb25kcygpO1xuICAgICAgfSxcbiAgICAgIHc6IGZ1bmN0aW9uIHcoZGF0ZSkge1xuICAgICAgICByZXR1cm4gZGF0ZS5nZXREYXkoKTtcbiAgICAgIH0sXG4gICAgICB5OiBmdW5jdGlvbiB5KGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyhkYXRlLmdldEZ1bGxZZWFyKCkpLnN1YnN0cmluZygyKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGVuZ2xpc2ggPSB7XG4gICAgICB3ZWVrZGF5czoge1xuICAgICAgICBzaG9ydGhhbmQ6IFtcIlN1blwiLCBcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiXSxcbiAgICAgICAgbG9uZ2hhbmQ6IFtcIlN1bmRheVwiLCBcIk1vbmRheVwiLCBcIlR1ZXNkYXlcIiwgXCJXZWRuZXNkYXlcIiwgXCJUaHVyc2RheVwiLCBcIkZyaWRheVwiLCBcIlNhdHVyZGF5XCJdXG4gICAgICB9LFxuICAgICAgbW9udGhzOiB7XG4gICAgICAgIHNob3J0aGFuZDogW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdLFxuICAgICAgICBsb25naGFuZDogW1wiSmFudWFyeVwiLCBcIkZlYnJ1YXJ5XCIsIFwiTWFyY2hcIiwgXCJBcHJpbFwiLCBcIk1heVwiLCBcIkp1bmVcIiwgXCJKdWx5XCIsIFwiQXVndXN0XCIsIFwiU2VwdGVtYmVyXCIsIFwiT2N0b2JlclwiLCBcIk5vdmVtYmVyXCIsIFwiRGVjZW1iZXJcIl1cbiAgICAgIH0sXG4gICAgICBkYXlzSW5Nb250aDogWzMxLCAyOCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdLFxuICAgICAgZmlyc3REYXlPZldlZWs6IDAsXG4gICAgICBvcmRpbmFsOiBmdW5jdGlvbiBvcmRpbmFsKG50aCkge1xuICAgICAgICB2YXIgcyA9IG50aCAlIDEwMDtcbiAgICAgICAgaWYgKHMgPiAzICYmIHMgPCAyMSkgcmV0dXJuIFwidGhcIjtcblxuICAgICAgICBzd2l0Y2ggKHMgJSAxMCkge1xuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHJldHVybiBcInN0XCI7XG5cbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gXCJuZFwiO1xuXG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgcmV0dXJuIFwicmRcIjtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gXCJ0aFwiO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmFuZ2VTZXBhcmF0b3I6IFwiIHRvIFwiLFxuICAgICAgd2Vla0FiYnJldmlhdGlvbjogXCJXa1wiLFxuICAgICAgc2Nyb2xsVGl0bGU6IFwiU2Nyb2xsIHRvIGluY3JlbWVudFwiLFxuICAgICAgdG9nZ2xlVGl0bGU6IFwiQ2xpY2sgdG8gdG9nZ2xlXCIsXG4gICAgICBhbVBNOiBbXCJBTVwiLCBcIlBNXCJdLFxuICAgICAgeWVhckFyaWFMYWJlbDogXCJZZWFyXCJcbiAgICB9O1xuXG4gICAgdmFyIGNyZWF0ZURhdGVGb3JtYXR0ZXIgPSBmdW5jdGlvbiBjcmVhdGVEYXRlRm9ybWF0dGVyKF9yZWYpIHtcbiAgICAgIHZhciBfcmVmJGNvbmZpZyA9IF9yZWYuY29uZmlnLFxuICAgICAgICAgIGNvbmZpZyA9IF9yZWYkY29uZmlnID09PSB2b2lkIDAgPyBkZWZhdWx0cyA6IF9yZWYkY29uZmlnLFxuICAgICAgICAgIF9yZWYkbDEwbiA9IF9yZWYubDEwbixcbiAgICAgICAgICBsMTBuID0gX3JlZiRsMTBuID09PSB2b2lkIDAgPyBlbmdsaXNoIDogX3JlZiRsMTBuO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRlT2JqLCBmcm10LCBvdmVycmlkZUxvY2FsZSkge1xuICAgICAgICBpZiAoY29uZmlnLmZvcm1hdERhdGUgIT09IHVuZGVmaW5lZCkgcmV0dXJuIGNvbmZpZy5mb3JtYXREYXRlKGRhdGVPYmosIGZybXQpO1xuICAgICAgICB2YXIgbG9jYWxlID0gb3ZlcnJpZGVMb2NhbGUgfHwgbDEwbjtcbiAgICAgICAgcmV0dXJuIGZybXQuc3BsaXQoXCJcIikubWFwKGZ1bmN0aW9uIChjLCBpLCBhcnIpIHtcbiAgICAgICAgICByZXR1cm4gZm9ybWF0c1tjXSAmJiBhcnJbaSAtIDFdICE9PSBcIlxcXFxcIiA/IGZvcm1hdHNbY10oZGF0ZU9iaiwgbG9jYWxlLCBjb25maWcpIDogYyAhPT0gXCJcXFxcXCIgPyBjIDogXCJcIjtcbiAgICAgICAgfSkuam9pbihcIlwiKTtcbiAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgY3JlYXRlRGF0ZVBhcnNlciA9IGZ1bmN0aW9uIGNyZWF0ZURhdGVQYXJzZXIoX3JlZjIpIHtcbiAgICAgIHZhciBfcmVmMiRjb25maWcgPSBfcmVmMi5jb25maWcsXG4gICAgICAgICAgY29uZmlnID0gX3JlZjIkY29uZmlnID09PSB2b2lkIDAgPyBkZWZhdWx0cyA6IF9yZWYyJGNvbmZpZyxcbiAgICAgICAgICBfcmVmMiRsMTBuID0gX3JlZjIubDEwbixcbiAgICAgICAgICBsMTBuID0gX3JlZjIkbDEwbiA9PT0gdm9pZCAwID8gZW5nbGlzaCA6IF9yZWYyJGwxMG47XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGRhdGUsIGdpdmVuRm9ybWF0LCB0aW1lbGVzcykge1xuICAgICAgICBpZiAoZGF0ZSAhPT0gMCAmJiAhZGF0ZSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHBhcnNlZERhdGU7XG4gICAgICAgIHZhciBkYXRlX29yaWcgPSBkYXRlO1xuICAgICAgICBpZiAoZGF0ZSBpbnN0YW5jZW9mIERhdGUpIHBhcnNlZERhdGUgPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSk7ZWxzZSBpZiAodHlwZW9mIGRhdGUgIT09IFwic3RyaW5nXCIgJiYgZGF0ZS50b0ZpeGVkICE9PSB1bmRlZmluZWQpIHBhcnNlZERhdGUgPSBuZXcgRGF0ZShkYXRlKTtlbHNlIGlmICh0eXBlb2YgZGF0ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHZhciBmb3JtYXQgPSBnaXZlbkZvcm1hdCB8fCAoY29uZmlnIHx8IGRlZmF1bHRzKS5kYXRlRm9ybWF0O1xuICAgICAgICAgIHZhciBkYXRlc3RyID0gU3RyaW5nKGRhdGUpLnRyaW0oKTtcblxuICAgICAgICAgIGlmIChkYXRlc3RyID09PSBcInRvZGF5XCIpIHtcbiAgICAgICAgICAgIHBhcnNlZERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgdGltZWxlc3MgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoL1okLy50ZXN0KGRhdGVzdHIpIHx8IC9HTVQkLy50ZXN0KGRhdGVzdHIpKSBwYXJzZWREYXRlID0gbmV3IERhdGUoZGF0ZSk7ZWxzZSBpZiAoY29uZmlnICYmIGNvbmZpZy5wYXJzZURhdGUpIHBhcnNlZERhdGUgPSBjb25maWcucGFyc2VEYXRlKGRhdGUsIGZvcm1hdCk7ZWxzZSB7XG4gICAgICAgICAgICBwYXJzZWREYXRlID0gIWNvbmZpZyB8fCAhY29uZmlnLm5vQ2FsZW5kYXIgPyBuZXcgRGF0ZShuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCksIDAsIDEsIDAsIDAsIDAsIDApIDogbmV3IERhdGUobmV3IERhdGUoKS5zZXRIb3VycygwLCAwLCAwLCAwKSk7XG4gICAgICAgICAgICB2YXIgbWF0Y2hlZCxcbiAgICAgICAgICAgICAgICBvcHMgPSBbXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG1hdGNoSW5kZXggPSAwLCByZWdleFN0ciA9IFwiXCI7IGkgPCBmb3JtYXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgdmFyIHRva2VuID0gZm9ybWF0W2ldO1xuICAgICAgICAgICAgICB2YXIgaXNCYWNrU2xhc2ggPSB0b2tlbiA9PT0gXCJcXFxcXCI7XG4gICAgICAgICAgICAgIHZhciBlc2NhcGVkID0gZm9ybWF0W2kgLSAxXSA9PT0gXCJcXFxcXCIgfHwgaXNCYWNrU2xhc2g7XG5cbiAgICAgICAgICAgICAgaWYgKHRva2VuUmVnZXhbdG9rZW5dICYmICFlc2NhcGVkKSB7XG4gICAgICAgICAgICAgICAgcmVnZXhTdHIgKz0gdG9rZW5SZWdleFt0b2tlbl07XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gbmV3IFJlZ0V4cChyZWdleFN0cikuZXhlYyhkYXRlKTtcblxuICAgICAgICAgICAgICAgIGlmIChtYXRjaCAmJiAobWF0Y2hlZCA9IHRydWUpKSB7XG4gICAgICAgICAgICAgICAgICBvcHNbdG9rZW4gIT09IFwiWVwiID8gXCJwdXNoXCIgOiBcInVuc2hpZnRcIl0oe1xuICAgICAgICAgICAgICAgICAgICBmbjogcmV2Rm9ybWF0W3Rva2VuXSxcbiAgICAgICAgICAgICAgICAgICAgdmFsOiBtYXRjaFsrK21hdGNoSW5kZXhdXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzQmFja1NsYXNoKSByZWdleFN0ciArPSBcIi5cIjtcblxuICAgICAgICAgICAgICBvcHMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjMpIHtcbiAgICAgICAgICAgICAgICB2YXIgZm4gPSBfcmVmMy5mbixcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gX3JlZjMudmFsO1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZWREYXRlID0gZm4ocGFyc2VkRGF0ZSwgdmFsLCBsMTBuKSB8fCBwYXJzZWREYXRlO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGFyc2VkRGF0ZSA9IG1hdGNoZWQgPyBwYXJzZWREYXRlIDogdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghKHBhcnNlZERhdGUgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICAgIGNvbmZpZy5lcnJvckhhbmRsZXIobmV3IEVycm9yKFwiSW52YWxpZCBkYXRlIHByb3ZpZGVkOiBcIiArIGRhdGVfb3JpZykpO1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGltZWxlc3MgPT09IHRydWUpIHBhcnNlZERhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICAgIHJldHVybiBwYXJzZWREYXRlO1xuICAgICAgfTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVEYXRlcyhkYXRlMSwgZGF0ZTIsIHRpbWVsZXNzKSB7XG4gICAgICBpZiAodGltZWxlc3MgPT09IHZvaWQgMCkge1xuICAgICAgICB0aW1lbGVzcyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aW1lbGVzcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUxLmdldFRpbWUoKSkuc2V0SG91cnMoMCwgMCwgMCwgMCkgLSBuZXcgRGF0ZShkYXRlMi5nZXRUaW1lKCkpLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGF0ZTEuZ2V0VGltZSgpIC0gZGF0ZTIuZ2V0VGltZSgpO1xuICAgIH1cbiAgICB2YXIgZ2V0V2VlayA9IGZ1bmN0aW9uIGdldFdlZWsoZ2l2ZW5EYXRlKSB7XG4gICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKGdpdmVuRGF0ZS5nZXRUaW1lKCkpO1xuICAgICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIDMgLSAoZGF0ZS5nZXREYXkoKSArIDYpICUgNyk7XG4gICAgICB2YXIgd2VlazEgPSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIDAsIDQpO1xuICAgICAgcmV0dXJuIDEgKyBNYXRoLnJvdW5kKCgoZGF0ZS5nZXRUaW1lKCkgLSB3ZWVrMS5nZXRUaW1lKCkpIC8gODY0MDAwMDAgLSAzICsgKHdlZWsxLmdldERheSgpICsgNikgJSA3KSAvIDcpO1xuICAgIH07XG4gICAgdmFyIGlzQmV0d2VlbiA9IGZ1bmN0aW9uIGlzQmV0d2Vlbih0cywgdHMxLCB0czIpIHtcbiAgICAgIHJldHVybiB0cyA+IE1hdGgubWluKHRzMSwgdHMyKSAmJiB0cyA8IE1hdGgubWF4KHRzMSwgdHMyKTtcbiAgICB9O1xuICAgIHZhciBkdXJhdGlvbiA9IHtcbiAgICAgIERBWTogODY0MDAwMDBcbiAgICB9O1xuXG4gICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgX2Rpc2FibGU6IFtdLFxuICAgICAgX2VuYWJsZTogW10sXG4gICAgICBhbGxvd0lucHV0OiBmYWxzZSxcbiAgICAgIGFsdEZvcm1hdDogXCJGIGosIFlcIixcbiAgICAgIGFsdElucHV0OiBmYWxzZSxcbiAgICAgIGFsdElucHV0Q2xhc3M6IFwiZm9ybS1jb250cm9sIGlucHV0XCIsXG4gICAgICBhbmltYXRlOiB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJNU0lFXCIpID09PSAtMSxcbiAgICAgIGFyaWFEYXRlRm9ybWF0OiBcIkYgaiwgWVwiLFxuICAgICAgY2xpY2tPcGVuczogdHJ1ZSxcbiAgICAgIGNsb3NlT25TZWxlY3Q6IHRydWUsXG4gICAgICBjb25qdW5jdGlvbjogXCIsIFwiLFxuICAgICAgZGF0ZUZvcm1hdDogXCJZLW0tZFwiLFxuICAgICAgZGVmYXVsdEhvdXI6IDEyLFxuICAgICAgZGVmYXVsdE1pbnV0ZTogMCxcbiAgICAgIGRlZmF1bHRTZWNvbmRzOiAwLFxuICAgICAgZGlzYWJsZTogW10sXG4gICAgICBkaXNhYmxlTW9iaWxlOiBmYWxzZSxcbiAgICAgIGVuYWJsZTogW10sXG4gICAgICBlbmFibGVTZWNvbmRzOiBmYWxzZSxcbiAgICAgIGVuYWJsZVRpbWU6IGZhbHNlLFxuICAgICAgZXJyb3JIYW5kbGVyOiBjb25zb2xlLndhcm4sXG4gICAgICBnZXRXZWVrOiBnZXRXZWVrLFxuICAgICAgaG91ckluY3JlbWVudDogMSxcbiAgICAgIGlnbm9yZWRGb2N1c0VsZW1lbnRzOiBbXSxcbiAgICAgIGlubGluZTogZmFsc2UsXG4gICAgICBsb2NhbGU6IFwiZGVmYXVsdFwiLFxuICAgICAgbWludXRlSW5jcmVtZW50OiA1LFxuICAgICAgbW9kZTogXCJzaW5nbGVcIixcbiAgICAgIG5leHRBcnJvdzogXCI8c3ZnIHZlcnNpb249JzEuMScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycgdmlld0JveD0nMCAwIDE3IDE3Jz48Zz48L2c+PHBhdGggZD0nTTEzLjIwNyA4LjQ3MmwtNy44NTQgNy44NTQtMC43MDctMC43MDcgNy4xNDYtNy4xNDYtNy4xNDYtNy4xNDggMC43MDctMC43MDcgNy44NTQgNy44NTR6JyAvPjwvc3ZnPlwiLFxuICAgICAgbm9DYWxlbmRhcjogZmFsc2UsXG4gICAgICBub3c6IG5ldyBEYXRlKCksXG4gICAgICBvbkNoYW5nZTogW10sXG4gICAgICBvbkNsb3NlOiBbXSxcbiAgICAgIG9uRGF5Q3JlYXRlOiBbXSxcbiAgICAgIG9uRGVzdHJveTogW10sXG4gICAgICBvbktleURvd246IFtdLFxuICAgICAgb25Nb250aENoYW5nZTogW10sXG4gICAgICBvbk9wZW46IFtdLFxuICAgICAgb25QYXJzZUNvbmZpZzogW10sXG4gICAgICBvblJlYWR5OiBbXSxcbiAgICAgIG9uVmFsdWVVcGRhdGU6IFtdLFxuICAgICAgb25ZZWFyQ2hhbmdlOiBbXSxcbiAgICAgIG9uUHJlQ2FsZW5kYXJQb3NpdGlvbjogW10sXG4gICAgICBwbHVnaW5zOiBbXSxcbiAgICAgIHBvc2l0aW9uOiBcImF1dG9cIixcbiAgICAgIHBvc2l0aW9uRWxlbWVudDogdW5kZWZpbmVkLFxuICAgICAgcHJldkFycm93OiBcIjxzdmcgdmVyc2lvbj0nMS4xJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHhtbG5zOnhsaW5rPSdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyB2aWV3Qm94PScwIDAgMTcgMTcnPjxnPjwvZz48cGF0aCBkPSdNNS4yMDcgOC40NzFsNy4xNDYgNy4xNDctMC43MDcgMC43MDctNy44NTMtNy44NTQgNy44NTQtNy44NTMgMC43MDcgMC43MDctNy4xNDcgNy4xNDZ6JyAvPjwvc3ZnPlwiLFxuICAgICAgc2hvcnRoYW5kQ3VycmVudE1vbnRoOiBmYWxzZSxcbiAgICAgIHNob3dNb250aHM6IDEsXG4gICAgICBzdGF0aWM6IGZhbHNlLFxuICAgICAgdGltZV8yNGhyOiBmYWxzZSxcbiAgICAgIHdlZWtOdW1iZXJzOiBmYWxzZSxcbiAgICAgIHdyYXA6IGZhbHNlXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHRvZ2dsZUNsYXNzKGVsZW0sIGNsYXNzTmFtZSwgYm9vbCkge1xuICAgICAgaWYgKGJvb2wgPT09IHRydWUpIHJldHVybiBlbGVtLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50KHRhZywgY2xhc3NOYW1lLCBjb250ZW50KSB7XG4gICAgICB2YXIgZSA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUgfHwgXCJcIjtcbiAgICAgIGNvbnRlbnQgPSBjb250ZW50IHx8IFwiXCI7XG4gICAgICBlLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgICAgIGlmIChjb250ZW50ICE9PSB1bmRlZmluZWQpIGUudGV4dENvbnRlbnQgPSBjb250ZW50O1xuICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNsZWFyTm9kZShub2RlKSB7XG4gICAgICB3aGlsZSAobm9kZS5maXJzdENoaWxkKSB7XG4gICAgICAgIG5vZGUucmVtb3ZlQ2hpbGQobm9kZS5maXJzdENoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZmluZFBhcmVudChub2RlLCBjb25kaXRpb24pIHtcbiAgICAgIGlmIChjb25kaXRpb24obm9kZSkpIHJldHVybiBub2RlO2Vsc2UgaWYgKG5vZGUucGFyZW50Tm9kZSkgcmV0dXJuIGZpbmRQYXJlbnQobm9kZS5wYXJlbnROb2RlLCBjb25kaXRpb24pO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlYXRlTnVtYmVySW5wdXQoaW5wdXRDbGFzc05hbWUsIG9wdHMpIHtcbiAgICAgIHZhciB3cmFwcGVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcIm51bUlucHV0V3JhcHBlclwiKSxcbiAgICAgICAgICBudW1JbnB1dCA9IGNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCBcIm51bUlucHV0IFwiICsgaW5wdXRDbGFzc05hbWUpLFxuICAgICAgICAgIGFycm93VXAgPSBjcmVhdGVFbGVtZW50KFwic3BhblwiLCBcImFycm93VXBcIiksXG4gICAgICAgICAgYXJyb3dEb3duID0gY3JlYXRlRWxlbWVudChcInNwYW5cIiwgXCJhcnJvd0Rvd25cIik7XG4gICAgICBudW1JbnB1dC50eXBlID0gXCJ0ZXh0XCI7XG4gICAgICBudW1JbnB1dC5wYXR0ZXJuID0gXCJcXFxcZCpcIjtcbiAgICAgIGlmIChvcHRzICE9PSB1bmRlZmluZWQpIGZvciAodmFyIGtleSBpbiBvcHRzKSB7XG4gICAgICAgIG51bUlucHV0LnNldEF0dHJpYnV0ZShrZXksIG9wdHNba2V5XSk7XG4gICAgICB9XG4gICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKG51bUlucHV0KTtcbiAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoYXJyb3dVcCk7XG4gICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGFycm93RG93bik7XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIE9iamVjdC5hc3NpZ24gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgT2JqZWN0LmFzc2lnbiA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3RcIik7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChzb3VyY2UpIHtcbiAgICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJncy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICB2YXIgc291cmNlID0gYXJnc1tfaV07XG5cbiAgICAgICAgICBfbG9vcChzb3VyY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIERFQk9VTkNFRF9DSEFOR0VfTVMgPSAzMDA7XG5cbiAgICBmdW5jdGlvbiBGbGF0cGlja3JJbnN0YW5jZShlbGVtZW50LCBpbnN0YW5jZUNvbmZpZykge1xuICAgICAgdmFyIHNlbGYgPSB7XG4gICAgICAgIGNvbmZpZzogT2JqZWN0LmFzc2lnbih7fSwgZmxhdHBpY2tyLmRlZmF1bHRDb25maWcpLFxuICAgICAgICBsMTBuOiBlbmdsaXNoXG4gICAgICB9O1xuICAgICAgc2VsZi5wYXJzZURhdGUgPSBjcmVhdGVEYXRlUGFyc2VyKHtcbiAgICAgICAgY29uZmlnOiBzZWxmLmNvbmZpZyxcbiAgICAgICAgbDEwbjogc2VsZi5sMTBuXG4gICAgICB9KTtcbiAgICAgIHNlbGYuX2hhbmRsZXJzID0gW107XG4gICAgICBzZWxmLl9iaW5kID0gYmluZDtcbiAgICAgIHNlbGYuX3NldEhvdXJzRnJvbURhdGUgPSBzZXRIb3Vyc0Zyb21EYXRlO1xuICAgICAgc2VsZi5jaGFuZ2VNb250aCA9IGNoYW5nZU1vbnRoO1xuICAgICAgc2VsZi5jaGFuZ2VZZWFyID0gY2hhbmdlWWVhcjtcbiAgICAgIHNlbGYuY2xlYXIgPSBjbGVhcjtcbiAgICAgIHNlbGYuY2xvc2UgPSBjbG9zZTtcbiAgICAgIHNlbGYuX2NyZWF0ZUVsZW1lbnQgPSBjcmVhdGVFbGVtZW50O1xuICAgICAgc2VsZi5kZXN0cm95ID0gZGVzdHJveTtcbiAgICAgIHNlbGYuaXNFbmFibGVkID0gaXNFbmFibGVkO1xuICAgICAgc2VsZi5qdW1wVG9EYXRlID0ganVtcFRvRGF0ZTtcbiAgICAgIHNlbGYub3BlbiA9IG9wZW47XG4gICAgICBzZWxmLnJlZHJhdyA9IHJlZHJhdztcbiAgICAgIHNlbGYuc2V0ID0gc2V0O1xuICAgICAgc2VsZi5zZXREYXRlID0gc2V0RGF0ZTtcbiAgICAgIHNlbGYudG9nZ2xlID0gdG9nZ2xlO1xuXG4gICAgICBmdW5jdGlvbiBzZXR1cEhlbHBlckZ1bmN0aW9ucygpIHtcbiAgICAgICAgc2VsZi51dGlscyA9IHtcbiAgICAgICAgICBnZXREYXlzSW5Nb250aDogZnVuY3Rpb24gZ2V0RGF5c0luTW9udGgobW9udGgsIHlyKSB7XG4gICAgICAgICAgICBpZiAobW9udGggPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICBtb250aCA9IHNlbGYuY3VycmVudE1vbnRoO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoeXIgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICB5ciA9IHNlbGYuY3VycmVudFllYXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtb250aCA9PT0gMSAmJiAoeXIgJSA0ID09PSAwICYmIHlyICUgMTAwICE9PSAwIHx8IHlyICUgNDAwID09PSAwKSkgcmV0dXJuIDI5O1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYubDEwbi5kYXlzSW5Nb250aFttb250aF07XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICBzZWxmLmVsZW1lbnQgPSBzZWxmLmlucHV0ID0gZWxlbWVudDtcbiAgICAgICAgc2VsZi5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgcGFyc2VDb25maWcoKTtcbiAgICAgICAgc2V0dXBMb2NhbGUoKTtcbiAgICAgICAgc2V0dXBJbnB1dHMoKTtcbiAgICAgICAgc2V0dXBEYXRlcygpO1xuICAgICAgICBzZXR1cEhlbHBlckZ1bmN0aW9ucygpO1xuICAgICAgICBpZiAoIXNlbGYuaXNNb2JpbGUpIGJ1aWxkKCk7XG4gICAgICAgIGJpbmRFdmVudHMoKTtcblxuICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCB8fCBzZWxmLmNvbmZpZy5ub0NhbGVuZGFyKSB7XG4gICAgICAgICAgaWYgKHNlbGYuY29uZmlnLmVuYWJsZVRpbWUpIHtcbiAgICAgICAgICAgIHNldEhvdXJzRnJvbURhdGUoc2VsZi5jb25maWcubm9DYWxlbmRhciA/IHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqIHx8IHNlbGYuY29uZmlnLm1pbkRhdGUgOiB1bmRlZmluZWQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHVwZGF0ZVZhbHVlKGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuc2hvd1RpbWVJbnB1dCA9IHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggPiAwIHx8IHNlbGYuY29uZmlnLm5vQ2FsZW5kYXI7XG5cbiAgICAgICAgaWYgKHNlbGYuZGF5c0NvbnRhaW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgdmFyIGRheXNXaWR0aCA9IChzZWxmLmRheXNDb250YWluZXIub2Zmc2V0V2lkdGggKyAxKSAqIHNlbGYuY29uZmlnLnNob3dNb250aHM7XG4gICAgICAgICAgc2VsZi5kYXlzQ29udGFpbmVyLnN0eWxlLndpZHRoID0gZGF5c1dpZHRoICsgXCJweFwiO1xuICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuc3R5bGUud2lkdGggPSBkYXlzV2lkdGggKyBcInB4XCI7XG5cbiAgICAgICAgICBpZiAoc2VsZi53ZWVrV3JhcHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnN0eWxlLndpZHRoID0gZGF5c1dpZHRoICsgc2VsZi53ZWVrV3JhcHBlci5vZmZzZXRXaWR0aCArIFwicHhcIjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIjtcbiAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlzU2FmYXJpID0gL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuICAgICAgICBpZiAoIXNlbGYuaXNNb2JpbGUgJiYgaXNTYWZhcmkpIHtcbiAgICAgICAgICBwb3NpdGlvbkNhbGVuZGFyKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvblJlYWR5XCIpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBiaW5kVG9JbnN0YW5jZShmbikge1xuICAgICAgICByZXR1cm4gZm4uYmluZChzZWxmKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdXBkYXRlVGltZShlKSB7XG4gICAgICAgIGlmIChzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICAgIHRpbWVXcmFwcGVyKGUpO1xuXG4gICAgICAgIGlmIChlLnR5cGUgIT09IFwiaW5wdXRcIikge1xuICAgICAgICAgIHNldEhvdXJzRnJvbUlucHV0cygpO1xuICAgICAgICAgIHVwZGF0ZVZhbHVlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZXRIb3Vyc0Zyb21JbnB1dHMoKTtcbiAgICAgICAgICAgIHVwZGF0ZVZhbHVlKCk7XG4gICAgICAgICAgfSwgREVCT1VOQ0VEX0NIQU5HRV9NUyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYW1wbTJtaWxpdGFyeShob3VyLCBhbVBNKSB7XG4gICAgICAgIHJldHVybiBob3VyICUgMTIgKyAxMiAqIGludChhbVBNID09PSBzZWxmLmwxMG4uYW1QTVsxXSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG1pbGl0YXJ5MmFtcG0oaG91cikge1xuICAgICAgICBzd2l0Y2ggKGhvdXIgJSAyNCkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgcmV0dXJuIDEyO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBob3VyICUgMTI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2V0SG91cnNGcm9tSW5wdXRzKCkge1xuICAgICAgICBpZiAoc2VsZi5ob3VyRWxlbWVudCA9PT0gdW5kZWZpbmVkIHx8IHNlbGYubWludXRlRWxlbWVudCA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgICAgIHZhciBob3VycyA9IChwYXJzZUludChzZWxmLmhvdXJFbGVtZW50LnZhbHVlLnNsaWNlKC0yKSwgMTApIHx8IDApICUgMjQsXG4gICAgICAgICAgICBtaW51dGVzID0gKHBhcnNlSW50KHNlbGYubWludXRlRWxlbWVudC52YWx1ZSwgMTApIHx8IDApICUgNjAsXG4gICAgICAgICAgICBzZWNvbmRzID0gc2VsZi5zZWNvbmRFbGVtZW50ICE9PSB1bmRlZmluZWQgPyAocGFyc2VJbnQoc2VsZi5zZWNvbmRFbGVtZW50LnZhbHVlLCAxMCkgfHwgMCkgJSA2MCA6IDA7XG4gICAgICAgIGlmIChzZWxmLmFtUE0gIT09IHVuZGVmaW5lZCkgaG91cnMgPSBhbXBtMm1pbGl0YXJ5KGhvdXJzLCBzZWxmLmFtUE0udGV4dENvbnRlbnQpO1xuICAgICAgICB2YXIgbGltaXRNaW5Ib3VycyA9IHNlbGYuY29uZmlnLm1pblRpbWUgIT09IHVuZGVmaW5lZCB8fCBzZWxmLmNvbmZpZy5taW5EYXRlICYmIHNlbGYubWluRGF0ZUhhc1RpbWUgJiYgc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogJiYgY29tcGFyZURhdGVzKHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqLCBzZWxmLmNvbmZpZy5taW5EYXRlLCB0cnVlKSA9PT0gMDtcbiAgICAgICAgdmFyIGxpbWl0TWF4SG91cnMgPSBzZWxmLmNvbmZpZy5tYXhUaW1lICE9PSB1bmRlZmluZWQgfHwgc2VsZi5jb25maWcubWF4RGF0ZSAmJiBzZWxmLm1heERhdGVIYXNUaW1lICYmIHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqICYmIGNvbXBhcmVEYXRlcyhzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiwgc2VsZi5jb25maWcubWF4RGF0ZSwgdHJ1ZSkgPT09IDA7XG5cbiAgICAgICAgaWYgKGxpbWl0TWF4SG91cnMpIHtcbiAgICAgICAgICB2YXIgbWF4VGltZSA9IHNlbGYuY29uZmlnLm1heFRpbWUgIT09IHVuZGVmaW5lZCA/IHNlbGYuY29uZmlnLm1heFRpbWUgOiBzZWxmLmNvbmZpZy5tYXhEYXRlO1xuICAgICAgICAgIGhvdXJzID0gTWF0aC5taW4oaG91cnMsIG1heFRpbWUuZ2V0SG91cnMoKSk7XG4gICAgICAgICAgaWYgKGhvdXJzID09PSBtYXhUaW1lLmdldEhvdXJzKCkpIG1pbnV0ZXMgPSBNYXRoLm1pbihtaW51dGVzLCBtYXhUaW1lLmdldE1pbnV0ZXMoKSk7XG4gICAgICAgICAgaWYgKG1pbnV0ZXMgPT09IG1heFRpbWUuZ2V0TWludXRlcygpKSBzZWNvbmRzID0gTWF0aC5taW4oc2Vjb25kcywgbWF4VGltZS5nZXRTZWNvbmRzKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpbWl0TWluSG91cnMpIHtcbiAgICAgICAgICB2YXIgbWluVGltZSA9IHNlbGYuY29uZmlnLm1pblRpbWUgIT09IHVuZGVmaW5lZCA/IHNlbGYuY29uZmlnLm1pblRpbWUgOiBzZWxmLmNvbmZpZy5taW5EYXRlO1xuICAgICAgICAgIGhvdXJzID0gTWF0aC5tYXgoaG91cnMsIG1pblRpbWUuZ2V0SG91cnMoKSk7XG4gICAgICAgICAgaWYgKGhvdXJzID09PSBtaW5UaW1lLmdldEhvdXJzKCkpIG1pbnV0ZXMgPSBNYXRoLm1heChtaW51dGVzLCBtaW5UaW1lLmdldE1pbnV0ZXMoKSk7XG4gICAgICAgICAgaWYgKG1pbnV0ZXMgPT09IG1pblRpbWUuZ2V0TWludXRlcygpKSBzZWNvbmRzID0gTWF0aC5tYXgoc2Vjb25kcywgbWluVGltZS5nZXRTZWNvbmRzKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0SG91cnMoaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzZXRIb3Vyc0Zyb21EYXRlKGRhdGVPYmopIHtcbiAgICAgICAgdmFyIGRhdGUgPSBkYXRlT2JqIHx8IHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqO1xuICAgICAgICBpZiAoZGF0ZSkgc2V0SG91cnMoZGF0ZS5nZXRIb3VycygpLCBkYXRlLmdldE1pbnV0ZXMoKSwgZGF0ZS5nZXRTZWNvbmRzKCkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzZXRIb3Vycyhob3VycywgbWludXRlcywgc2Vjb25kcykge1xuICAgICAgICBpZiAoc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqLnNldEhvdXJzKGhvdXJzICUgMjQsIG1pbnV0ZXMsIHNlY29uZHMgfHwgMCwgMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNlbGYuaG91ckVsZW1lbnQgfHwgIXNlbGYubWludXRlRWxlbWVudCB8fCBzZWxmLmlzTW9iaWxlKSByZXR1cm47XG4gICAgICAgIHNlbGYuaG91ckVsZW1lbnQudmFsdWUgPSBwYWQoIXNlbGYuY29uZmlnLnRpbWVfMjRociA/ICgxMiArIGhvdXJzKSAlIDEyICsgMTIgKiBpbnQoaG91cnMgJSAxMiA9PT0gMCkgOiBob3Vycyk7XG4gICAgICAgIHNlbGYubWludXRlRWxlbWVudC52YWx1ZSA9IHBhZChtaW51dGVzKTtcbiAgICAgICAgaWYgKHNlbGYuYW1QTSAhPT0gdW5kZWZpbmVkKSBzZWxmLmFtUE0udGV4dENvbnRlbnQgPSBzZWxmLmwxMG4uYW1QTVtpbnQoaG91cnMgPj0gMTIpXTtcbiAgICAgICAgaWYgKHNlbGYuc2Vjb25kRWxlbWVudCAhPT0gdW5kZWZpbmVkKSBzZWxmLnNlY29uZEVsZW1lbnQudmFsdWUgPSBwYWQoc2Vjb25kcyk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG9uWWVhcklucHV0KGV2ZW50KSB7XG4gICAgICAgIHZhciB5ZWFyID0gcGFyc2VJbnQoZXZlbnQudGFyZ2V0LnZhbHVlKSArIChldmVudC5kZWx0YSB8fCAwKTtcblxuICAgICAgICBpZiAoeWVhci50b1N0cmluZygpLmxlbmd0aCA9PT0gNCB8fCBldmVudC5rZXkgPT09IFwiRW50ZXJcIikge1xuICAgICAgICAgIGV2ZW50LnRhcmdldC5ibHVyKCk7XG4gICAgICAgICAgaWYgKCEvW15cXGRdLy50ZXN0KHllYXIudG9TdHJpbmcoKSkpIGNoYW5nZVllYXIoeWVhcik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYmluZChlbGVtZW50LCBldmVudCwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBBcnJheSkgcmV0dXJuIGV2ZW50LmZvckVhY2goZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgcmV0dXJuIGJpbmQoZWxlbWVudCwgZXYsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBBcnJheSkgcmV0dXJuIGVsZW1lbnQuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICByZXR1cm4gYmluZChlbCwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcblxuICAgICAgICBzZWxmLl9oYW5kbGVycy5wdXNoKHtcbiAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICBoYW5kbGVyOiBoYW5kbGVyXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBvbkNsaWNrKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICBldnQud2hpY2ggPT09IDEgJiYgaGFuZGxlcihldnQpO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0cmlnZ2VyQ2hhbmdlKCkge1xuICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvbkNoYW5nZVwiKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYmluZEV2ZW50cygpIHtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLndyYXApIHtcbiAgICAgICAgICBbXCJvcGVuXCIsIFwiY2xvc2VcIiwgXCJ0b2dnbGVcIiwgXCJjbGVhclwiXS5mb3JFYWNoKGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoc2VsZi5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1cIiArIGV2dCArIFwiXVwiKSwgZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAgIHJldHVybiBiaW5kKGVsLCBcImNsaWNrXCIsIHNlbGZbZXZ0XSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWxmLmlzTW9iaWxlKSB7XG4gICAgICAgICAgc2V0dXBNb2JpbGUoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGVib3VuY2VkUmVzaXplID0gZGVib3VuY2Uob25SZXNpemUsIDUwKTtcbiAgICAgICAgc2VsZi5fZGVib3VuY2VkQ2hhbmdlID0gZGVib3VuY2UodHJpZ2dlckNoYW5nZSwgREVCT1VOQ0VEX0NIQU5HRV9NUyk7XG4gICAgICAgIGlmIChzZWxmLmRheXNDb250YWluZXIgJiYgIS9pUGhvbmV8aVBhZHxpUG9kL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkgYmluZChzZWxmLmRheXNDb250YWluZXIsIFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1vZGUgPT09IFwicmFuZ2VcIikgb25Nb3VzZU92ZXIoZS50YXJnZXQpO1xuICAgICAgICB9KTtcbiAgICAgICAgYmluZCh3aW5kb3cuZG9jdW1lbnQuYm9keSwgXCJrZXlkb3duXCIsIG9uS2V5RG93bik7XG4gICAgICAgIGlmICghc2VsZi5jb25maWcuc3RhdGljKSBiaW5kKHNlbGYuX2lucHV0LCBcImtleWRvd25cIiwgb25LZXlEb3duKTtcbiAgICAgICAgaWYgKCFzZWxmLmNvbmZpZy5pbmxpbmUgJiYgIXNlbGYuY29uZmlnLnN0YXRpYykgYmluZCh3aW5kb3csIFwicmVzaXplXCIsIGRlYm91bmNlZFJlc2l6ZSk7XG4gICAgICAgIGlmICh3aW5kb3cub250b3VjaHN0YXJ0ICE9PSB1bmRlZmluZWQpIGJpbmQod2luZG93LmRvY3VtZW50LCBcInRvdWNoc3RhcnRcIiwgZG9jdW1lbnRDbGljayk7XG4gICAgICAgIGJpbmQod2luZG93LmRvY3VtZW50LCBcIm1vdXNlZG93blwiLCBvbkNsaWNrKGRvY3VtZW50Q2xpY2spKTtcbiAgICAgICAgYmluZCh3aW5kb3cuZG9jdW1lbnQsIFwiZm9jdXNcIiwgZG9jdW1lbnRDbGljaywge1xuICAgICAgICAgIGNhcHR1cmU6IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLmNsaWNrT3BlbnMgPT09IHRydWUpIHtcbiAgICAgICAgICBiaW5kKHNlbGYuX2lucHV0LCBcImZvY3VzXCIsIHNlbGYub3Blbik7XG4gICAgICAgICAgYmluZChzZWxmLl9pbnB1dCwgXCJtb3VzZWRvd25cIiwgb25DbGljayhzZWxmLm9wZW4pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWxmLmRheXNDb250YWluZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGJpbmQoc2VsZi5tb250aE5hdiwgXCJtb3VzZWRvd25cIiwgb25DbGljayhvbk1vbnRoTmF2Q2xpY2spKTtcbiAgICAgICAgICBiaW5kKHNlbGYubW9udGhOYXYsIFtcImtleXVwXCIsIFwiaW5jcmVtZW50XCJdLCBvblllYXJJbnB1dCk7XG4gICAgICAgICAgYmluZChzZWxmLmRheXNDb250YWluZXIsIFwibW91c2Vkb3duXCIsIG9uQ2xpY2soc2VsZWN0RGF0ZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGYudGltZUNvbnRhaW5lciAhPT0gdW5kZWZpbmVkICYmIHNlbGYubWludXRlRWxlbWVudCAhPT0gdW5kZWZpbmVkICYmIHNlbGYuaG91ckVsZW1lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBzZWxUZXh0ID0gZnVuY3Rpb24gc2VsVGV4dChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZS50YXJnZXQuc2VsZWN0KCk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGJpbmQoc2VsZi50aW1lQ29udGFpbmVyLCBbXCJpbnB1dFwiLCBcImluY3JlbWVudFwiXSwgdXBkYXRlVGltZSk7XG4gICAgICAgICAgYmluZChzZWxmLnRpbWVDb250YWluZXIsIFwibW91c2Vkb3duXCIsIG9uQ2xpY2sodGltZUluY3JlbWVudCkpO1xuICAgICAgICAgIGJpbmQoc2VsZi50aW1lQ29udGFpbmVyLCBbXCJpbnB1dFwiLCBcImluY3JlbWVudFwiXSwgc2VsZi5fZGVib3VuY2VkQ2hhbmdlLCB7XG4gICAgICAgICAgICBwYXNzaXZlOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYmluZChbc2VsZi5ob3VyRWxlbWVudCwgc2VsZi5taW51dGVFbGVtZW50XSwgW1wiZm9jdXNcIiwgXCJjbGlja1wiXSwgc2VsVGV4dCk7XG4gICAgICAgICAgaWYgKHNlbGYuc2Vjb25kRWxlbWVudCAhPT0gdW5kZWZpbmVkKSBiaW5kKHNlbGYuc2Vjb25kRWxlbWVudCwgXCJmb2N1c1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi5zZWNvbmRFbGVtZW50ICYmIHNlbGYuc2Vjb25kRWxlbWVudC5zZWxlY3QoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChzZWxmLmFtUE0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYmluZChzZWxmLmFtUE0sIFwibW91c2Vkb3duXCIsIG9uQ2xpY2soZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgdXBkYXRlVGltZShlKTtcbiAgICAgICAgICAgICAgdHJpZ2dlckNoYW5nZSgpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBqdW1wVG9EYXRlKGp1bXBEYXRlKSB7XG4gICAgICAgIHZhciBqdW1wVG8gPSBqdW1wRGF0ZSAhPT0gdW5kZWZpbmVkID8gc2VsZi5wYXJzZURhdGUoanVtcERhdGUpIDogc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogfHwgKHNlbGYuY29uZmlnLm1pbkRhdGUgJiYgc2VsZi5jb25maWcubWluRGF0ZSA+IHNlbGYubm93ID8gc2VsZi5jb25maWcubWluRGF0ZSA6IHNlbGYuY29uZmlnLm1heERhdGUgJiYgc2VsZi5jb25maWcubWF4RGF0ZSA8IHNlbGYubm93ID8gc2VsZi5jb25maWcubWF4RGF0ZSA6IHNlbGYubm93KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChqdW1wVG8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc2VsZi5jdXJyZW50WWVhciA9IGp1bXBUby5nZXRGdWxsWWVhcigpO1xuICAgICAgICAgICAgc2VsZi5jdXJyZW50TW9udGggPSBqdW1wVG8uZ2V0TW9udGgoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBlLm1lc3NhZ2UgPSBcIkludmFsaWQgZGF0ZSBzdXBwbGllZDogXCIgKyBqdW1wVG87XG4gICAgICAgICAgc2VsZi5jb25maWcuZXJyb3JIYW5kbGVyKGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5yZWRyYXcoKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdGltZUluY3JlbWVudChlKSB7XG4gICAgICAgIGlmICh+ZS50YXJnZXQuY2xhc3NOYW1lLmluZGV4T2YoXCJhcnJvd1wiKSkgaW5jcmVtZW50TnVtSW5wdXQoZSwgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiYXJyb3dVcFwiKSA/IDEgOiAtMSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGluY3JlbWVudE51bUlucHV0KGUsIGRlbHRhLCBpbnB1dEVsZW0pIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IGUgJiYgZS50YXJnZXQ7XG4gICAgICAgIHZhciBpbnB1dCA9IGlucHV0RWxlbSB8fCB0YXJnZXQgJiYgdGFyZ2V0LnBhcmVudE5vZGUgJiYgdGFyZ2V0LnBhcmVudE5vZGUuZmlyc3RDaGlsZDtcbiAgICAgICAgdmFyIGV2ZW50ID0gY3JlYXRlRXZlbnQoXCJpbmNyZW1lbnRcIik7XG4gICAgICAgIGV2ZW50LmRlbHRhID0gZGVsdGE7XG4gICAgICAgIGlucHV0ICYmIGlucHV0LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBidWlsZCgpIHtcbiAgICAgICAgdmFyIGZyYWdtZW50ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJmbGF0cGlja3ItY2FsZW5kYXJcIik7XG4gICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIudGFiSW5kZXggPSAtMTtcblxuICAgICAgICBpZiAoIXNlbGYuY29uZmlnLm5vQ2FsZW5kYXIpIHtcbiAgICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChidWlsZE1vbnRoTmF2KCkpO1xuICAgICAgICAgIHNlbGYuaW5uZXJDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLWlubmVyQ29udGFpbmVyXCIpO1xuXG4gICAgICAgICAgaWYgKHNlbGYuY29uZmlnLndlZWtOdW1iZXJzKSB7XG4gICAgICAgICAgICB2YXIgX2J1aWxkV2Vla3MgPSBidWlsZFdlZWtzKCksXG4gICAgICAgICAgICAgICAgd2Vla1dyYXBwZXIgPSBfYnVpbGRXZWVrcy53ZWVrV3JhcHBlcixcbiAgICAgICAgICAgICAgICB3ZWVrTnVtYmVycyA9IF9idWlsZFdlZWtzLndlZWtOdW1iZXJzO1xuXG4gICAgICAgICAgICBzZWxmLmlubmVyQ29udGFpbmVyLmFwcGVuZENoaWxkKHdlZWtXcmFwcGVyKTtcbiAgICAgICAgICAgIHNlbGYud2Vla051bWJlcnMgPSB3ZWVrTnVtYmVycztcbiAgICAgICAgICAgIHNlbGYud2Vla1dyYXBwZXIgPSB3ZWVrV3JhcHBlcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWxmLnJDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLXJDb250YWluZXJcIik7XG4gICAgICAgICAgc2VsZi5yQ29udGFpbmVyLmFwcGVuZENoaWxkKGJ1aWxkV2Vla2RheXMoKSk7XG5cbiAgICAgICAgICBpZiAoIXNlbGYuZGF5c0NvbnRhaW5lcikge1xuICAgICAgICAgICAgc2VsZi5kYXlzQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImZsYXRwaWNrci1kYXlzXCIpO1xuICAgICAgICAgICAgc2VsZi5kYXlzQ29udGFpbmVyLnRhYkluZGV4ID0gLTE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnVpbGREYXlzKCk7XG4gICAgICAgICAgc2VsZi5yQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlbGYuZGF5c0NvbnRhaW5lcik7XG4gICAgICAgICAgc2VsZi5pbm5lckNvbnRhaW5lci5hcHBlbmRDaGlsZChzZWxmLnJDb250YWluZXIpO1xuICAgICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKHNlbGYuaW5uZXJDb250YWluZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLmVuYWJsZVRpbWUpIHtcbiAgICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChidWlsZFRpbWUoKSk7XG4gICAgICAgIH1cblxuICAgICAgICB0b2dnbGVDbGFzcyhzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCBcInJhbmdlTW9kZVwiLCBzZWxmLmNvbmZpZy5tb2RlID09PSBcInJhbmdlXCIpO1xuICAgICAgICB0b2dnbGVDbGFzcyhzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCBcImFuaW1hdGVcIiwgc2VsZi5jb25maWcuYW5pbWF0ZSA9PT0gdHJ1ZSk7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHNlbGYuY2FsZW5kYXJDb250YWluZXIsIFwibXVsdGlNb250aFwiLCBzZWxmLmNvbmZpZy5zaG93TW9udGhzID4gMSk7XG4gICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpO1xuICAgICAgICB2YXIgY3VzdG9tQXBwZW5kID0gc2VsZi5jb25maWcuYXBwZW5kVG8gIT09IHVuZGVmaW5lZCAmJiBzZWxmLmNvbmZpZy5hcHBlbmRUby5ub2RlVHlwZSAhPT0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5pbmxpbmUgfHwgc2VsZi5jb25maWcuc3RhdGljKSB7XG4gICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKHNlbGYuY29uZmlnLmlubGluZSA/IFwiaW5saW5lXCIgOiBcInN0YXRpY1wiKTtcblxuICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5pbmxpbmUpIHtcbiAgICAgICAgICAgIGlmICghY3VzdG9tQXBwZW5kICYmIHNlbGYuZWxlbWVudC5wYXJlbnROb2RlKSBzZWxmLmVsZW1lbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2VsZi5jYWxlbmRhckNvbnRhaW5lciwgc2VsZi5faW5wdXQubmV4dFNpYmxpbmcpO2Vsc2UgaWYgKHNlbGYuY29uZmlnLmFwcGVuZFRvICE9PSB1bmRlZmluZWQpIHNlbGYuY29uZmlnLmFwcGVuZFRvLmFwcGVuZENoaWxkKHNlbGYuY2FsZW5kYXJDb250YWluZXIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5zdGF0aWMpIHtcbiAgICAgICAgICAgIHZhciB3cmFwcGVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImZsYXRwaWNrci13cmFwcGVyXCIpO1xuICAgICAgICAgICAgaWYgKHNlbGYuZWxlbWVudC5wYXJlbnROb2RlKSBzZWxmLmVsZW1lbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUod3JhcHBlciwgc2VsZi5lbGVtZW50KTtcbiAgICAgICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoc2VsZi5lbGVtZW50KTtcbiAgICAgICAgICAgIGlmIChzZWxmLmFsdElucHV0KSB3cmFwcGVyLmFwcGVuZENoaWxkKHNlbGYuYWx0SW5wdXQpO1xuICAgICAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChzZWxmLmNhbGVuZGFyQ29udGFpbmVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNlbGYuY29uZmlnLnN0YXRpYyAmJiAhc2VsZi5jb25maWcuaW5saW5lKSAoc2VsZi5jb25maWcuYXBwZW5kVG8gIT09IHVuZGVmaW5lZCA/IHNlbGYuY29uZmlnLmFwcGVuZFRvIDogd2luZG93LmRvY3VtZW50LmJvZHkpLmFwcGVuZENoaWxkKHNlbGYuY2FsZW5kYXJDb250YWluZXIpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjcmVhdGVEYXkoY2xhc3NOYW1lLCBkYXRlLCBkYXlOdW1iZXIsIGkpIHtcbiAgICAgICAgdmFyIGRhdGVJc0VuYWJsZWQgPSBpc0VuYWJsZWQoZGF0ZSwgdHJ1ZSksXG4gICAgICAgICAgICBkYXlFbGVtZW50ID0gY3JlYXRlRWxlbWVudChcInNwYW5cIiwgXCJmbGF0cGlja3ItZGF5IFwiICsgY2xhc3NOYW1lLCBkYXRlLmdldERhdGUoKS50b1N0cmluZygpKTtcbiAgICAgICAgZGF5RWxlbWVudC5kYXRlT2JqID0gZGF0ZTtcbiAgICAgICAgZGF5RWxlbWVudC4kaSA9IGk7XG4gICAgICAgIGRheUVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBzZWxmLmZvcm1hdERhdGUoZGF0ZSwgc2VsZi5jb25maWcuYXJpYURhdGVGb3JtYXQpKTtcblxuICAgICAgICBpZiAoY29tcGFyZURhdGVzKGRhdGUsIHNlbGYubm93KSA9PT0gMCkge1xuICAgICAgICAgIHNlbGYudG9kYXlEYXRlRWxlbSA9IGRheUVsZW1lbnQ7XG4gICAgICAgICAgZGF5RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidG9kYXlcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGF0ZUlzRW5hYmxlZCkge1xuICAgICAgICAgIGRheUVsZW1lbnQudGFiSW5kZXggPSAtMTtcblxuICAgICAgICAgIGlmIChpc0RhdGVTZWxlY3RlZChkYXRlKSkge1xuICAgICAgICAgICAgZGF5RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwic2VsZWN0ZWRcIik7XG4gICAgICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZUVsZW0gPSBkYXlFbGVtZW50O1xuXG4gICAgICAgICAgICBpZiAoc2VsZi5jb25maWcubW9kZSA9PT0gXCJyYW5nZVwiKSB7XG4gICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKGRheUVsZW1lbnQsIFwic3RhcnRSYW5nZVwiLCBzZWxmLnNlbGVjdGVkRGF0ZXNbMF0gJiYgY29tcGFyZURhdGVzKGRhdGUsIHNlbGYuc2VsZWN0ZWREYXRlc1swXSwgdHJ1ZSkgPT09IDApO1xuICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhkYXlFbGVtZW50LCBcImVuZFJhbmdlXCIsIHNlbGYuc2VsZWN0ZWREYXRlc1sxXSAmJiBjb21wYXJlRGF0ZXMoZGF0ZSwgc2VsZi5zZWxlY3RlZERhdGVzWzFdLCB0cnVlKSA9PT0gMCk7XG4gICAgICAgICAgICAgIGlmIChjbGFzc05hbWUgPT09IFwibmV4dE1vbnRoRGF5XCIpIGRheUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImluUmFuZ2VcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRheUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImRpc2FibGVkXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1vZGUgPT09IFwicmFuZ2VcIikge1xuICAgICAgICAgIGlmIChpc0RhdGVJblJhbmdlKGRhdGUpICYmICFpc0RhdGVTZWxlY3RlZChkYXRlKSkgZGF5RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaW5SYW5nZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWxmLndlZWtOdW1iZXJzICYmIHNlbGYuY29uZmlnLnNob3dNb250aHMgPT09IDEgJiYgY2xhc3NOYW1lICE9PSBcInByZXZNb250aERheVwiICYmIGRheU51bWJlciAlIDcgPT09IDEpIHtcbiAgICAgICAgICBzZWxmLndlZWtOdW1iZXJzLmluc2VydEFkamFjZW50SFRNTChcImJlZm9yZWVuZFwiLCBcIjxzcGFuIGNsYXNzPSdmbGF0cGlja3ItZGF5Jz5cIiArIHNlbGYuY29uZmlnLmdldFdlZWsoZGF0ZSkgKyBcIjwvc3Bhbj5cIik7XG4gICAgICAgIH1cblxuICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvbkRheUNyZWF0ZVwiLCBkYXlFbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIGRheUVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGZvY3VzT25EYXkoY3VycmVudEluZCwgb2Zmc2V0KSB7XG4gICAgICAgIHZhciBjdXJyZW50SW5kZXggPSBjdXJyZW50SW5kICE9PSB1bmRlZmluZWQgPyBjdXJyZW50SW5kIDogZG9jdW1lbnQuYWN0aXZlRWxlbWVudC4kaTtcbiAgICAgICAgdmFyIG5ld0luZGV4ID0gKGN1cnJlbnRJbmRleCB8fCAwKSArIG9mZnNldCB8fCAwLFxuICAgICAgICAgICAgdGFyZ2V0Tm9kZSA9IEFycmF5LnByb3RvdHlwZS5maW5kLmNhbGwoc2VsZi5kYXlzLmNoaWxkcmVuLCBmdW5jdGlvbiAoYywgaSkge1xuICAgICAgICAgIHJldHVybiBpID49IG5ld0luZGV4ICYmIGMuY2xhc3NOYW1lLmluZGV4T2YoXCJNb250aERheVwiKSA9PT0gLTEgJiYgaXNFbmFibGVkKGMuZGF0ZU9iaik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0YXJnZXROb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0YXJnZXROb2RlLmZvY3VzKCk7XG4gICAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1vZGUgPT09IFwicmFuZ2VcIikgb25Nb3VzZU92ZXIodGFyZ2V0Tm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYnVpbGRNb250aERheXMoeWVhciwgbW9udGgpIHtcbiAgICAgICAgdmFyIGZpcnN0T2ZNb250aCA9IChuZXcgRGF0ZSh5ZWFyLCBtb250aCwgMSkuZ2V0RGF5KCkgLSBzZWxmLmwxMG4uZmlyc3REYXlPZldlZWsgKyA3KSAlIDc7XG4gICAgICAgIHZhciBwcmV2TW9udGhEYXlzID0gc2VsZi51dGlscy5nZXREYXlzSW5Nb250aCgobW9udGggLSAxICsgMTIpICUgMTIpO1xuICAgICAgICB2YXIgZGF5c0luTW9udGggPSBzZWxmLnV0aWxzLmdldERheXNJbk1vbnRoKG1vbnRoKSxcbiAgICAgICAgICAgIGRheXMgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICB2YXIgZGF5TnVtYmVyID0gcHJldk1vbnRoRGF5cyArIDEgLSBmaXJzdE9mTW9udGgsXG4gICAgICAgICAgICBkYXlJbmRleCA9IDA7XG5cbiAgICAgICAgZm9yICg7IGRheU51bWJlciA8PSBwcmV2TW9udGhEYXlzOyBkYXlOdW1iZXIrKywgZGF5SW5kZXgrKykge1xuICAgICAgICAgIGRheXMuYXBwZW5kQ2hpbGQoY3JlYXRlRGF5KFwicHJldk1vbnRoRGF5XCIsIG5ldyBEYXRlKHllYXIsIG1vbnRoIC0gMSwgZGF5TnVtYmVyKSwgZGF5TnVtYmVyLCBkYXlJbmRleCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChkYXlOdW1iZXIgPSAxOyBkYXlOdW1iZXIgPD0gZGF5c0luTW9udGg7IGRheU51bWJlcisrLCBkYXlJbmRleCsrKSB7XG4gICAgICAgICAgZGF5cy5hcHBlbmRDaGlsZChjcmVhdGVEYXkoXCJcIiwgbmV3IERhdGUoeWVhciwgbW9udGgsIGRheU51bWJlciksIGRheU51bWJlciwgZGF5SW5kZXgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGRheU51bSA9IGRheXNJbk1vbnRoICsgMTsgZGF5TnVtIDw9IDQyIC0gZmlyc3RPZk1vbnRoICYmIChzZWxmLmNvbmZpZy5zaG93TW9udGhzID09PSAxIHx8IGRheUluZGV4ICUgNyAhPT0gMCk7IGRheU51bSsrLCBkYXlJbmRleCsrKSB7XG4gICAgICAgICAgZGF5cy5hcHBlbmRDaGlsZChjcmVhdGVEYXkoXCJuZXh0TW9udGhEYXlcIiwgbmV3IERhdGUoeWVhciwgbW9udGggKyAxLCBkYXlOdW0gJSBkYXlzSW5Nb250aCksIGRheU51bSwgZGF5SW5kZXgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkYXlDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZGF5Q29udGFpbmVyXCIpO1xuICAgICAgICBkYXlDb250YWluZXIuYXBwZW5kQ2hpbGQoZGF5cyk7XG4gICAgICAgIHJldHVybiBkYXlDb250YWluZXI7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGJ1aWxkRGF5cygpIHtcbiAgICAgICAgaWYgKHNlbGYuZGF5c0NvbnRhaW5lciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY2xlYXJOb2RlKHNlbGYuZGF5c0NvbnRhaW5lcik7XG4gICAgICAgIGlmIChzZWxmLndlZWtOdW1iZXJzKSBjbGVhck5vZGUoc2VsZi53ZWVrTnVtYmVycyk7XG4gICAgICAgIHZhciBmcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5jb25maWcuc2hvd01vbnRoczsgaSsrKSB7XG4gICAgICAgICAgdmFyIGQgPSBuZXcgRGF0ZShzZWxmLmN1cnJlbnRZZWFyLCBzZWxmLmN1cnJlbnRNb250aCwgMSk7XG4gICAgICAgICAgZC5zZXRNb250aChzZWxmLmN1cnJlbnRNb250aCArIGkpO1xuICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQoYnVpbGRNb250aERheXMoZC5nZXRGdWxsWWVhcigpLCBkLmdldE1vbnRoKCkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuZGF5c0NvbnRhaW5lci5hcHBlbmRDaGlsZChmcmFnKTtcbiAgICAgICAgc2VsZi5kYXlzID0gc2VsZi5kYXlzQ29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGJ1aWxkTW9udGgoKSB7XG4gICAgICAgIHZhciBjb250YWluZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLW1vbnRoXCIpO1xuICAgICAgICB2YXIgbW9udGhOYXZGcmFnbWVudCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICAgIHZhciBtb250aEVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KFwic3BhblwiLCBcImN1ci1tb250aFwiKTtcbiAgICAgICAgbW9udGhFbGVtZW50LnRpdGxlID0gc2VsZi5sMTBuLnNjcm9sbFRpdGxlO1xuICAgICAgICB2YXIgeWVhcklucHV0ID0gY3JlYXRlTnVtYmVySW5wdXQoXCJjdXIteWVhclwiLCB7XG4gICAgICAgICAgdGFiaW5kZXg6IFwiLTFcIlxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHllYXJFbGVtZW50ID0geWVhcklucHV0LmNoaWxkTm9kZXNbMF07XG4gICAgICAgIHllYXJFbGVtZW50LnRpdGxlID0gc2VsZi5sMTBuLnNjcm9sbFRpdGxlO1xuICAgICAgICB5ZWFyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIHNlbGYubDEwbi55ZWFyQXJpYUxhYmVsKTtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1pbkRhdGUpIHllYXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtbWluXCIsIHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0RnVsbFllYXIoKS50b1N0cmluZygpKTtcblxuICAgICAgICBpZiAoc2VsZi5jb25maWcubWF4RGF0ZSkge1xuICAgICAgICAgIHllYXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtbWF4XCIsIHNlbGYuY29uZmlnLm1heERhdGUuZ2V0RnVsbFllYXIoKS50b1N0cmluZygpKTtcbiAgICAgICAgICB5ZWFyRWxlbWVudC5kaXNhYmxlZCA9ICEhc2VsZi5jb25maWcubWluRGF0ZSAmJiBzZWxmLmNvbmZpZy5taW5EYXRlLmdldEZ1bGxZZWFyKCkgPT09IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjdXJyZW50TW9udGggPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLWN1cnJlbnQtbW9udGhcIik7XG4gICAgICAgIGN1cnJlbnRNb250aC5hcHBlbmRDaGlsZChtb250aEVsZW1lbnQpO1xuICAgICAgICBjdXJyZW50TW9udGguYXBwZW5kQ2hpbGQoeWVhcklucHV0KTtcbiAgICAgICAgbW9udGhOYXZGcmFnbWVudC5hcHBlbmRDaGlsZChjdXJyZW50TW9udGgpO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQobW9udGhOYXZGcmFnbWVudCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICAgICAgeWVhckVsZW1lbnQ6IHllYXJFbGVtZW50LFxuICAgICAgICAgIG1vbnRoRWxlbWVudDogbW9udGhFbGVtZW50XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGJ1aWxkTW9udGhOYXYoKSB7XG4gICAgICAgIHNlbGYubW9udGhOYXYgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLW1vbnRoc1wiKTtcbiAgICAgICAgc2VsZi55ZWFyRWxlbWVudHMgPSBbXTtcbiAgICAgICAgc2VsZi5tb250aEVsZW1lbnRzID0gW107XG4gICAgICAgIHNlbGYucHJldk1vbnRoTmF2ID0gY3JlYXRlRWxlbWVudChcInNwYW5cIiwgXCJmbGF0cGlja3ItcHJldi1tb250aFwiKTtcbiAgICAgICAgc2VsZi5wcmV2TW9udGhOYXYuaW5uZXJIVE1MID0gc2VsZi5jb25maWcucHJldkFycm93O1xuICAgICAgICBzZWxmLm5leHRNb250aE5hdiA9IGNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIFwiZmxhdHBpY2tyLW5leHQtbW9udGhcIik7XG4gICAgICAgIHNlbGYubmV4dE1vbnRoTmF2LmlubmVySFRNTCA9IHNlbGYuY29uZmlnLm5leHRBcnJvdztcbiAgICAgICAgc2VsZi5tb250aE5hdi5hcHBlbmRDaGlsZChzZWxmLnByZXZNb250aE5hdik7XG5cbiAgICAgICAgZm9yICh2YXIgbSA9IHNlbGYuY29uZmlnLnNob3dNb250aHM7IG0tLTspIHtcbiAgICAgICAgICB2YXIgbW9udGggPSBidWlsZE1vbnRoKCk7XG4gICAgICAgICAgc2VsZi55ZWFyRWxlbWVudHMucHVzaChtb250aC55ZWFyRWxlbWVudCk7XG4gICAgICAgICAgc2VsZi5tb250aEVsZW1lbnRzLnB1c2gobW9udGgubW9udGhFbGVtZW50KTtcbiAgICAgICAgICBzZWxmLm1vbnRoTmF2LmFwcGVuZENoaWxkKG1vbnRoLmNvbnRhaW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLm1vbnRoTmF2LmFwcGVuZENoaWxkKHNlbGYubmV4dE1vbnRoTmF2KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNlbGYsIFwiX2hpZGVQcmV2TW9udGhBcnJvd1wiLCB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi5fX2hpZGVQcmV2TW9udGhBcnJvdztcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KGJvb2wpIHtcbiAgICAgICAgICAgIGlmIChzZWxmLl9faGlkZVByZXZNb250aEFycm93ICE9PSBib29sKSB7XG4gICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHNlbGYucHJldk1vbnRoTmF2LCBcImRpc2FibGVkXCIsIGJvb2wpO1xuICAgICAgICAgICAgICBzZWxmLl9faGlkZVByZXZNb250aEFycm93ID0gYm9vbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZiwgXCJfaGlkZU5leHRNb250aEFycm93XCIsIHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLl9faGlkZU5leHRNb250aEFycm93O1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoYm9vbCkge1xuICAgICAgICAgICAgaWYgKHNlbGYuX19oaWRlTmV4dE1vbnRoQXJyb3cgIT09IGJvb2wpIHtcbiAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3Moc2VsZi5uZXh0TW9udGhOYXYsIFwiZGlzYWJsZWRcIiwgYm9vbCk7XG4gICAgICAgICAgICAgIHNlbGYuX19oaWRlTmV4dE1vbnRoQXJyb3cgPSBib29sO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHNlbGYuY3VycmVudFllYXJFbGVtZW50ID0gc2VsZi55ZWFyRWxlbWVudHNbMF07XG4gICAgICAgIHVwZGF0ZU5hdmlnYXRpb25DdXJyZW50TW9udGgoKTtcbiAgICAgICAgcmV0dXJuIHNlbGYubW9udGhOYXY7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGJ1aWxkVGltZSgpIHtcbiAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiaGFzVGltZVwiKTtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm5vQ2FsZW5kYXIpIHNlbGYuY2FsZW5kYXJDb250YWluZXIuY2xhc3NMaXN0LmFkZChcIm5vQ2FsZW5kYXJcIik7XG4gICAgICAgIHNlbGYudGltZUNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJmbGF0cGlja3ItdGltZVwiKTtcbiAgICAgICAgc2VsZi50aW1lQ29udGFpbmVyLnRhYkluZGV4ID0gLTE7XG4gICAgICAgIHZhciBzZXBhcmF0b3IgPSBjcmVhdGVFbGVtZW50KFwic3BhblwiLCBcImZsYXRwaWNrci10aW1lLXNlcGFyYXRvclwiLCBcIjpcIik7XG4gICAgICAgIHZhciBob3VySW5wdXQgPSBjcmVhdGVOdW1iZXJJbnB1dChcImZsYXRwaWNrci1ob3VyXCIpO1xuICAgICAgICBzZWxmLmhvdXJFbGVtZW50ID0gaG91cklucHV0LmNoaWxkTm9kZXNbMF07XG4gICAgICAgIHZhciBtaW51dGVJbnB1dCA9IGNyZWF0ZU51bWJlcklucHV0KFwiZmxhdHBpY2tyLW1pbnV0ZVwiKTtcbiAgICAgICAgc2VsZi5taW51dGVFbGVtZW50ID0gbWludXRlSW5wdXQuY2hpbGROb2Rlc1swXTtcbiAgICAgICAgc2VsZi5ob3VyRWxlbWVudC50YWJJbmRleCA9IHNlbGYubWludXRlRWxlbWVudC50YWJJbmRleCA9IC0xO1xuICAgICAgICBzZWxmLmhvdXJFbGVtZW50LnZhbHVlID0gcGFkKHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqID8gc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmouZ2V0SG91cnMoKSA6IHNlbGYuY29uZmlnLnRpbWVfMjRociA/IHNlbGYuY29uZmlnLmRlZmF1bHRIb3VyIDogbWlsaXRhcnkyYW1wbShzZWxmLmNvbmZpZy5kZWZhdWx0SG91cikpO1xuICAgICAgICBzZWxmLm1pbnV0ZUVsZW1lbnQudmFsdWUgPSBwYWQoc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogPyBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iai5nZXRNaW51dGVzKCkgOiBzZWxmLmNvbmZpZy5kZWZhdWx0TWludXRlKTtcbiAgICAgICAgc2VsZi5ob3VyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN0ZXBcIiwgc2VsZi5jb25maWcuaG91ckluY3JlbWVudC50b1N0cmluZygpKTtcbiAgICAgICAgc2VsZi5taW51dGVFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtc3RlcFwiLCBzZWxmLmNvbmZpZy5taW51dGVJbmNyZW1lbnQudG9TdHJpbmcoKSk7XG4gICAgICAgIHNlbGYuaG91ckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS1taW5cIiwgc2VsZi5jb25maWcudGltZV8yNGhyID8gXCIwXCIgOiBcIjFcIik7XG4gICAgICAgIHNlbGYuaG91ckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS1tYXhcIiwgc2VsZi5jb25maWcudGltZV8yNGhyID8gXCIyM1wiIDogXCIxMlwiKTtcbiAgICAgICAgc2VsZi5taW51dGVFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtbWluXCIsIFwiMFwiKTtcbiAgICAgICAgc2VsZi5taW51dGVFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtbWF4XCIsIFwiNTlcIik7XG4gICAgICAgIHNlbGYudGltZUNvbnRhaW5lci5hcHBlbmRDaGlsZChob3VySW5wdXQpO1xuICAgICAgICBzZWxmLnRpbWVDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VwYXJhdG9yKTtcbiAgICAgICAgc2VsZi50aW1lQ29udGFpbmVyLmFwcGVuZENoaWxkKG1pbnV0ZUlucHV0KTtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLnRpbWVfMjRocikgc2VsZi50aW1lQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJ0aW1lMjRoclwiKTtcblxuICAgICAgICBpZiAoc2VsZi5jb25maWcuZW5hYmxlU2Vjb25kcykge1xuICAgICAgICAgIHNlbGYudGltZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiaGFzU2Vjb25kc1wiKTtcbiAgICAgICAgICB2YXIgc2Vjb25kSW5wdXQgPSBjcmVhdGVOdW1iZXJJbnB1dChcImZsYXRwaWNrci1zZWNvbmRcIik7XG4gICAgICAgICAgc2VsZi5zZWNvbmRFbGVtZW50ID0gc2Vjb25kSW5wdXQuY2hpbGROb2Rlc1swXTtcbiAgICAgICAgICBzZWxmLnNlY29uZEVsZW1lbnQudmFsdWUgPSBwYWQoc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogPyBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iai5nZXRTZWNvbmRzKCkgOiBzZWxmLmNvbmZpZy5kZWZhdWx0U2Vjb25kcyk7XG4gICAgICAgICAgc2VsZi5zZWNvbmRFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtc3RlcFwiLCBzZWxmLm1pbnV0ZUVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdGVwXCIpKTtcbiAgICAgICAgICBzZWxmLnNlY29uZEVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS1taW5cIiwgc2VsZi5taW51dGVFbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtbWluXCIpKTtcbiAgICAgICAgICBzZWxmLnNlY29uZEVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS1tYXhcIiwgc2VsZi5taW51dGVFbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtbWF4XCIpKTtcbiAgICAgICAgICBzZWxmLnRpbWVDb250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlRWxlbWVudChcInNwYW5cIiwgXCJmbGF0cGlja3ItdGltZS1zZXBhcmF0b3JcIiwgXCI6XCIpKTtcbiAgICAgICAgICBzZWxmLnRpbWVDb250YWluZXIuYXBwZW5kQ2hpbGQoc2Vjb25kSW5wdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzZWxmLmNvbmZpZy50aW1lXzI0aHIpIHtcbiAgICAgICAgICBzZWxmLmFtUE0gPSBjcmVhdGVFbGVtZW50KFwic3BhblwiLCBcImZsYXRwaWNrci1hbS1wbVwiLCBzZWxmLmwxMG4uYW1QTVtpbnQoKHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqID8gc2VsZi5ob3VyRWxlbWVudC52YWx1ZSA6IHNlbGYuY29uZmlnLmRlZmF1bHRIb3VyKSA+IDExKV0pO1xuICAgICAgICAgIHNlbGYuYW1QTS50aXRsZSA9IHNlbGYubDEwbi50b2dnbGVUaXRsZTtcbiAgICAgICAgICBzZWxmLmFtUE0udGFiSW5kZXggPSAtMTtcbiAgICAgICAgICBzZWxmLnRpbWVDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VsZi5hbVBNKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZWxmLnRpbWVDb250YWluZXI7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGJ1aWxkV2Vla2RheXMoKSB7XG4gICAgICAgIGlmICghc2VsZi53ZWVrZGF5Q29udGFpbmVyKSBzZWxmLndlZWtkYXlDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLXdlZWtkYXlzXCIpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSBzZWxmLmNvbmZpZy5zaG93TW9udGhzOyBpLS07KSB7XG4gICAgICAgICAgdmFyIGNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJmbGF0cGlja3Itd2Vla2RheWNvbnRhaW5lclwiKTtcbiAgICAgICAgICBzZWxmLndlZWtkYXlDb250YWluZXIuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVwZGF0ZVdlZWtkYXlzKCk7XG4gICAgICAgIHJldHVybiBzZWxmLndlZWtkYXlDb250YWluZXI7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZVdlZWtkYXlzKCkge1xuICAgICAgICB2YXIgZmlyc3REYXlPZldlZWsgPSBzZWxmLmwxMG4uZmlyc3REYXlPZldlZWs7XG4gICAgICAgIHZhciB3ZWVrZGF5cyA9IHNlbGYubDEwbi53ZWVrZGF5cy5zaG9ydGhhbmQuY29uY2F0KCk7XG5cbiAgICAgICAgaWYgKGZpcnN0RGF5T2ZXZWVrID4gMCAmJiBmaXJzdERheU9mV2VlayA8IHdlZWtkYXlzLmxlbmd0aCkge1xuICAgICAgICAgIHdlZWtkYXlzID0gd2Vla2RheXMuc3BsaWNlKGZpcnN0RGF5T2ZXZWVrLCB3ZWVrZGF5cy5sZW5ndGgpLmNvbmNhdCh3ZWVrZGF5cy5zcGxpY2UoMCwgZmlyc3REYXlPZldlZWspKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSBzZWxmLmNvbmZpZy5zaG93TW9udGhzOyBpLS07KSB7XG4gICAgICAgICAgc2VsZi53ZWVrZGF5Q29udGFpbmVyLmNoaWxkcmVuW2ldLmlubmVySFRNTCA9IFwiXFxuICAgICAgPHNwYW4gY2xhc3M9ZmxhdHBpY2tyLXdlZWtkYXk+XFxuICAgICAgICBcIiArIHdlZWtkYXlzLmpvaW4oXCI8L3NwYW4+PHNwYW4gY2xhc3M9ZmxhdHBpY2tyLXdlZWtkYXk+XCIpICsgXCJcXG4gICAgICA8L3NwYW4+XFxuICAgICAgXCI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYnVpbGRXZWVrcygpIHtcbiAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiaGFzV2Vla3NcIik7XG4gICAgICAgIHZhciB3ZWVrV3JhcHBlciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJmbGF0cGlja3Itd2Vla3dyYXBwZXJcIik7XG4gICAgICAgIHdlZWtXcmFwcGVyLmFwcGVuZENoaWxkKGNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIFwiZmxhdHBpY2tyLXdlZWtkYXlcIiwgc2VsZi5sMTBuLndlZWtBYmJyZXZpYXRpb24pKTtcbiAgICAgICAgdmFyIHdlZWtOdW1iZXJzID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImZsYXRwaWNrci13ZWVrc1wiKTtcbiAgICAgICAgd2Vla1dyYXBwZXIuYXBwZW5kQ2hpbGQod2Vla051bWJlcnMpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHdlZWtXcmFwcGVyOiB3ZWVrV3JhcHBlcixcbiAgICAgICAgICB3ZWVrTnVtYmVyczogd2Vla051bWJlcnNcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2hhbmdlTW9udGgodmFsdWUsIGlzX29mZnNldCwgZnJvbV9rZXlib2FyZCkge1xuICAgICAgICBpZiAoaXNfb2Zmc2V0ID09PSB2b2lkIDApIHtcbiAgICAgICAgICBpc19vZmZzZXQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZyb21fa2V5Ym9hcmQgPT09IHZvaWQgMCkge1xuICAgICAgICAgIGZyb21fa2V5Ym9hcmQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkZWx0YSA9IGlzX29mZnNldCA/IHZhbHVlIDogdmFsdWUgLSBzZWxmLmN1cnJlbnRNb250aDtcbiAgICAgICAgaWYgKGRlbHRhIDwgMCAmJiBzZWxmLl9oaWRlUHJldk1vbnRoQXJyb3cgPT09IHRydWUgfHwgZGVsdGEgPiAwICYmIHNlbGYuX2hpZGVOZXh0TW9udGhBcnJvdyA9PT0gdHJ1ZSkgcmV0dXJuO1xuICAgICAgICBzZWxmLmN1cnJlbnRNb250aCArPSBkZWx0YTtcblxuICAgICAgICBpZiAoc2VsZi5jdXJyZW50TW9udGggPCAwIHx8IHNlbGYuY3VycmVudE1vbnRoID4gMTEpIHtcbiAgICAgICAgICBzZWxmLmN1cnJlbnRZZWFyICs9IHNlbGYuY3VycmVudE1vbnRoID4gMTEgPyAxIDogLTE7XG4gICAgICAgICAgc2VsZi5jdXJyZW50TW9udGggPSAoc2VsZi5jdXJyZW50TW9udGggKyAxMikgJSAxMjtcbiAgICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvblllYXJDaGFuZ2VcIik7XG4gICAgICAgIH1cblxuICAgICAgICBidWlsZERheXMoKTtcbiAgICAgICAgdHJpZ2dlckV2ZW50KFwib25Nb250aENoYW5nZVwiKTtcbiAgICAgICAgdXBkYXRlTmF2aWdhdGlvbkN1cnJlbnRNb250aCgpO1xuXG4gICAgICAgIGlmIChmcm9tX2tleWJvYXJkID09PSB0cnVlKSB7XG4gICAgICAgICAgZm9jdXNPbkRheSh1bmRlZmluZWQsIDApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNsZWFyKHRyaWdnZXJDaGFuZ2VFdmVudCkge1xuICAgICAgICBpZiAodHJpZ2dlckNoYW5nZUV2ZW50ID09PSB2b2lkIDApIHtcbiAgICAgICAgICB0cmlnZ2VyQ2hhbmdlRXZlbnQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5pbnB1dC52YWx1ZSA9IFwiXCI7XG4gICAgICAgIGlmIChzZWxmLmFsdElucHV0ICE9PSB1bmRlZmluZWQpIHNlbGYuYWx0SW5wdXQudmFsdWUgPSBcIlwiO1xuICAgICAgICBpZiAoc2VsZi5tb2JpbGVJbnB1dCAhPT0gdW5kZWZpbmVkKSBzZWxmLm1vYmlsZUlucHV0LnZhbHVlID0gXCJcIjtcbiAgICAgICAgc2VsZi5zZWxlY3RlZERhdGVzID0gW107XG4gICAgICAgIHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqID0gdW5kZWZpbmVkO1xuICAgICAgICBzZWxmLnNob3dUaW1lSW5wdXQgPSBmYWxzZTtcblxuICAgICAgICBpZiAoc2VsZi5jb25maWcuZW5hYmxlVGltZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5taW5EYXRlICE9PSB1bmRlZmluZWQpIHNldEhvdXJzRnJvbURhdGUoc2VsZi5jb25maWcubWluRGF0ZSk7ZWxzZSBzZXRIb3VycyhzZWxmLmNvbmZpZy5kZWZhdWx0SG91ciwgc2VsZi5jb25maWcuZGVmYXVsdE1pbnV0ZSwgc2VsZi5jb25maWcuZGVmYXVsdFNlY29uZHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5yZWRyYXcoKTtcbiAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2VFdmVudCkgdHJpZ2dlckV2ZW50KFwib25DaGFuZ2VcIik7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgICBzZWxmLmlzT3BlbiA9IGZhbHNlO1xuXG4gICAgICAgIGlmICghc2VsZi5pc01vYmlsZSkge1xuICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShcIm9wZW5cIik7XG5cbiAgICAgICAgICBzZWxmLl9pbnB1dC5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJpZ2dlckV2ZW50KFwib25DbG9zZVwiKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnICE9PSB1bmRlZmluZWQpIHRyaWdnZXJFdmVudChcIm9uRGVzdHJveVwiKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gc2VsZi5faGFuZGxlcnMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgdmFyIGggPSBzZWxmLl9oYW5kbGVyc1tpXTtcbiAgICAgICAgICBoLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihoLmV2ZW50LCBoLmhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5faGFuZGxlcnMgPSBbXTtcblxuICAgICAgICBpZiAoc2VsZi5tb2JpbGVJbnB1dCkge1xuICAgICAgICAgIGlmIChzZWxmLm1vYmlsZUlucHV0LnBhcmVudE5vZGUpIHNlbGYubW9iaWxlSW5wdXQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzZWxmLm1vYmlsZUlucHV0KTtcbiAgICAgICAgICBzZWxmLm1vYmlsZUlucHV0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9IGVsc2UgaWYgKHNlbGYuY2FsZW5kYXJDb250YWluZXIgJiYgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5wYXJlbnROb2RlKSBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2VsZi5jYWxlbmRhckNvbnRhaW5lcik7XG5cbiAgICAgICAgaWYgKHNlbGYuYWx0SW5wdXQpIHtcbiAgICAgICAgICBzZWxmLmlucHV0LnR5cGUgPSBcInRleHRcIjtcbiAgICAgICAgICBpZiAoc2VsZi5hbHRJbnB1dC5wYXJlbnROb2RlKSBzZWxmLmFsdElucHV0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2VsZi5hbHRJbnB1dCk7XG4gICAgICAgICAgZGVsZXRlIHNlbGYuYWx0SW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VsZi5pbnB1dCkge1xuICAgICAgICAgIHNlbGYuaW5wdXQudHlwZSA9IHNlbGYuaW5wdXQuX3R5cGU7XG4gICAgICAgICAgc2VsZi5pbnB1dC5jbGFzc0xpc3QucmVtb3ZlKFwiZmxhdHBpY2tyLWlucHV0XCIpO1xuICAgICAgICAgIHNlbGYuaW5wdXQucmVtb3ZlQXR0cmlidXRlKFwicmVhZG9ubHlcIik7XG4gICAgICAgICAgc2VsZi5pbnB1dC52YWx1ZSA9IFwiXCI7XG4gICAgICAgIH1cblxuICAgICAgICBbXCJfc2hvd1RpbWVJbnB1dFwiLCBcImxhdGVzdFNlbGVjdGVkRGF0ZU9ialwiLCBcIl9oaWRlTmV4dE1vbnRoQXJyb3dcIiwgXCJfaGlkZVByZXZNb250aEFycm93XCIsIFwiX19oaWRlTmV4dE1vbnRoQXJyb3dcIiwgXCJfX2hpZGVQcmV2TW9udGhBcnJvd1wiLCBcImlzTW9iaWxlXCIsIFwiaXNPcGVuXCIsIFwic2VsZWN0ZWREYXRlRWxlbVwiLCBcIm1pbkRhdGVIYXNUaW1lXCIsIFwibWF4RGF0ZUhhc1RpbWVcIiwgXCJkYXlzXCIsIFwiZGF5c0NvbnRhaW5lclwiLCBcIl9pbnB1dFwiLCBcIl9wb3NpdGlvbkVsZW1lbnRcIiwgXCJpbm5lckNvbnRhaW5lclwiLCBcInJDb250YWluZXJcIiwgXCJtb250aE5hdlwiLCBcInRvZGF5RGF0ZUVsZW1cIiwgXCJjYWxlbmRhckNvbnRhaW5lclwiLCBcIndlZWtkYXlDb250YWluZXJcIiwgXCJwcmV2TW9udGhOYXZcIiwgXCJuZXh0TW9udGhOYXZcIiwgXCJjdXJyZW50TW9udGhFbGVtZW50XCIsIFwiY3VycmVudFllYXJFbGVtZW50XCIsIFwibmF2aWdhdGlvbkN1cnJlbnRNb250aFwiLCBcInNlbGVjdGVkRGF0ZUVsZW1cIiwgXCJjb25maWdcIl0uZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBkZWxldGUgc2VsZltrXTtcbiAgICAgICAgICB9IGNhdGNoIChfKSB7fVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaXNDYWxlbmRhckVsZW0oZWxlbSkge1xuICAgICAgICBpZiAoc2VsZi5jb25maWcuYXBwZW5kVG8gJiYgc2VsZi5jb25maWcuYXBwZW5kVG8uY29udGFpbnMoZWxlbSkpIHJldHVybiB0cnVlO1xuICAgICAgICByZXR1cm4gc2VsZi5jYWxlbmRhckNvbnRhaW5lci5jb250YWlucyhlbGVtKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZG9jdW1lbnRDbGljayhlKSB7XG4gICAgICAgIGlmIChzZWxmLmlzT3BlbiAmJiAhc2VsZi5jb25maWcuaW5saW5lKSB7XG4gICAgICAgICAgdmFyIGlzQ2FsZW5kYXJFbGVtZW50ID0gaXNDYWxlbmRhckVsZW0oZS50YXJnZXQpO1xuICAgICAgICAgIHZhciBpc0lucHV0ID0gZS50YXJnZXQgPT09IHNlbGYuaW5wdXQgfHwgZS50YXJnZXQgPT09IHNlbGYuYWx0SW5wdXQgfHwgc2VsZi5lbGVtZW50LmNvbnRhaW5zKGUudGFyZ2V0KSB8fCBlLnBhdGggJiYgZS5wYXRoLmluZGV4T2YgJiYgKH5lLnBhdGguaW5kZXhPZihzZWxmLmlucHV0KSB8fCB+ZS5wYXRoLmluZGV4T2Yoc2VsZi5hbHRJbnB1dCkpO1xuICAgICAgICAgIHZhciBsb3N0Rm9jdXMgPSBlLnR5cGUgPT09IFwiYmx1clwiID8gaXNJbnB1dCAmJiBlLnJlbGF0ZWRUYXJnZXQgJiYgIWlzQ2FsZW5kYXJFbGVtKGUucmVsYXRlZFRhcmdldCkgOiAhaXNJbnB1dCAmJiAhaXNDYWxlbmRhckVsZW1lbnQ7XG4gICAgICAgICAgdmFyIGlzSWdub3JlZCA9ICFzZWxmLmNvbmZpZy5pZ25vcmVkRm9jdXNFbGVtZW50cy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbS5jb250YWlucyhlLnRhcmdldCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAobG9zdEZvY3VzICYmIGlzSWdub3JlZCkge1xuICAgICAgICAgICAgc2VsZi5jbG9zZSgpO1xuXG4gICAgICAgICAgICBpZiAoc2VsZi5jb25maWcubW9kZSA9PT0gXCJyYW5nZVwiICYmIHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgc2VsZi5jbGVhcihmYWxzZSk7XG4gICAgICAgICAgICAgIHNlbGYucmVkcmF3KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNoYW5nZVllYXIobmV3WWVhcikge1xuICAgICAgICBpZiAoIW5ld1llYXIgfHwgc2VsZi5jb25maWcubWluRGF0ZSAmJiBuZXdZZWFyIDwgc2VsZi5jb25maWcubWluRGF0ZS5nZXRGdWxsWWVhcigpIHx8IHNlbGYuY29uZmlnLm1heERhdGUgJiYgbmV3WWVhciA+IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0RnVsbFllYXIoKSkgcmV0dXJuO1xuICAgICAgICB2YXIgbmV3WWVhck51bSA9IG5ld1llYXIsXG4gICAgICAgICAgICBpc05ld1llYXIgPSBzZWxmLmN1cnJlbnRZZWFyICE9PSBuZXdZZWFyTnVtO1xuICAgICAgICBzZWxmLmN1cnJlbnRZZWFyID0gbmV3WWVhck51bSB8fCBzZWxmLmN1cnJlbnRZZWFyO1xuXG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5tYXhEYXRlICYmIHNlbGYuY3VycmVudFllYXIgPT09IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0RnVsbFllYXIoKSkge1xuICAgICAgICAgIHNlbGYuY3VycmVudE1vbnRoID0gTWF0aC5taW4oc2VsZi5jb25maWcubWF4RGF0ZS5nZXRNb250aCgpLCBzZWxmLmN1cnJlbnRNb250aCk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZi5jb25maWcubWluRGF0ZSAmJiBzZWxmLmN1cnJlbnRZZWFyID09PSBzZWxmLmNvbmZpZy5taW5EYXRlLmdldEZ1bGxZZWFyKCkpIHtcbiAgICAgICAgICBzZWxmLmN1cnJlbnRNb250aCA9IE1hdGgubWF4KHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0TW9udGgoKSwgc2VsZi5jdXJyZW50TW9udGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzTmV3WWVhcikge1xuICAgICAgICAgIHNlbGYucmVkcmF3KCk7XG4gICAgICAgICAgdHJpZ2dlckV2ZW50KFwib25ZZWFyQ2hhbmdlXCIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGlzRW5hYmxlZChkYXRlLCB0aW1lbGVzcykge1xuICAgICAgICBpZiAodGltZWxlc3MgPT09IHZvaWQgMCkge1xuICAgICAgICAgIHRpbWVsZXNzID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkYXRlVG9DaGVjayA9IHNlbGYucGFyc2VEYXRlKGRhdGUsIHVuZGVmaW5lZCwgdGltZWxlc3MpO1xuICAgICAgICBpZiAoc2VsZi5jb25maWcubWluRGF0ZSAmJiBkYXRlVG9DaGVjayAmJiBjb21wYXJlRGF0ZXMoZGF0ZVRvQ2hlY2ssIHNlbGYuY29uZmlnLm1pbkRhdGUsIHRpbWVsZXNzICE9PSB1bmRlZmluZWQgPyB0aW1lbGVzcyA6ICFzZWxmLm1pbkRhdGVIYXNUaW1lKSA8IDAgfHwgc2VsZi5jb25maWcubWF4RGF0ZSAmJiBkYXRlVG9DaGVjayAmJiBjb21wYXJlRGF0ZXMoZGF0ZVRvQ2hlY2ssIHNlbGYuY29uZmlnLm1heERhdGUsIHRpbWVsZXNzICE9PSB1bmRlZmluZWQgPyB0aW1lbGVzcyA6ICFzZWxmLm1heERhdGVIYXNUaW1lKSA+IDApIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLmVuYWJsZS5sZW5ndGggPT09IDAgJiYgc2VsZi5jb25maWcuZGlzYWJsZS5sZW5ndGggPT09IDApIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAoZGF0ZVRvQ2hlY2sgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgYm9vbCA9IHNlbGYuY29uZmlnLmVuYWJsZS5sZW5ndGggPiAwLFxuICAgICAgICAgICAgYXJyYXkgPSBib29sID8gc2VsZi5jb25maWcuZW5hYmxlIDogc2VsZi5jb25maWcuZGlzYWJsZTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgZDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgZCA9IGFycmF5W2ldO1xuICAgICAgICAgIGlmICh0eXBlb2YgZCA9PT0gXCJmdW5jdGlvblwiICYmIGQoZGF0ZVRvQ2hlY2spKSByZXR1cm4gYm9vbDtlbHNlIGlmIChkIGluc3RhbmNlb2YgRGF0ZSAmJiBkYXRlVG9DaGVjayAhPT0gdW5kZWZpbmVkICYmIGQuZ2V0VGltZSgpID09PSBkYXRlVG9DaGVjay5nZXRUaW1lKCkpIHJldHVybiBib29sO2Vsc2UgaWYgKHR5cGVvZiBkID09PSBcInN0cmluZ1wiICYmIGRhdGVUb0NoZWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhciBwYXJzZWQgPSBzZWxmLnBhcnNlRGF0ZShkLCB1bmRlZmluZWQsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlZCAmJiBwYXJzZWQuZ2V0VGltZSgpID09PSBkYXRlVG9DaGVjay5nZXRUaW1lKCkgPyBib29sIDogIWJvb2w7XG4gICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZCA9PT0gXCJvYmplY3RcIiAmJiBkYXRlVG9DaGVjayAhPT0gdW5kZWZpbmVkICYmIGQuZnJvbSAmJiBkLnRvICYmIGRhdGVUb0NoZWNrLmdldFRpbWUoKSA+PSBkLmZyb20uZ2V0VGltZSgpICYmIGRhdGVUb0NoZWNrLmdldFRpbWUoKSA8PSBkLnRvLmdldFRpbWUoKSkgcmV0dXJuIGJvb2w7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gIWJvb2w7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG9uS2V5RG93bihlKSB7XG4gICAgICAgIHZhciBpc0lucHV0ID0gZS50YXJnZXQgPT09IHNlbGYuX2lucHV0O1xuICAgICAgICB2YXIgY2FsZW5kYXJFbGVtID0gaXNDYWxlbmRhckVsZW0oZS50YXJnZXQpO1xuICAgICAgICB2YXIgYWxsb3dJbnB1dCA9IHNlbGYuY29uZmlnLmFsbG93SW5wdXQ7XG4gICAgICAgIHZhciBhbGxvd0tleWRvd24gPSBzZWxmLmlzT3BlbiAmJiAoIWFsbG93SW5wdXQgfHwgIWlzSW5wdXQpO1xuICAgICAgICB2YXIgYWxsb3dJbmxpbmVLZXlkb3duID0gc2VsZi5jb25maWcuaW5saW5lICYmIGlzSW5wdXQgJiYgIWFsbG93SW5wdXQ7XG5cbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMTMgJiYgaXNJbnB1dCkge1xuICAgICAgICAgIGlmIChhbGxvd0lucHV0KSB7XG4gICAgICAgICAgICBzZWxmLnNldERhdGUoc2VsZi5faW5wdXQudmFsdWUsIHRydWUsIGUudGFyZ2V0ID09PSBzZWxmLmFsdElucHV0ID8gc2VsZi5jb25maWcuYWx0Rm9ybWF0IDogc2VsZi5jb25maWcuZGF0ZUZvcm1hdCk7XG4gICAgICAgICAgICByZXR1cm4gZS50YXJnZXQuYmx1cigpO1xuICAgICAgICAgIH0gZWxzZSBzZWxmLm9wZW4oKTtcbiAgICAgICAgfSBlbHNlIGlmIChjYWxlbmRhckVsZW0gfHwgYWxsb3dLZXlkb3duIHx8IGFsbG93SW5saW5lS2V5ZG93bikge1xuICAgICAgICAgIHZhciBpc1RpbWVPYmogPSAhIXNlbGYudGltZUNvbnRhaW5lciAmJiBzZWxmLnRpbWVDb250YWluZXIuY29udGFpbnMoZS50YXJnZXQpO1xuXG4gICAgICAgICAgc3dpdGNoIChlLmtleUNvZGUpIHtcbiAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgIGlmIChpc1RpbWVPYmopIHVwZGF0ZVZhbHVlKCk7ZWxzZSBzZWxlY3REYXRlKGUpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICBmb2N1c0FuZENsb3NlKCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICBjYXNlIDQ2OlxuICAgICAgICAgICAgICBpZiAoaXNJbnB1dCAmJiAhc2VsZi5jb25maWcuYWxsb3dJbnB1dCkge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBzZWxmLmNsZWFyKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAzNzpcbiAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgIGlmICghaXNUaW1lT2JqKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuZGF5c0NvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgICAgdmFyIF9kZWx0YSA9IGlzSW5wdXQgPyAwIDogZS5rZXlDb2RlID09PSAzOSA/IDEgOiAtMTtcblxuICAgICAgICAgICAgICAgICAgaWYgKCFlLmN0cmxLZXkpIGZvY3VzT25EYXkodW5kZWZpbmVkLCBfZGVsdGEpO2Vsc2UgY2hhbmdlTW9udGgoX2RlbHRhLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZi5ob3VyRWxlbWVudCkgc2VsZi5ob3VyRWxlbWVudC5mb2N1cygpO1xuXG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICB2YXIgZGVsdGEgPSBlLmtleUNvZGUgPT09IDQwID8gMSA6IC0xO1xuXG4gICAgICAgICAgICAgIGlmIChzZWxmLmRheXNDb250YWluZXIgJiYgZS50YXJnZXQuJGkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChlLmN0cmxLZXkpIHtcbiAgICAgICAgICAgICAgICAgIGNoYW5nZVllYXIoc2VsZi5jdXJyZW50WWVhciAtIGRlbHRhKTtcbiAgICAgICAgICAgICAgICAgIGZvY3VzT25EYXkoZS50YXJnZXQuJGksIDApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzVGltZU9iaikgZm9jdXNPbkRheShlLnRhcmdldC4kaSwgZGVsdGEgKiA3KTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChzZWxmLmNvbmZpZy5lbmFibGVUaW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1RpbWVPYmogJiYgc2VsZi5ob3VyRWxlbWVudCkgc2VsZi5ob3VyRWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgICAgIHVwZGF0ZVRpbWUoZSk7XG5cbiAgICAgICAgICAgICAgICBzZWxmLl9kZWJvdW5jZWRDaGFuZ2UoKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gc2VsZi5ob3VyRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBzZWxmLm1pbnV0ZUVsZW1lbnQuc2VsZWN0KCk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoZS50YXJnZXQgPT09IHNlbGYubWludXRlRWxlbWVudCAmJiAoc2VsZi5zZWNvbmRFbGVtZW50IHx8IHNlbGYuYW1QTSkpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuc2Vjb25kRWxlbWVudCAhPT0gdW5kZWZpbmVkKSBzZWxmLnNlY29uZEVsZW1lbnQuZm9jdXMoKTtlbHNlIGlmIChzZWxmLmFtUE0gIT09IHVuZGVmaW5lZCkgc2VsZi5hbVBNLmZvY3VzKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoZS50YXJnZXQgPT09IHNlbGYuc2Vjb25kRWxlbWVudCAmJiBzZWxmLmFtUE0pIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgc2VsZi5hbVBNLmZvY3VzKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3dpdGNoIChlLmtleSkge1xuICAgICAgICAgICAgY2FzZSBzZWxmLmwxMG4uYW1QTVswXS5jaGFyQXQoMCk6XG4gICAgICAgICAgICBjYXNlIHNlbGYubDEwbi5hbVBNWzBdLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpOlxuICAgICAgICAgICAgICBpZiAoc2VsZi5hbVBNICE9PSB1bmRlZmluZWQgJiYgZS50YXJnZXQgPT09IHNlbGYuYW1QTSkge1xuICAgICAgICAgICAgICAgIHNlbGYuYW1QTS50ZXh0Q29udGVudCA9IHNlbGYubDEwbi5hbVBNWzBdO1xuICAgICAgICAgICAgICAgIHNldEhvdXJzRnJvbUlucHV0cygpO1xuICAgICAgICAgICAgICAgIHVwZGF0ZVZhbHVlKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBzZWxmLmwxMG4uYW1QTVsxXS5jaGFyQXQoMCk6XG4gICAgICAgICAgICBjYXNlIHNlbGYubDEwbi5hbVBNWzFdLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpOlxuICAgICAgICAgICAgICBpZiAoc2VsZi5hbVBNICE9PSB1bmRlZmluZWQgJiYgZS50YXJnZXQgPT09IHNlbGYuYW1QTSkge1xuICAgICAgICAgICAgICAgIHNlbGYuYW1QTS50ZXh0Q29udGVudCA9IHNlbGYubDEwbi5hbVBNWzFdO1xuICAgICAgICAgICAgICAgIHNldEhvdXJzRnJvbUlucHV0cygpO1xuICAgICAgICAgICAgICAgIHVwZGF0ZVZhbHVlKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdHJpZ2dlckV2ZW50KFwib25LZXlEb3duXCIsIGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG9uTW91c2VPdmVyKGVsZW0pIHtcbiAgICAgICAgaWYgKHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggIT09IDEgfHwgIWVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKFwiZmxhdHBpY2tyLWRheVwiKSB8fCBlbGVtLmNsYXNzTGlzdC5jb250YWlucyhcImRpc2FibGVkXCIpKSByZXR1cm47XG4gICAgICAgIHZhciBob3ZlckRhdGUgPSBlbGVtLmRhdGVPYmouZ2V0VGltZSgpLFxuICAgICAgICAgICAgaW5pdGlhbERhdGUgPSBzZWxmLnBhcnNlRGF0ZShzZWxmLnNlbGVjdGVkRGF0ZXNbMF0sIHVuZGVmaW5lZCwgdHJ1ZSkuZ2V0VGltZSgpLFxuICAgICAgICAgICAgcmFuZ2VTdGFydERhdGUgPSBNYXRoLm1pbihob3ZlckRhdGUsIHNlbGYuc2VsZWN0ZWREYXRlc1swXS5nZXRUaW1lKCkpLFxuICAgICAgICAgICAgcmFuZ2VFbmREYXRlID0gTWF0aC5tYXgoaG92ZXJEYXRlLCBzZWxmLnNlbGVjdGVkRGF0ZXNbMF0uZ2V0VGltZSgpKTtcbiAgICAgICAgdmFyIG1vbnRocyA9IHNlbGYuZGF5c0NvbnRhaW5lci5jaGlsZHJlbixcbiAgICAgICAgICAgIGZpcnN0RGF5ID0gbW9udGhzWzBdLmNoaWxkcmVuWzBdLmRhdGVPYmouZ2V0VGltZSgpLFxuICAgICAgICAgICAgbGFzdERheSA9IG1vbnRoc1ttb250aHMubGVuZ3RoIC0gMV0ubGFzdENoaWxkLmRhdGVPYmouZ2V0VGltZSgpO1xuICAgICAgICB2YXIgY29udGFpbnNEaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgbWluUmFuZ2UgPSAwLFxuICAgICAgICAgICAgbWF4UmFuZ2UgPSAwO1xuXG4gICAgICAgIGZvciAodmFyIHQgPSBmaXJzdERheTsgdCA8IGxhc3REYXk7IHQgKz0gZHVyYXRpb24uREFZKSB7XG4gICAgICAgICAgaWYgKCFpc0VuYWJsZWQobmV3IERhdGUodCksIHRydWUpKSB7XG4gICAgICAgICAgICBjb250YWluc0Rpc2FibGVkID0gY29udGFpbnNEaXNhYmxlZCB8fCB0ID4gcmFuZ2VTdGFydERhdGUgJiYgdCA8IHJhbmdlRW5kRGF0ZTtcbiAgICAgICAgICAgIGlmICh0IDwgaW5pdGlhbERhdGUgJiYgKCFtaW5SYW5nZSB8fCB0ID4gbWluUmFuZ2UpKSBtaW5SYW5nZSA9IHQ7ZWxzZSBpZiAodCA+IGluaXRpYWxEYXRlICYmICghbWF4UmFuZ2UgfHwgdCA8IG1heFJhbmdlKSkgbWF4UmFuZ2UgPSB0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIG0gPSAwOyBtIDwgc2VsZi5jb25maWcuc2hvd01vbnRoczsgbSsrKSB7XG4gICAgICAgICAgdmFyIG1vbnRoID0gc2VsZi5kYXlzQ29udGFpbmVyLmNoaWxkcmVuW21dO1xuICAgICAgICAgIHZhciBwcmV2TW9udGggPSBzZWxmLmRheXNDb250YWluZXIuY2hpbGRyZW5bbSAtIDFdO1xuXG4gICAgICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoaSwgbCkge1xuICAgICAgICAgICAgdmFyIGRheUVsZW0gPSBtb250aC5jaGlsZHJlbltpXSxcbiAgICAgICAgICAgICAgICBkYXRlID0gZGF5RWxlbS5kYXRlT2JqO1xuICAgICAgICAgICAgdmFyIHRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICAgICAgICAgICAgdmFyIG91dE9mUmFuZ2UgPSBtaW5SYW5nZSA+IDAgJiYgdGltZXN0YW1wIDwgbWluUmFuZ2UgfHwgbWF4UmFuZ2UgPiAwICYmIHRpbWVzdGFtcCA+IG1heFJhbmdlO1xuXG4gICAgICAgICAgICBpZiAob3V0T2ZSYW5nZSkge1xuICAgICAgICAgICAgICBkYXlFbGVtLmNsYXNzTGlzdC5hZGQoXCJub3RBbGxvd2VkXCIpO1xuICAgICAgICAgICAgICBbXCJpblJhbmdlXCIsIFwic3RhcnRSYW5nZVwiLCBcImVuZFJhbmdlXCJdLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICBkYXlFbGVtLmNsYXNzTGlzdC5yZW1vdmUoYyk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb250YWluc0Rpc2FibGVkICYmICFvdXRPZlJhbmdlKSByZXR1cm4gXCJjb250aW51ZVwiO1xuXG4gICAgICAgICAgICBbXCJzdGFydFJhbmdlXCIsIFwiaW5SYW5nZVwiLCBcImVuZFJhbmdlXCIsIFwibm90QWxsb3dlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAgIGRheUVsZW0uY2xhc3NMaXN0LnJlbW92ZShjKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZWxlbS5jbGFzc0xpc3QuYWRkKGhvdmVyRGF0ZSA8IHNlbGYuc2VsZWN0ZWREYXRlc1swXS5nZXRUaW1lKCkgPyBcInN0YXJ0UmFuZ2VcIiA6IFwiZW5kUmFuZ2VcIik7XG5cbiAgICAgICAgICAgIGlmIChtb250aC5jb250YWlucyhlbGVtKSB8fCAhKG0gPiAwICYmIHByZXZNb250aCAmJiBwcmV2TW9udGgubGFzdENoaWxkLmRhdGVPYmouZ2V0VGltZSgpID49IHRpbWVzdGFtcCkpIHtcbiAgICAgICAgICAgICAgaWYgKGluaXRpYWxEYXRlIDwgaG92ZXJEYXRlICYmIHRpbWVzdGFtcCA9PT0gaW5pdGlhbERhdGUpIGRheUVsZW0uY2xhc3NMaXN0LmFkZChcInN0YXJ0UmFuZ2VcIik7ZWxzZSBpZiAoaW5pdGlhbERhdGUgPiBob3ZlckRhdGUgJiYgdGltZXN0YW1wID09PSBpbml0aWFsRGF0ZSkgZGF5RWxlbS5jbGFzc0xpc3QuYWRkKFwiZW5kUmFuZ2VcIik7XG4gICAgICAgICAgICAgIGlmICh0aW1lc3RhbXAgPj0gbWluUmFuZ2UgJiYgKG1heFJhbmdlID09PSAwIHx8IHRpbWVzdGFtcCA8PSBtYXhSYW5nZSkgJiYgaXNCZXR3ZWVuKHRpbWVzdGFtcCwgaW5pdGlhbERhdGUsIGhvdmVyRGF0ZSkpIGRheUVsZW0uY2xhc3NMaXN0LmFkZChcImluUmFuZ2VcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbW9udGguY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgX3JldCA9IF9sb29wKGksIGwpO1xuXG4gICAgICAgICAgICBpZiAoX3JldCA9PT0gXCJjb250aW51ZVwiKSBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gb25SZXNpemUoKSB7XG4gICAgICAgIGlmIChzZWxmLmlzT3BlbiAmJiAhc2VsZi5jb25maWcuc3RhdGljICYmICFzZWxmLmNvbmZpZy5pbmxpbmUpIHBvc2l0aW9uQ2FsZW5kYXIoKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gb3BlbihlLCBwb3NpdGlvbkVsZW1lbnQpIHtcbiAgICAgICAgaWYgKHBvc2l0aW9uRWxlbWVudCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgcG9zaXRpb25FbGVtZW50ID0gc2VsZi5faW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VsZi5pc01vYmlsZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBlLnRhcmdldCAmJiBlLnRhcmdldC5ibHVyKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLm1vYmlsZUlucHV0ICE9PSB1bmRlZmluZWQgJiYgc2VsZi5tb2JpbGVJbnB1dC5jbGljaygpO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICAgIHRyaWdnZXJFdmVudChcIm9uT3BlblwiKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VsZi5faW5wdXQuZGlzYWJsZWQgfHwgc2VsZi5jb25maWcuaW5saW5lKSByZXR1cm47XG4gICAgICAgIHZhciB3YXNPcGVuID0gc2VsZi5pc09wZW47XG4gICAgICAgIHNlbGYuaXNPcGVuID0gdHJ1ZTtcblxuICAgICAgICBpZiAoIXdhc09wZW4pIHtcbiAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJvcGVuXCIpO1xuXG4gICAgICAgICAgc2VsZi5faW5wdXQuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcblxuICAgICAgICAgIHRyaWdnZXJFdmVudChcIm9uT3BlblwiKTtcbiAgICAgICAgICBwb3NpdGlvbkNhbGVuZGFyKHBvc2l0aW9uRWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VsZi5jb25maWcuZW5hYmxlVGltZSA9PT0gdHJ1ZSAmJiBzZWxmLmNvbmZpZy5ub0NhbGVuZGFyID09PSB0cnVlKSB7XG4gICAgICAgICAgaWYgKHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHNlbGYuc2V0RGF0ZShzZWxmLmNvbmZpZy5taW5EYXRlICE9PSB1bmRlZmluZWQgPyBuZXcgRGF0ZShzZWxmLmNvbmZpZy5taW5EYXRlLmdldFRpbWUoKSkgOiBuZXcgRGF0ZSgpLnNldEhvdXJzKHNlbGYuY29uZmlnLmRlZmF1bHRIb3VyLCBzZWxmLmNvbmZpZy5kZWZhdWx0TWludXRlLCBzZWxmLmNvbmZpZy5kZWZhdWx0U2Vjb25kcywgMCksIGZhbHNlKTtcbiAgICAgICAgICAgIHNldEhvdXJzRnJvbUlucHV0cygpO1xuICAgICAgICAgICAgdXBkYXRlVmFsdWUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLmhvdXJFbGVtZW50LnNlbGVjdCgpO1xuICAgICAgICAgIH0sIDUwKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBtaW5NYXhEYXRlU2V0dGVyKHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICAgICAgdmFyIGRhdGVPYmogPSBzZWxmLmNvbmZpZ1tcIl9cIiArIHR5cGUgKyBcIkRhdGVcIl0gPSBzZWxmLnBhcnNlRGF0ZShkYXRlLCBzZWxmLmNvbmZpZy5kYXRlRm9ybWF0KTtcbiAgICAgICAgICB2YXIgaW52ZXJzZURhdGVPYmogPSBzZWxmLmNvbmZpZ1tcIl9cIiArICh0eXBlID09PSBcIm1pblwiID8gXCJtYXhcIiA6IFwibWluXCIpICsgXCJEYXRlXCJdO1xuXG4gICAgICAgICAgaWYgKGRhdGVPYmogIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc2VsZlt0eXBlID09PSBcIm1pblwiID8gXCJtaW5EYXRlSGFzVGltZVwiIDogXCJtYXhEYXRlSGFzVGltZVwiXSA9IGRhdGVPYmouZ2V0SG91cnMoKSA+IDAgfHwgZGF0ZU9iai5nZXRNaW51dGVzKCkgPiAwIHx8IGRhdGVPYmouZ2V0U2Vjb25kcygpID4gMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZERhdGVzKSB7XG4gICAgICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZXMgPSBzZWxmLnNlbGVjdGVkRGF0ZXMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBpc0VuYWJsZWQoZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICghc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCAmJiB0eXBlID09PSBcIm1pblwiKSBzZXRIb3Vyc0Zyb21EYXRlKGRhdGVPYmopO1xuICAgICAgICAgICAgdXBkYXRlVmFsdWUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VsZi5kYXlzQ29udGFpbmVyKSB7XG4gICAgICAgICAgICByZWRyYXcoKTtcbiAgICAgICAgICAgIGlmIChkYXRlT2JqICE9PSB1bmRlZmluZWQpIHNlbGYuY3VycmVudFllYXJFbGVtZW50W3R5cGVdID0gZGF0ZU9iai5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCk7ZWxzZSBzZWxmLmN1cnJlbnRZZWFyRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUodHlwZSk7XG4gICAgICAgICAgICBzZWxmLmN1cnJlbnRZZWFyRWxlbWVudC5kaXNhYmxlZCA9ICEhaW52ZXJzZURhdGVPYmogJiYgZGF0ZU9iaiAhPT0gdW5kZWZpbmVkICYmIGludmVyc2VEYXRlT2JqLmdldEZ1bGxZZWFyKCkgPT09IGRhdGVPYmouZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHBhcnNlQ29uZmlnKCkge1xuICAgICAgICB2YXIgYm9vbE9wdHMgPSBbXCJ3cmFwXCIsIFwid2Vla051bWJlcnNcIiwgXCJhbGxvd0lucHV0XCIsIFwiY2xpY2tPcGVuc1wiLCBcInRpbWVfMjRoclwiLCBcImVuYWJsZVRpbWVcIiwgXCJub0NhbGVuZGFyXCIsIFwiYWx0SW5wdXRcIiwgXCJzaG9ydGhhbmRDdXJyZW50TW9udGhcIiwgXCJpbmxpbmVcIiwgXCJzdGF0aWNcIiwgXCJlbmFibGVTZWNvbmRzXCIsIFwiZGlzYWJsZU1vYmlsZVwiXTtcbiAgICAgICAgdmFyIGhvb2tzID0gW1wib25DaGFuZ2VcIiwgXCJvbkNsb3NlXCIsIFwib25EYXlDcmVhdGVcIiwgXCJvbkRlc3Ryb3lcIiwgXCJvbktleURvd25cIiwgXCJvbk1vbnRoQ2hhbmdlXCIsIFwib25PcGVuXCIsIFwib25QYXJzZUNvbmZpZ1wiLCBcIm9uUmVhZHlcIiwgXCJvblZhbHVlVXBkYXRlXCIsIFwib25ZZWFyQ2hhbmdlXCIsIFwib25QcmVDYWxlbmRhclBvc2l0aW9uXCJdO1xuICAgICAgICB2YXIgdXNlckNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIGluc3RhbmNlQ29uZmlnLCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGVsZW1lbnQuZGF0YXNldCB8fCB7fSkpKTtcbiAgICAgICAgdmFyIGZvcm1hdHMkJDEgPSB7fTtcbiAgICAgICAgc2VsZi5jb25maWcucGFyc2VEYXRlID0gdXNlckNvbmZpZy5wYXJzZURhdGU7XG4gICAgICAgIHNlbGYuY29uZmlnLmZvcm1hdERhdGUgPSB1c2VyQ29uZmlnLmZvcm1hdERhdGU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLmNvbmZpZywgXCJlbmFibGVcIiwge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuY29uZmlnLl9lbmFibGU7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldChkYXRlcykge1xuICAgICAgICAgICAgc2VsZi5jb25maWcuX2VuYWJsZSA9IHBhcnNlRGF0ZVJ1bGVzKGRhdGVzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZi5jb25maWcsIFwiZGlzYWJsZVwiLCB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi5jb25maWcuX2Rpc2FibGU7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldChkYXRlcykge1xuICAgICAgICAgICAgc2VsZi5jb25maWcuX2Rpc2FibGUgPSBwYXJzZURhdGVSdWxlcyhkYXRlcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIXVzZXJDb25maWcuZGF0ZUZvcm1hdCAmJiB1c2VyQ29uZmlnLmVuYWJsZVRpbWUpIHtcbiAgICAgICAgICBmb3JtYXRzJCQxLmRhdGVGb3JtYXQgPSB1c2VyQ29uZmlnLm5vQ2FsZW5kYXIgPyBcIkg6aVwiICsgKHVzZXJDb25maWcuZW5hYmxlU2Vjb25kcyA/IFwiOlNcIiA6IFwiXCIpIDogZmxhdHBpY2tyLmRlZmF1bHRDb25maWcuZGF0ZUZvcm1hdCArIFwiIEg6aVwiICsgKHVzZXJDb25maWcuZW5hYmxlU2Vjb25kcyA/IFwiOlNcIiA6IFwiXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVzZXJDb25maWcuYWx0SW5wdXQgJiYgdXNlckNvbmZpZy5lbmFibGVUaW1lICYmICF1c2VyQ29uZmlnLmFsdEZvcm1hdCkge1xuICAgICAgICAgIGZvcm1hdHMkJDEuYWx0Rm9ybWF0ID0gdXNlckNvbmZpZy5ub0NhbGVuZGFyID8gXCJoOmlcIiArICh1c2VyQ29uZmlnLmVuYWJsZVNlY29uZHMgPyBcIjpTIEtcIiA6IFwiIEtcIikgOiBmbGF0cGlja3IuZGVmYXVsdENvbmZpZy5hbHRGb3JtYXQgKyAoXCIgaDppXCIgKyAodXNlckNvbmZpZy5lbmFibGVTZWNvbmRzID8gXCI6U1wiIDogXCJcIikgKyBcIiBLXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNlbGYuY29uZmlnLCBcIm1pbkRhdGVcIiwge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuY29uZmlnLl9taW5EYXRlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBtaW5NYXhEYXRlU2V0dGVyKFwibWluXCIpXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZi5jb25maWcsIFwibWF4RGF0ZVwiLCB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi5jb25maWcuX21heERhdGU7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IG1pbk1heERhdGVTZXR0ZXIoXCJtYXhcIilcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIG1pbk1heFRpbWVTZXR0ZXIgPSBmdW5jdGlvbiBtaW5NYXhUaW1lU2V0dGVyKHR5cGUpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgc2VsZi5jb25maWdbdHlwZSA9PT0gXCJtaW5cIiA/IFwiX21pblRpbWVcIiA6IFwiX21heFRpbWVcIl0gPSBzZWxmLnBhcnNlRGF0ZSh2YWwsIFwiSDppXCIpO1xuICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNlbGYuY29uZmlnLCBcIm1pblRpbWVcIiwge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuY29uZmlnLl9taW5UaW1lO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBtaW5NYXhUaW1lU2V0dGVyKFwibWluXCIpXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZi5jb25maWcsIFwibWF4VGltZVwiLCB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi5jb25maWcuX21heFRpbWU7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IG1pbk1heFRpbWVTZXR0ZXIoXCJtYXhcIilcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oc2VsZi5jb25maWcsIGZvcm1hdHMkJDEsIHVzZXJDb25maWcpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9vbE9wdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBzZWxmLmNvbmZpZ1tib29sT3B0c1tpXV0gPSBzZWxmLmNvbmZpZ1tib29sT3B0c1tpXV0gPT09IHRydWUgfHwgc2VsZi5jb25maWdbYm9vbE9wdHNbaV1dID09PSBcInRydWVcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIF9pID0gaG9va3MubGVuZ3RoOyBfaS0tOykge1xuICAgICAgICAgIGlmIChzZWxmLmNvbmZpZ1tob29rc1tfaV1dICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNlbGYuY29uZmlnW2hvb2tzW19pXV0gPSBhcnJheWlmeShzZWxmLmNvbmZpZ1tob29rc1tfaV1dIHx8IFtdKS5tYXAoYmluZFRvSW5zdGFuY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInRpbWVcIikge1xuICAgICAgICAgIHNlbGYuY29uZmlnLm5vQ2FsZW5kYXIgPSB0cnVlO1xuICAgICAgICAgIHNlbGYuY29uZmlnLmVuYWJsZVRpbWUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgc2VsZi5jb25maWcucGx1Z2lucy5sZW5ndGg7IF9pMisrKSB7XG4gICAgICAgICAgdmFyIHBsdWdpbkNvbmYgPSBzZWxmLmNvbmZpZy5wbHVnaW5zW19pMl0oc2VsZikgfHwge307XG5cbiAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gcGx1Z2luQ29uZikge1xuICAgICAgICAgICAgaWYgKH5ob29rcy5pbmRleE9mKGtleSkpIHtcbiAgICAgICAgICAgICAgc2VsZi5jb25maWdba2V5XSA9IGFycmF5aWZ5KHBsdWdpbkNvbmZba2V5XSkubWFwKGJpbmRUb0luc3RhbmNlKS5jb25jYXQoc2VsZi5jb25maWdba2V5XSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB1c2VyQ29uZmlnW2tleV0gPT09IFwidW5kZWZpbmVkXCIpIHNlbGYuY29uZmlnW2tleV0gPSBwbHVnaW5Db25mW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5pc01vYmlsZSA9ICFzZWxmLmNvbmZpZy5kaXNhYmxlTW9iaWxlICYmICFzZWxmLmNvbmZpZy5pbmxpbmUgJiYgc2VsZi5jb25maWcubW9kZSA9PT0gXCJzaW5nbGVcIiAmJiAhc2VsZi5jb25maWcuZGlzYWJsZS5sZW5ndGggJiYgIXNlbGYuY29uZmlnLmVuYWJsZS5sZW5ndGggJiYgIXNlbGYuY29uZmlnLndlZWtOdW1iZXJzICYmIC9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgICAgdHJpZ2dlckV2ZW50KFwib25QYXJzZUNvbmZpZ1wiKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2V0dXBMb2NhbGUoKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZi5jb25maWcubG9jYWxlICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBmbGF0cGlja3IubDEwbnNbc2VsZi5jb25maWcubG9jYWxlXSA9PT0gXCJ1bmRlZmluZWRcIikgc2VsZi5jb25maWcuZXJyb3JIYW5kbGVyKG5ldyBFcnJvcihcImZsYXRwaWNrcjogaW52YWxpZCBsb2NhbGUgXCIgKyBzZWxmLmNvbmZpZy5sb2NhbGUpKTtcbiAgICAgICAgc2VsZi5sMTBuID0gT2JqZWN0LmFzc2lnbih7fSwgZmxhdHBpY2tyLmwxMG5zLmRlZmF1bHQsIHR5cGVvZiBzZWxmLmNvbmZpZy5sb2NhbGUgPT09IFwib2JqZWN0XCIgPyBzZWxmLmNvbmZpZy5sb2NhbGUgOiBzZWxmLmNvbmZpZy5sb2NhbGUgIT09IFwiZGVmYXVsdFwiID8gZmxhdHBpY2tyLmwxMG5zW3NlbGYuY29uZmlnLmxvY2FsZV0gOiB1bmRlZmluZWQpO1xuICAgICAgICB0b2tlblJlZ2V4LksgPSBcIihcIiArIHNlbGYubDEwbi5hbVBNWzBdICsgXCJ8XCIgKyBzZWxmLmwxMG4uYW1QTVsxXSArIFwifFwiICsgc2VsZi5sMTBuLmFtUE1bMF0udG9Mb3dlckNhc2UoKSArIFwifFwiICsgc2VsZi5sMTBuLmFtUE1bMV0udG9Mb3dlckNhc2UoKSArIFwiKVwiO1xuICAgICAgICBzZWxmLmZvcm1hdERhdGUgPSBjcmVhdGVEYXRlRm9ybWF0dGVyKHNlbGYpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwb3NpdGlvbkNhbGVuZGFyKGN1c3RvbVBvc2l0aW9uRWxlbWVudCkge1xuICAgICAgICBpZiAoc2VsZi5jYWxlbmRhckNvbnRhaW5lciA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgICAgIHRyaWdnZXJFdmVudChcIm9uUHJlQ2FsZW5kYXJQb3NpdGlvblwiKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uRWxlbWVudCA9IGN1c3RvbVBvc2l0aW9uRWxlbWVudCB8fCBzZWxmLl9wb3NpdGlvbkVsZW1lbnQ7XG4gICAgICAgIHZhciBjYWxlbmRhckhlaWdodCA9IEFycmF5LnByb3RvdHlwZS5yZWR1Y2UuY2FsbChzZWxmLmNhbGVuZGFyQ29udGFpbmVyLmNoaWxkcmVuLCBmdW5jdGlvbiAoYWNjLCBjaGlsZCkge1xuICAgICAgICAgIHJldHVybiBhY2MgKyBjaGlsZC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIH0sIDApLFxuICAgICAgICAgICAgY2FsZW5kYXJXaWR0aCA9IHNlbGYuY2FsZW5kYXJDb250YWluZXIub2Zmc2V0V2lkdGgsXG4gICAgICAgICAgICBjb25maWdQb3MgPSBzZWxmLmNvbmZpZy5wb3NpdGlvbixcbiAgICAgICAgICAgIGlucHV0Qm91bmRzID0gcG9zaXRpb25FbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAgICAgZGlzdGFuY2VGcm9tQm90dG9tID0gd2luZG93LmlubmVySGVpZ2h0IC0gaW5wdXRCb3VuZHMuYm90dG9tLFxuICAgICAgICAgICAgc2hvd09uVG9wID0gY29uZmlnUG9zID09PSBcImFib3ZlXCIgfHwgY29uZmlnUG9zICE9PSBcImJlbG93XCIgJiYgZGlzdGFuY2VGcm9tQm90dG9tIDwgY2FsZW5kYXJIZWlnaHQgJiYgaW5wdXRCb3VuZHMudG9wID4gY2FsZW5kYXJIZWlnaHQ7XG4gICAgICAgIHZhciB0b3AgPSB3aW5kb3cucGFnZVlPZmZzZXQgKyBpbnB1dEJvdW5kcy50b3AgKyAoIXNob3dPblRvcCA/IHBvc2l0aW9uRWxlbWVudC5vZmZzZXRIZWlnaHQgKyAyIDogLWNhbGVuZGFySGVpZ2h0IC0gMik7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHNlbGYuY2FsZW5kYXJDb250YWluZXIsIFwiYXJyb3dUb3BcIiwgIXNob3dPblRvcCk7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHNlbGYuY2FsZW5kYXJDb250YWluZXIsIFwiYXJyb3dCb3R0b21cIiwgc2hvd09uVG9wKTtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLmlubGluZSkgcmV0dXJuO1xuICAgICAgICB2YXIgbGVmdCA9IHdpbmRvdy5wYWdlWE9mZnNldCArIGlucHV0Qm91bmRzLmxlZnQ7XG4gICAgICAgIHZhciByaWdodCA9IHdpbmRvdy5kb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoIC0gaW5wdXRCb3VuZHMucmlnaHQ7XG4gICAgICAgIHZhciByaWdodE1vc3QgPSBsZWZ0ICsgY2FsZW5kYXJXaWR0aCA+IHdpbmRvdy5kb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoO1xuICAgICAgICB0b2dnbGVDbGFzcyhzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCBcInJpZ2h0TW9zdFwiLCByaWdodE1vc3QpO1xuICAgICAgICBpZiAoc2VsZi5jb25maWcuc3RhdGljKSByZXR1cm47XG4gICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuc3R5bGUudG9wID0gdG9wICsgXCJweFwiO1xuXG4gICAgICAgIGlmICghcmlnaHRNb3N0KSB7XG4gICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gbGVmdCArIFwicHhcIjtcbiAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnN0eWxlLnJpZ2h0ID0gXCJhdXRvXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gXCJhdXRvXCI7XG4gICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS5yaWdodCA9IHJpZ2h0ICsgXCJweFwiO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlZHJhdygpIHtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm5vQ2FsZW5kYXIgfHwgc2VsZi5pc01vYmlsZSkgcmV0dXJuO1xuICAgICAgICB1cGRhdGVXZWVrZGF5cygpO1xuICAgICAgICB1cGRhdGVOYXZpZ2F0aW9uQ3VycmVudE1vbnRoKCk7XG4gICAgICAgIGJ1aWxkRGF5cygpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBmb2N1c0FuZENsb3NlKCkge1xuICAgICAgICBzZWxmLl9pbnB1dC5mb2N1cygpO1xuXG4gICAgICAgIGlmICh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiTVNJRVwiKSAhPT0gLTEgfHwgbmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHNldFRpbWVvdXQoc2VsZi5jbG9zZSwgMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZi5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNlbGVjdERhdGUoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgdmFyIGlzU2VsZWN0YWJsZSA9IGZ1bmN0aW9uIGlzU2VsZWN0YWJsZShkYXkpIHtcbiAgICAgICAgICByZXR1cm4gZGF5LmNsYXNzTGlzdCAmJiBkYXkuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZmxhdHBpY2tyLWRheVwiKSAmJiAhZGF5LmNsYXNzTGlzdC5jb250YWlucyhcImRpc2FibGVkXCIpICYmICFkYXkuY2xhc3NMaXN0LmNvbnRhaW5zKFwibm90QWxsb3dlZFwiKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgdCA9IGZpbmRQYXJlbnQoZS50YXJnZXQsIGlzU2VsZWN0YWJsZSk7XG4gICAgICAgIGlmICh0ID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgICAgdmFyIHRhcmdldCA9IHQ7XG4gICAgICAgIHZhciBzZWxlY3RlZERhdGUgPSBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiA9IG5ldyBEYXRlKHRhcmdldC5kYXRlT2JqLmdldFRpbWUoKSk7XG4gICAgICAgIHZhciBzaG91bGRDaGFuZ2VNb250aCA9IChzZWxlY3RlZERhdGUuZ2V0TW9udGgoKSA8IHNlbGYuY3VycmVudE1vbnRoIHx8IHNlbGVjdGVkRGF0ZS5nZXRNb250aCgpID4gc2VsZi5jdXJyZW50TW9udGggKyBzZWxmLmNvbmZpZy5zaG93TW9udGhzIC0gMSkgJiYgc2VsZi5jb25maWcubW9kZSAhPT0gXCJyYW5nZVwiO1xuICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZUVsZW0gPSB0YXJnZXQ7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInNpbmdsZVwiKSBzZWxmLnNlbGVjdGVkRGF0ZXMgPSBbc2VsZWN0ZWREYXRlXTtlbHNlIGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcIm11bHRpcGxlXCIpIHtcbiAgICAgICAgICB2YXIgc2VsZWN0ZWRJbmRleCA9IGlzRGF0ZVNlbGVjdGVkKHNlbGVjdGVkRGF0ZSk7XG4gICAgICAgICAgaWYgKHNlbGVjdGVkSW5kZXgpIHNlbGYuc2VsZWN0ZWREYXRlcy5zcGxpY2UocGFyc2VJbnQoc2VsZWN0ZWRJbmRleCksIDEpO2Vsc2Ugc2VsZi5zZWxlY3RlZERhdGVzLnB1c2goc2VsZWN0ZWREYXRlKTtcbiAgICAgICAgfSBlbHNlIGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInJhbmdlXCIpIHtcbiAgICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCA9PT0gMikgc2VsZi5jbGVhcihmYWxzZSk7XG4gICAgICAgICAgc2VsZi5zZWxlY3RlZERhdGVzLnB1c2goc2VsZWN0ZWREYXRlKTtcbiAgICAgICAgICBpZiAoY29tcGFyZURhdGVzKHNlbGVjdGVkRGF0ZSwgc2VsZi5zZWxlY3RlZERhdGVzWzBdLCB0cnVlKSAhPT0gMCkgc2VsZi5zZWxlY3RlZERhdGVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBhLmdldFRpbWUoKSAtIGIuZ2V0VGltZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHNldEhvdXJzRnJvbUlucHV0cygpO1xuXG4gICAgICAgIGlmIChzaG91bGRDaGFuZ2VNb250aCkge1xuICAgICAgICAgIHZhciBpc05ld1llYXIgPSBzZWxmLmN1cnJlbnRZZWFyICE9PSBzZWxlY3RlZERhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICBzZWxmLmN1cnJlbnRZZWFyID0gc2VsZWN0ZWREYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgc2VsZi5jdXJyZW50TW9udGggPSBzZWxlY3RlZERhdGUuZ2V0TW9udGgoKTtcbiAgICAgICAgICBpZiAoaXNOZXdZZWFyKSB0cmlnZ2VyRXZlbnQoXCJvblllYXJDaGFuZ2VcIik7XG4gICAgICAgICAgdHJpZ2dlckV2ZW50KFwib25Nb250aENoYW5nZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVwZGF0ZU5hdmlnYXRpb25DdXJyZW50TW9udGgoKTtcbiAgICAgICAgYnVpbGREYXlzKCk7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5taW5EYXRlICYmIHNlbGYubWluRGF0ZUhhc1RpbWUgJiYgc2VsZi5jb25maWcuZW5hYmxlVGltZSAmJiBjb21wYXJlRGF0ZXMoc2VsZWN0ZWREYXRlLCBzZWxmLmNvbmZpZy5taW5EYXRlKSA9PT0gMCkgc2V0SG91cnNGcm9tRGF0ZShzZWxmLmNvbmZpZy5taW5EYXRlKTtcbiAgICAgICAgdXBkYXRlVmFsdWUoKTtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLmVuYWJsZVRpbWUpIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBzZWxmLnNob3dUaW1lSW5wdXQgPSB0cnVlO1xuICAgICAgICB9LCA1MCk7XG5cbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1vZGUgPT09IFwicmFuZ2VcIikge1xuICAgICAgICAgIGlmIChzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBvbk1vdXNlT3Zlcih0YXJnZXQpO1xuICAgICAgICAgIH0gZWxzZSB1cGRhdGVOYXZpZ2F0aW9uQ3VycmVudE1vbnRoKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNob3VsZENoYW5nZU1vbnRoICYmIHNlbGYuY29uZmlnLm1vZGUgIT09IFwicmFuZ2VcIiAmJiBzZWxmLmNvbmZpZy5zaG93TW9udGhzID09PSAxKSBmb2N1c09uRGF5KHRhcmdldC4kaSwgMCk7ZWxzZSBzZWxmLnNlbGVjdGVkRGF0ZUVsZW0gJiYgc2VsZi5zZWxlY3RlZERhdGVFbGVtLmZvY3VzKCk7XG4gICAgICAgIGlmIChzZWxmLmhvdXJFbGVtZW50ICE9PSB1bmRlZmluZWQpIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBzZWxmLmhvdXJFbGVtZW50ICE9PSB1bmRlZmluZWQgJiYgc2VsZi5ob3VyRWxlbWVudC5zZWxlY3QoKTtcbiAgICAgICAgfSwgNDUxKTtcblxuICAgICAgICBpZiAoc2VsZi5jb25maWcuY2xvc2VPblNlbGVjdCkge1xuICAgICAgICAgIHZhciBzaW5nbGUgPSBzZWxmLmNvbmZpZy5tb2RlID09PSBcInNpbmdsZVwiICYmICFzZWxmLmNvbmZpZy5lbmFibGVUaW1lO1xuICAgICAgICAgIHZhciByYW5nZSA9IHNlbGYuY29uZmlnLm1vZGUgPT09IFwicmFuZ2VcIiAmJiBzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09PSAyICYmICFzZWxmLmNvbmZpZy5lbmFibGVUaW1lO1xuXG4gICAgICAgICAgaWYgKHNpbmdsZSB8fCByYW5nZSkge1xuICAgICAgICAgICAgZm9jdXNBbmRDbG9zZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRyaWdnZXJDaGFuZ2UoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIENBTExCQUNLUyA9IHtcbiAgICAgICAgbG9jYWxlOiBbc2V0dXBMb2NhbGVdXG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBzZXQob3B0aW9uLCB2YWx1ZSkge1xuICAgICAgICBpZiAob3B0aW9uICE9PSBudWxsICYmIHR5cGVvZiBvcHRpb24gPT09IFwib2JqZWN0XCIpIE9iamVjdC5hc3NpZ24oc2VsZi5jb25maWcsIG9wdGlvbik7ZWxzZSB7XG4gICAgICAgICAgc2VsZi5jb25maWdbb3B0aW9uXSA9IHZhbHVlO1xuICAgICAgICAgIGlmIChDQUxMQkFDS1Nbb3B0aW9uXSAhPT0gdW5kZWZpbmVkKSBDQUxMQkFDS1Nbb3B0aW9uXS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICByZXR1cm4geCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYucmVkcmF3KCk7XG4gICAgICAgIGp1bXBUb0RhdGUoKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2V0U2VsZWN0ZWREYXRlKGlucHV0RGF0ZSwgZm9ybWF0KSB7XG4gICAgICAgIHZhciBkYXRlcyA9IFtdO1xuICAgICAgICBpZiAoaW5wdXREYXRlIGluc3RhbmNlb2YgQXJyYXkpIGRhdGVzID0gaW5wdXREYXRlLm1hcChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgIHJldHVybiBzZWxmLnBhcnNlRGF0ZShkLCBmb3JtYXQpO1xuICAgICAgICB9KTtlbHNlIGlmIChpbnB1dERhdGUgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiBpbnB1dERhdGUgPT09IFwibnVtYmVyXCIpIGRhdGVzID0gW3NlbGYucGFyc2VEYXRlKGlucHV0RGF0ZSwgZm9ybWF0KV07ZWxzZSBpZiAodHlwZW9mIGlucHV0RGF0ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHN3aXRjaCAoc2VsZi5jb25maWcubW9kZSkge1xuICAgICAgICAgICAgY2FzZSBcInNpbmdsZVwiOlxuICAgICAgICAgICAgICBkYXRlcyA9IFtzZWxmLnBhcnNlRGF0ZShpbnB1dERhdGUsIGZvcm1hdCldO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcIm11bHRpcGxlXCI6XG4gICAgICAgICAgICAgIGRhdGVzID0gaW5wdXREYXRlLnNwbGl0KHNlbGYuY29uZmlnLmNvbmp1bmN0aW9uKS5tYXAoZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5wYXJzZURhdGUoZGF0ZSwgZm9ybWF0KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFwicmFuZ2VcIjpcbiAgICAgICAgICAgICAgZGF0ZXMgPSBpbnB1dERhdGUuc3BsaXQoc2VsZi5sMTBuLnJhbmdlU2VwYXJhdG9yKS5tYXAoZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5wYXJzZURhdGUoZGF0ZSwgZm9ybWF0KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBzZWxmLmNvbmZpZy5lcnJvckhhbmRsZXIobmV3IEVycm9yKFwiSW52YWxpZCBkYXRlIHN1cHBsaWVkOiBcIiArIEpTT04uc3RyaW5naWZ5KGlucHV0RGF0ZSkpKTtcbiAgICAgICAgc2VsZi5zZWxlY3RlZERhdGVzID0gZGF0ZXMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgcmV0dXJuIGQgaW5zdGFuY2VvZiBEYXRlICYmIGlzRW5hYmxlZChkLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc2VsZi5jb25maWcubW9kZSA9PT0gXCJyYW5nZVwiKSBzZWxmLnNlbGVjdGVkRGF0ZXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgIHJldHVybiBhLmdldFRpbWUoKSAtIGIuZ2V0VGltZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2V0RGF0ZShkYXRlLCB0cmlnZ2VyQ2hhbmdlLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2UgPT09IHZvaWQgMCkge1xuICAgICAgICAgIHRyaWdnZXJDaGFuZ2UgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmb3JtYXQgPT09IHZvaWQgMCkge1xuICAgICAgICAgIGZvcm1hdCA9IHNlbGYuY29uZmlnLmRhdGVGb3JtYXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGF0ZSAhPT0gMCAmJiAhZGF0ZSkgcmV0dXJuIHNlbGYuY2xlYXIodHJpZ2dlckNoYW5nZSk7XG4gICAgICAgIHNldFNlbGVjdGVkRGF0ZShkYXRlLCBmb3JtYXQpO1xuICAgICAgICBzZWxmLnNob3dUaW1lSW5wdXQgPSBzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID4gMDtcbiAgICAgICAgc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogPSBzZWxmLnNlbGVjdGVkRGF0ZXNbMF07XG4gICAgICAgIHNlbGYucmVkcmF3KCk7XG4gICAgICAgIGp1bXBUb0RhdGUoKTtcbiAgICAgICAgc2V0SG91cnNGcm9tRGF0ZSgpO1xuICAgICAgICB1cGRhdGVWYWx1ZSh0cmlnZ2VyQ2hhbmdlKTtcbiAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2UpIHRyaWdnZXJFdmVudChcIm9uQ2hhbmdlXCIpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwYXJzZURhdGVSdWxlcyhhcnIpIHtcbiAgICAgICAgcmV0dXJuIGFyci5tYXAoZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHJ1bGUgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIHJ1bGUgPT09IFwibnVtYmVyXCIgfHwgcnVsZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLnBhcnNlRGF0ZShydWxlLCB1bmRlZmluZWQsIHRydWUpO1xuICAgICAgICAgIH0gZWxzZSBpZiAocnVsZSAmJiB0eXBlb2YgcnVsZSA9PT0gXCJvYmplY3RcIiAmJiBydWxlLmZyb20gJiYgcnVsZS50bykgcmV0dXJuIHtcbiAgICAgICAgICAgIGZyb206IHNlbGYucGFyc2VEYXRlKHJ1bGUuZnJvbSwgdW5kZWZpbmVkKSxcbiAgICAgICAgICAgIHRvOiBzZWxmLnBhcnNlRGF0ZShydWxlLnRvLCB1bmRlZmluZWQpXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHJldHVybiBydWxlO1xuICAgICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNldHVwRGF0ZXMoKSB7XG4gICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlcyA9IFtdO1xuICAgICAgICBzZWxmLm5vdyA9IHNlbGYucGFyc2VEYXRlKHNlbGYuY29uZmlnLm5vdykgfHwgbmV3IERhdGUoKTtcbiAgICAgICAgdmFyIHByZWxvYWRlZERhdGUgPSBzZWxmLmNvbmZpZy5kZWZhdWx0RGF0ZSB8fCBzZWxmLmlucHV0LnZhbHVlO1xuICAgICAgICBpZiAocHJlbG9hZGVkRGF0ZSkgc2V0U2VsZWN0ZWREYXRlKHByZWxvYWRlZERhdGUsIHNlbGYuY29uZmlnLmRhdGVGb3JtYXQpO1xuICAgICAgICB2YXIgaW5pdGlhbERhdGUgPSBzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID4gMCA/IHNlbGYuc2VsZWN0ZWREYXRlc1swXSA6IHNlbGYuY29uZmlnLm1pbkRhdGUgJiYgc2VsZi5jb25maWcubWluRGF0ZS5nZXRUaW1lKCkgPiBzZWxmLm5vdy5nZXRUaW1lKCkgPyBzZWxmLmNvbmZpZy5taW5EYXRlIDogc2VsZi5jb25maWcubWF4RGF0ZSAmJiBzZWxmLmNvbmZpZy5tYXhEYXRlLmdldFRpbWUoKSA8IHNlbGYubm93LmdldFRpbWUoKSA/IHNlbGYuY29uZmlnLm1heERhdGUgOiBzZWxmLm5vdztcbiAgICAgICAgc2VsZi5jdXJyZW50WWVhciA9IGluaXRpYWxEYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgIHNlbGYuY3VycmVudE1vbnRoID0gaW5pdGlhbERhdGUuZ2V0TW9udGgoKTtcbiAgICAgICAgaWYgKHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggPiAwKSBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiA9IHNlbGYuc2VsZWN0ZWREYXRlc1swXTtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1pblRpbWUgIT09IHVuZGVmaW5lZCkgc2VsZi5jb25maWcubWluVGltZSA9IHNlbGYucGFyc2VEYXRlKHNlbGYuY29uZmlnLm1pblRpbWUsIFwiSDppXCIpO1xuICAgICAgICBpZiAoc2VsZi5jb25maWcubWF4VGltZSAhPT0gdW5kZWZpbmVkKSBzZWxmLmNvbmZpZy5tYXhUaW1lID0gc2VsZi5wYXJzZURhdGUoc2VsZi5jb25maWcubWF4VGltZSwgXCJIOmlcIik7XG4gICAgICAgIHNlbGYubWluRGF0ZUhhc1RpbWUgPSAhIXNlbGYuY29uZmlnLm1pbkRhdGUgJiYgKHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0SG91cnMoKSA+IDAgfHwgc2VsZi5jb25maWcubWluRGF0ZS5nZXRNaW51dGVzKCkgPiAwIHx8IHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0U2Vjb25kcygpID4gMCk7XG4gICAgICAgIHNlbGYubWF4RGF0ZUhhc1RpbWUgPSAhIXNlbGYuY29uZmlnLm1heERhdGUgJiYgKHNlbGYuY29uZmlnLm1heERhdGUuZ2V0SG91cnMoKSA+IDAgfHwgc2VsZi5jb25maWcubWF4RGF0ZS5nZXRNaW51dGVzKCkgPiAwIHx8IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0U2Vjb25kcygpID4gMCk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLCBcInNob3dUaW1lSW5wdXRcIiwge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3Nob3dUaW1lSW5wdXQ7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldChib29sKSB7XG4gICAgICAgICAgICBzZWxmLl9zaG93VGltZUlucHV0ID0gYm9vbDtcbiAgICAgICAgICAgIGlmIChzZWxmLmNhbGVuZGFyQ29udGFpbmVyKSB0b2dnbGVDbGFzcyhzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCBcInNob3dUaW1lSW5wdXRcIiwgYm9vbCk7XG4gICAgICAgICAgICBzZWxmLmlzT3BlbiAmJiBwb3NpdGlvbkNhbGVuZGFyKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2V0dXBJbnB1dHMoKSB7XG4gICAgICAgIHNlbGYuaW5wdXQgPSBzZWxmLmNvbmZpZy53cmFwID8gZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtaW5wdXRdXCIpIDogZWxlbWVudDtcblxuICAgICAgICBpZiAoIXNlbGYuaW5wdXQpIHtcbiAgICAgICAgICBzZWxmLmNvbmZpZy5lcnJvckhhbmRsZXIobmV3IEVycm9yKFwiSW52YWxpZCBpbnB1dCBlbGVtZW50IHNwZWNpZmllZFwiKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5pbnB1dC5fdHlwZSA9IHNlbGYuaW5wdXQudHlwZTtcbiAgICAgICAgc2VsZi5pbnB1dC50eXBlID0gXCJ0ZXh0XCI7XG4gICAgICAgIHNlbGYuaW5wdXQuY2xhc3NMaXN0LmFkZChcImZsYXRwaWNrci1pbnB1dFwiKTtcbiAgICAgICAgc2VsZi5faW5wdXQgPSBzZWxmLmlucHV0O1xuXG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5hbHRJbnB1dCkge1xuICAgICAgICAgIHNlbGYuYWx0SW5wdXQgPSBjcmVhdGVFbGVtZW50KHNlbGYuaW5wdXQubm9kZU5hbWUsIHNlbGYuaW5wdXQuY2xhc3NOYW1lICsgXCIgXCIgKyBzZWxmLmNvbmZpZy5hbHRJbnB1dENsYXNzKTtcbiAgICAgICAgICBzZWxmLl9pbnB1dCA9IHNlbGYuYWx0SW5wdXQ7XG4gICAgICAgICAgc2VsZi5hbHRJbnB1dC5wbGFjZWhvbGRlciA9IHNlbGYuaW5wdXQucGxhY2Vob2xkZXI7XG4gICAgICAgICAgc2VsZi5hbHRJbnB1dC5kaXNhYmxlZCA9IHNlbGYuaW5wdXQuZGlzYWJsZWQ7XG4gICAgICAgICAgc2VsZi5hbHRJbnB1dC5yZXF1aXJlZCA9IHNlbGYuaW5wdXQucmVxdWlyZWQ7XG4gICAgICAgICAgc2VsZi5hbHRJbnB1dC50YWJJbmRleCA9IHNlbGYuaW5wdXQudGFiSW5kZXg7XG4gICAgICAgICAgc2VsZi5hbHRJbnB1dC50eXBlID0gXCJ0ZXh0XCI7XG4gICAgICAgICAgc2VsZi5pbnB1dC50eXBlID0gXCJoaWRkZW5cIjtcbiAgICAgICAgICBpZiAoIXNlbGYuY29uZmlnLnN0YXRpYyAmJiBzZWxmLmlucHV0LnBhcmVudE5vZGUpIHNlbGYuaW5wdXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2VsZi5hbHRJbnB1dCwgc2VsZi5pbnB1dC5uZXh0U2libGluZyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNlbGYuY29uZmlnLmFsbG93SW5wdXQpIHNlbGYuX2lucHV0LnNldEF0dHJpYnV0ZShcInJlYWRvbmx5XCIsIFwicmVhZG9ubHlcIik7XG4gICAgICAgIHNlbGYuX3Bvc2l0aW9uRWxlbWVudCA9IHNlbGYuY29uZmlnLnBvc2l0aW9uRWxlbWVudCB8fCBzZWxmLl9pbnB1dDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2V0dXBNb2JpbGUoKSB7XG4gICAgICAgIHZhciBpbnB1dFR5cGUgPSBzZWxmLmNvbmZpZy5lbmFibGVUaW1lID8gc2VsZi5jb25maWcubm9DYWxlbmRhciA/IFwidGltZVwiIDogXCJkYXRldGltZS1sb2NhbFwiIDogXCJkYXRlXCI7XG4gICAgICAgIHNlbGYubW9iaWxlSW5wdXQgPSBjcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwgc2VsZi5pbnB1dC5jbGFzc05hbWUgKyBcIiBmbGF0cGlja3ItbW9iaWxlXCIpO1xuICAgICAgICBzZWxmLm1vYmlsZUlucHV0LnN0ZXAgPSBzZWxmLmlucHV0LmdldEF0dHJpYnV0ZShcInN0ZXBcIikgfHwgXCJhbnlcIjtcbiAgICAgICAgc2VsZi5tb2JpbGVJbnB1dC50YWJJbmRleCA9IDE7XG4gICAgICAgIHNlbGYubW9iaWxlSW5wdXQudHlwZSA9IGlucHV0VHlwZTtcbiAgICAgICAgc2VsZi5tb2JpbGVJbnB1dC5kaXNhYmxlZCA9IHNlbGYuaW5wdXQuZGlzYWJsZWQ7XG4gICAgICAgIHNlbGYubW9iaWxlSW5wdXQucmVxdWlyZWQgPSBzZWxmLmlucHV0LnJlcXVpcmVkO1xuICAgICAgICBzZWxmLm1vYmlsZUlucHV0LnBsYWNlaG9sZGVyID0gc2VsZi5pbnB1dC5wbGFjZWhvbGRlcjtcbiAgICAgICAgc2VsZi5tb2JpbGVGb3JtYXRTdHIgPSBpbnB1dFR5cGUgPT09IFwiZGF0ZXRpbWUtbG9jYWxcIiA/IFwiWS1tLWRcXFxcVEg6aTpTXCIgOiBpbnB1dFR5cGUgPT09IFwiZGF0ZVwiID8gXCJZLW0tZFwiIDogXCJIOmk6U1wiO1xuXG4gICAgICAgIGlmIChzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHNlbGYubW9iaWxlSW5wdXQuZGVmYXVsdFZhbHVlID0gc2VsZi5tb2JpbGVJbnB1dC52YWx1ZSA9IHNlbGYuZm9ybWF0RGF0ZShzZWxmLnNlbGVjdGVkRGF0ZXNbMF0sIHNlbGYubW9iaWxlRm9ybWF0U3RyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5taW5EYXRlKSBzZWxmLm1vYmlsZUlucHV0Lm1pbiA9IHNlbGYuZm9ybWF0RGF0ZShzZWxmLmNvbmZpZy5taW5EYXRlLCBcIlktbS1kXCIpO1xuICAgICAgICBpZiAoc2VsZi5jb25maWcubWF4RGF0ZSkgc2VsZi5tb2JpbGVJbnB1dC5tYXggPSBzZWxmLmZvcm1hdERhdGUoc2VsZi5jb25maWcubWF4RGF0ZSwgXCJZLW0tZFwiKTtcbiAgICAgICAgc2VsZi5pbnB1dC50eXBlID0gXCJoaWRkZW5cIjtcbiAgICAgICAgaWYgKHNlbGYuYWx0SW5wdXQgIT09IHVuZGVmaW5lZCkgc2VsZi5hbHRJbnB1dC50eXBlID0gXCJoaWRkZW5cIjtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChzZWxmLmlucHV0LnBhcmVudE5vZGUpIHNlbGYuaW5wdXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2VsZi5tb2JpbGVJbnB1dCwgc2VsZi5pbnB1dC5uZXh0U2libGluZyk7XG4gICAgICAgIH0gY2F0Y2ggKF9hKSB7fVxuXG4gICAgICAgIGJpbmQoc2VsZi5tb2JpbGVJbnB1dCwgXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBzZWxmLnNldERhdGUoZS50YXJnZXQudmFsdWUsIGZhbHNlLCBzZWxmLm1vYmlsZUZvcm1hdFN0cik7XG4gICAgICAgICAgdHJpZ2dlckV2ZW50KFwib25DaGFuZ2VcIik7XG4gICAgICAgICAgdHJpZ2dlckV2ZW50KFwib25DbG9zZVwiKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgICAgaWYgKHNlbGYuaXNPcGVuKSByZXR1cm4gc2VsZi5jbG9zZSgpO1xuICAgICAgICBzZWxmLm9wZW4oKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdHJpZ2dlckV2ZW50KGV2ZW50LCBkYXRhKSB7XG4gICAgICAgIHZhciBob29rcyA9IHNlbGYuY29uZmlnW2V2ZW50XTtcblxuICAgICAgICBpZiAoaG9va3MgIT09IHVuZGVmaW5lZCAmJiBob29rcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGhvb2tzW2ldICYmIGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaG9va3NbaV0oc2VsZi5zZWxlY3RlZERhdGVzLCBzZWxmLmlucHV0LnZhbHVlLCBzZWxmLCBkYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQgPT09IFwib25DaGFuZ2VcIikge1xuICAgICAgICAgIHNlbGYuaW5wdXQuZGlzcGF0Y2hFdmVudChjcmVhdGVFdmVudChcImNoYW5nZVwiKSk7XG4gICAgICAgICAgc2VsZi5pbnB1dC5kaXNwYXRjaEV2ZW50KGNyZWF0ZUV2ZW50KFwiaW5wdXRcIikpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNyZWF0ZUV2ZW50KG5hbWUpIHtcbiAgICAgICAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xuICAgICAgICBlLmluaXRFdmVudChuYW1lLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGlzRGF0ZVNlbGVjdGVkKGRhdGUpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoY29tcGFyZURhdGVzKHNlbGYuc2VsZWN0ZWREYXRlc1tpXSwgZGF0ZSkgPT09IDApIHJldHVybiBcIlwiICsgaTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaXNEYXRlSW5SYW5nZShkYXRlKSB7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5tb2RlICE9PSBcInJhbmdlXCIgfHwgc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCA8IDIpIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVEYXRlcyhkYXRlLCBzZWxmLnNlbGVjdGVkRGF0ZXNbMF0pID49IDAgJiYgY29tcGFyZURhdGVzKGRhdGUsIHNlbGYuc2VsZWN0ZWREYXRlc1sxXSkgPD0gMDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdXBkYXRlTmF2aWdhdGlvbkN1cnJlbnRNb250aCgpIHtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm5vQ2FsZW5kYXIgfHwgc2VsZi5pc01vYmlsZSB8fCAhc2VsZi5tb250aE5hdikgcmV0dXJuO1xuICAgICAgICBzZWxmLnllYXJFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uICh5ZWFyRWxlbWVudCwgaSkge1xuICAgICAgICAgIHZhciBkID0gbmV3IERhdGUoc2VsZi5jdXJyZW50WWVhciwgc2VsZi5jdXJyZW50TW9udGgsIDEpO1xuICAgICAgICAgIGQuc2V0TW9udGgoc2VsZi5jdXJyZW50TW9udGggKyBpKTtcbiAgICAgICAgICBzZWxmLm1vbnRoRWxlbWVudHNbaV0udGV4dENvbnRlbnQgPSBtb250aFRvU3RyKGQuZ2V0TW9udGgoKSwgc2VsZi5jb25maWcuc2hvcnRoYW5kQ3VycmVudE1vbnRoLCBzZWxmLmwxMG4pICsgXCIgXCI7XG4gICAgICAgICAgeWVhckVsZW1lbnQudmFsdWUgPSBkLmdldEZ1bGxZZWFyKCkudG9TdHJpbmcoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNlbGYuX2hpZGVQcmV2TW9udGhBcnJvdyA9IHNlbGYuY29uZmlnLm1pbkRhdGUgIT09IHVuZGVmaW5lZCAmJiAoc2VsZi5jdXJyZW50WWVhciA9PT0gc2VsZi5jb25maWcubWluRGF0ZS5nZXRGdWxsWWVhcigpID8gc2VsZi5jdXJyZW50TW9udGggPD0gc2VsZi5jb25maWcubWluRGF0ZS5nZXRNb250aCgpIDogc2VsZi5jdXJyZW50WWVhciA8IHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0RnVsbFllYXIoKSk7XG4gICAgICAgIHNlbGYuX2hpZGVOZXh0TW9udGhBcnJvdyA9IHNlbGYuY29uZmlnLm1heERhdGUgIT09IHVuZGVmaW5lZCAmJiAoc2VsZi5jdXJyZW50WWVhciA9PT0gc2VsZi5jb25maWcubWF4RGF0ZS5nZXRGdWxsWWVhcigpID8gc2VsZi5jdXJyZW50TW9udGggKyAxID4gc2VsZi5jb25maWcubWF4RGF0ZS5nZXRNb250aCgpIDogc2VsZi5jdXJyZW50WWVhciA+IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0RnVsbFllYXIoKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZVZhbHVlKHRyaWdnZXJDaGFuZ2UpIHtcbiAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2UgPT09IHZvaWQgMCkge1xuICAgICAgICAgIHRyaWdnZXJDaGFuZ2UgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggPT09IDApIHJldHVybiBzZWxmLmNsZWFyKHRyaWdnZXJDaGFuZ2UpO1xuXG4gICAgICAgIGlmIChzZWxmLm1vYmlsZUlucHV0ICE9PSB1bmRlZmluZWQgJiYgc2VsZi5tb2JpbGVGb3JtYXRTdHIpIHtcbiAgICAgICAgICBzZWxmLm1vYmlsZUlucHV0LnZhbHVlID0gc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogIT09IHVuZGVmaW5lZCA/IHNlbGYuZm9ybWF0RGF0ZShzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiwgc2VsZi5tb2JpbGVGb3JtYXRTdHIpIDogXCJcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBqb2luQ2hhciA9IHNlbGYuY29uZmlnLm1vZGUgIT09IFwicmFuZ2VcIiA/IHNlbGYuY29uZmlnLmNvbmp1bmN0aW9uIDogc2VsZi5sMTBuLnJhbmdlU2VwYXJhdG9yO1xuICAgICAgICBzZWxmLmlucHV0LnZhbHVlID0gc2VsZi5zZWxlY3RlZERhdGVzLm1hcChmdW5jdGlvbiAoZE9iaikge1xuICAgICAgICAgIHJldHVybiBzZWxmLmZvcm1hdERhdGUoZE9iaiwgc2VsZi5jb25maWcuZGF0ZUZvcm1hdCk7XG4gICAgICAgIH0pLmpvaW4oam9pbkNoYXIpO1xuXG4gICAgICAgIGlmIChzZWxmLmFsdElucHV0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzZWxmLmFsdElucHV0LnZhbHVlID0gc2VsZi5zZWxlY3RlZERhdGVzLm1hcChmdW5jdGlvbiAoZE9iaikge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuZm9ybWF0RGF0ZShkT2JqLCBzZWxmLmNvbmZpZy5hbHRGb3JtYXQpO1xuICAgICAgICAgIH0pLmpvaW4oam9pbkNoYXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2UgIT09IGZhbHNlKSB0cmlnZ2VyRXZlbnQoXCJvblZhbHVlVXBkYXRlXCIpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBvbk1vbnRoTmF2Q2xpY2soZSkge1xuICAgICAgICB2YXIgaXNQcmV2TW9udGggPSBzZWxmLnByZXZNb250aE5hdi5jb250YWlucyhlLnRhcmdldCk7XG4gICAgICAgIHZhciBpc05leHRNb250aCA9IHNlbGYubmV4dE1vbnRoTmF2LmNvbnRhaW5zKGUudGFyZ2V0KTtcblxuICAgICAgICBpZiAoaXNQcmV2TW9udGggfHwgaXNOZXh0TW9udGgpIHtcbiAgICAgICAgICBjaGFuZ2VNb250aChpc1ByZXZNb250aCA/IC0xIDogMSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZi55ZWFyRWxlbWVudHMuaW5kZXhPZihlLnRhcmdldCkgPj0gMCkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBlLnRhcmdldC5zZWxlY3QoKTtcbiAgICAgICAgfSBlbHNlIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJhcnJvd1VwXCIpKSB7XG4gICAgICAgICAgc2VsZi5jaGFuZ2VZZWFyKHNlbGYuY3VycmVudFllYXIgKyAxKTtcbiAgICAgICAgfSBlbHNlIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJhcnJvd0Rvd25cIikpIHtcbiAgICAgICAgICBzZWxmLmNoYW5nZVllYXIoc2VsZi5jdXJyZW50WWVhciAtIDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRpbWVXcmFwcGVyKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgaXNLZXlEb3duID0gZS50eXBlID09PSBcImtleWRvd25cIixcbiAgICAgICAgICAgIGlucHV0ID0gZS50YXJnZXQ7XG5cbiAgICAgICAgaWYgKHNlbGYuYW1QTSAhPT0gdW5kZWZpbmVkICYmIGUudGFyZ2V0ID09PSBzZWxmLmFtUE0pIHtcbiAgICAgICAgICBzZWxmLmFtUE0udGV4dENvbnRlbnQgPSBzZWxmLmwxMG4uYW1QTVtpbnQoc2VsZi5hbVBNLnRleHRDb250ZW50ID09PSBzZWxmLmwxMG4uYW1QTVswXSldO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1pbiA9IHBhcnNlRmxvYXQoaW5wdXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1taW5cIikpLFxuICAgICAgICAgICAgbWF4ID0gcGFyc2VGbG9hdChpbnB1dC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1heFwiKSksXG4gICAgICAgICAgICBzdGVwID0gcGFyc2VGbG9hdChpbnB1dC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN0ZXBcIikpLFxuICAgICAgICAgICAgY3VyVmFsdWUgPSBwYXJzZUludChpbnB1dC52YWx1ZSwgMTApLFxuICAgICAgICAgICAgZGVsdGEgPSBlLmRlbHRhIHx8IChpc0tleURvd24gPyBlLndoaWNoID09PSAzOCA/IDEgOiAtMSA6IDApO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXJWYWx1ZSArIHN0ZXAgKiBkZWx0YTtcblxuICAgICAgICBpZiAodHlwZW9mIGlucHV0LnZhbHVlICE9PSBcInVuZGVmaW5lZFwiICYmIGlucHV0LnZhbHVlLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgIHZhciBpc0hvdXJFbGVtID0gaW5wdXQgPT09IHNlbGYuaG91ckVsZW1lbnQsXG4gICAgICAgICAgICAgIGlzTWludXRlRWxlbSA9IGlucHV0ID09PSBzZWxmLm1pbnV0ZUVsZW1lbnQ7XG5cbiAgICAgICAgICBpZiAobmV3VmFsdWUgPCBtaW4pIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gbWF4ICsgbmV3VmFsdWUgKyBpbnQoIWlzSG91ckVsZW0pICsgKGludChpc0hvdXJFbGVtKSAmJiBpbnQoIXNlbGYuYW1QTSkpO1xuICAgICAgICAgICAgaWYgKGlzTWludXRlRWxlbSkgaW5jcmVtZW50TnVtSW5wdXQodW5kZWZpbmVkLCAtMSwgc2VsZi5ob3VyRWxlbWVudCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChuZXdWYWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpbnB1dCA9PT0gc2VsZi5ob3VyRWxlbWVudCA/IG5ld1ZhbHVlIC0gbWF4IC0gaW50KCFzZWxmLmFtUE0pIDogbWluO1xuICAgICAgICAgICAgaWYgKGlzTWludXRlRWxlbSkgaW5jcmVtZW50TnVtSW5wdXQodW5kZWZpbmVkLCAxLCBzZWxmLmhvdXJFbGVtZW50KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VsZi5hbVBNICYmIGlzSG91ckVsZW0gJiYgKHN0ZXAgPT09IDEgPyBuZXdWYWx1ZSArIGN1clZhbHVlID09PSAyMyA6IE1hdGguYWJzKG5ld1ZhbHVlIC0gY3VyVmFsdWUpID4gc3RlcCkpIHtcbiAgICAgICAgICAgIHNlbGYuYW1QTS50ZXh0Q29udGVudCA9IHNlbGYubDEwbi5hbVBNW2ludChzZWxmLmFtUE0udGV4dENvbnRlbnQgPT09IHNlbGYubDEwbi5hbVBNWzBdKV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaW5wdXQudmFsdWUgPSBwYWQobmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGluaXQoKTtcbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9mbGF0cGlja3Iobm9kZUxpc3QsIGNvbmZpZykge1xuICAgICAgdmFyIG5vZGVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobm9kZUxpc3QpO1xuICAgICAgdmFyIGluc3RhbmNlcyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBub2RlID0gbm9kZXNbaV07XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAobm9kZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWZwLW9taXRcIikgIT09IG51bGwpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgaWYgKG5vZGUuX2ZsYXRwaWNrciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBub2RlLl9mbGF0cGlja3IuZGVzdHJveSgpO1xuXG4gICAgICAgICAgICBub2RlLl9mbGF0cGlja3IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbm9kZS5fZmxhdHBpY2tyID0gRmxhdHBpY2tySW5zdGFuY2Uobm9kZSwgY29uZmlnIHx8IHt9KTtcbiAgICAgICAgICBpbnN0YW5jZXMucHVzaChub2RlLl9mbGF0cGlja3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaW5zdGFuY2VzLmxlbmd0aCA9PT0gMSA/IGluc3RhbmNlc1swXSA6IGluc3RhbmNlcztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIEhUTUxFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBIVE1MQ29sbGVjdGlvbi5wcm90b3R5cGUuZmxhdHBpY2tyID0gTm9kZUxpc3QucHJvdG90eXBlLmZsYXRwaWNrciA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIF9mbGF0cGlja3IodGhpcywgY29uZmlnKTtcbiAgICAgIH07XG5cbiAgICAgIEhUTUxFbGVtZW50LnByb3RvdHlwZS5mbGF0cGlja3IgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgIHJldHVybiBfZmxhdHBpY2tyKFt0aGlzXSwgY29uZmlnKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGZsYXRwaWNrciA9IGZ1bmN0aW9uIGZsYXRwaWNrcihzZWxlY3RvciwgY29uZmlnKSB7XG4gICAgICBpZiAoc2VsZWN0b3IgaW5zdGFuY2VvZiBOb2RlTGlzdCkgcmV0dXJuIF9mbGF0cGlja3Ioc2VsZWN0b3IsIGNvbmZpZyk7ZWxzZSBpZiAodHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2ZsYXRwaWNrcih3aW5kb3cuZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvciksIGNvbmZpZyk7XG4gICAgICByZXR1cm4gX2ZsYXRwaWNrcihbc2VsZWN0b3JdLCBjb25maWcpO1xuICAgIH07XG5cbiAgICBmbGF0cGlja3IuZGVmYXVsdENvbmZpZyA9IGRlZmF1bHRzO1xuICAgIGZsYXRwaWNrci5sMTBucyA9IHtcbiAgICAgIGVuOiBPYmplY3QuYXNzaWduKHt9LCBlbmdsaXNoKSxcbiAgICAgIGRlZmF1bHQ6IE9iamVjdC5hc3NpZ24oe30sIGVuZ2xpc2gpXG4gICAgfTtcblxuICAgIGZsYXRwaWNrci5sb2NhbGl6ZSA9IGZ1bmN0aW9uIChsMTBuKSB7XG4gICAgICBmbGF0cGlja3IubDEwbnMuZGVmYXVsdCA9IE9iamVjdC5hc3NpZ24oe30sIGZsYXRwaWNrci5sMTBucy5kZWZhdWx0LCBsMTBuKTtcbiAgICB9O1xuXG4gICAgZmxhdHBpY2tyLnNldERlZmF1bHRzID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgZmxhdHBpY2tyLmRlZmF1bHRDb25maWcgPSBPYmplY3QuYXNzaWduKHt9LCBmbGF0cGlja3IuZGVmYXVsdENvbmZpZywgY29uZmlnKTtcbiAgICB9O1xuXG4gICAgZmxhdHBpY2tyLnBhcnNlRGF0ZSA9IGNyZWF0ZURhdGVQYXJzZXIoe30pO1xuICAgIGZsYXRwaWNrci5mb3JtYXREYXRlID0gY3JlYXRlRGF0ZUZvcm1hdHRlcih7fSk7XG4gICAgZmxhdHBpY2tyLmNvbXBhcmVEYXRlcyA9IGNvbXBhcmVEYXRlcztcblxuICAgIGlmICh0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBqUXVlcnkuZm4uZmxhdHBpY2tyID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICByZXR1cm4gX2ZsYXRwaWNrcih0aGlzLCBjb25maWcpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBEYXRlLnByb3RvdHlwZS5mcF9pbmNyID0gZnVuY3Rpb24gKGRheXMpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLmdldEZ1bGxZZWFyKCksIHRoaXMuZ2V0TW9udGgoKSwgdGhpcy5nZXREYXRlKCkgKyAodHlwZW9mIGRheXMgPT09IFwic3RyaW5nXCIgPyBwYXJzZUludChkYXlzLCAxMCkgOiBkYXlzKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBmbGF0cGlja3I7XG5cbn0pKSk7XG5cblxuLyoqKi8gfSksXG4vKiAyNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBnYWxsZXJ5U2VjdGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZ2FsbGVyeS13cmFwcGVyJyk7XG5cbiAgaWYgKCFnYWxsZXJ5U2VjdGlvbnMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBbXS5mb3JFYWNoLmNhbGwoZ2FsbGVyeVNlY3Rpb25zLCBmdW5jdGlvbiAoZ2FsbGVyeSkge1xuICAgIHZhciBhZGRJbWFnZSA9IGdhbGxlcnkucXVlcnlTZWxlY3RvcignLmFkZC1nYWxsZXJ5LWltYWdlcycpO1xuICAgIHZhciBIaWRkZW4gPSAoMCwgX3NlcmlhbGl6ZWRJbnB1dDIuZGVmYXVsdCkoZ2FsbGVyeSwgJy5pbWFnZS1nYWxsZXJ5LWhpZGRlbicpO1xuXG4gICAgdmFyIHJlbW92ZSA9ICgwLCBfdXRpbGl0aWVzLnJlbW92ZUl0ZW1zKShIaWRkZW4sIF91dGlsaXRpZXMub25SZW1vdmVJbWFnZSk7XG4gICAgdmFyIGRyYWcgPSAoMCwgX3V0aWxpdGllcy5kcmFnSXRlbXMpKEhpZGRlbiwgX3V0aWxpdGllcy5vbkRyYWdJbWFnZSk7XG4gICAgdmFyIExpc3QgPSAoMCwgX2xpc3QyLmRlZmF1bHQpKGdhbGxlcnksIHtcbiAgICAgIGxpc3Q6ICcuZ2FsbGVyeS1pbWFnZXMnLFxuICAgICAgb25EcmFnOiBkcmFnLFxuICAgICAgb25SZW1vdmU6IHJlbW92ZSxcbiAgICAgIGxpc3RUZW1wbGF0ZTogaW1hZ2VJdGVtXG4gICAgfSk7XG5cbiAgICB2YXIgbWVkaWFGcmFtZSA9IHdwLm1lZGlhKHtcbiAgICAgIHRpdGxlOiAnQ2hvb3NlIE1lZGlhJyxcbiAgICAgIGJ1dHRvbjoge1xuICAgICAgICB0ZXh0OiAnVXNlIFNlbGVjdGVkIE1lZGlhJ1xuICAgICAgfSxcbiAgICAgIG11bHRpcGxlOiB0cnVlXG4gICAgfSk7XG5cbiAgICBhZGRJbWFnZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG1lZGlhRnJhbWUub3BlbigpO1xuICAgIH0pO1xuXG4gICAgbWVkaWFGcmFtZS5vbignc2VsZWN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGF0dGFjaG1lbnRzID0gbWVkaWFGcmFtZS5zdGF0ZSgpLmdldCgnc2VsZWN0aW9uJykudG9KU09OKCk7XG5cbiAgICAgIGF0dGFjaG1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGF0dGFjaG1lbnQpIHtcbiAgICAgICAgTGlzdC5hZGQoYXR0YWNobWVudCk7XG4gICAgICAgIEhpZGRlbi5hZGQoYXR0YWNobWVudC5pZCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG52YXIgX2xpc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG52YXIgX2xpc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbGlzdCk7XG5cbnZhciBfc2VyaWFsaXplZElucHV0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxudmFyIF9zZXJpYWxpemVkSW5wdXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2VyaWFsaXplZElucHV0KTtcblxudmFyIF91dGlsaXRpZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgaW1hZ2VJdGVtID0gZnVuY3Rpb24gaW1hZ2VJdGVtKGltYWdlKSB7XG4gIHJldHVybiAnPGxpIGNsYXNzPVwiZ2FsbGVyeS1pbWFnZS1pdGVtXCI+PHNwYW4gY2xhc3M9XCJnYWxsZXJ5LWlhbWdlLWlkXCI+JyArIGltYWdlLmlkICsgJzwvc3Bhbj48aW1nIHNyYz1cIicgKyBpbWFnZS51cmwgKyAnXCIgY2xhc3M9XCJnYWxsZXJ5LWltYWdlXCIvPjxzcGFuPjxzdmcgY2xhc3M9XCJyZW1vdmUtZ2FsbGVyeS1pbWFnZVwiIHZpZXdCb3g9XCIwIDAgMjAgMjBcIj5cXG4gIDxwYXRoIGQ9XCJNMTAgMmM0LjQyIDAgOCAzLjU4IDggOHMtMy41OCA4LTggOC04LTMuNTgtOC04IDMuNTgtOCA4LTh6TTE1IDEzbC0zLTMgMy0zLTItMi0zIDMtMy0zLTIgMiAzIDMtMyAzIDIgMiAzLTMgMyAzelwiPjwvcGF0aD5cXG48L3N2Zz48L3NwYW4+PC9saT4nO1xufTtcblxuLyoqKi8gfSksXG4vKiAyNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0YWJsZUxpc3RzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRhYmxlLWxpc3QnKTtcblxuICBpZiAoIXRhYmxlTGlzdHMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBbXS5mb3JFYWNoLmNhbGwodGFibGVMaXN0cywgZnVuY3Rpb24gKHRhYmxlTGlzdCkge1xuICAgIHZhciBhZGRSb3cgPSB0YWJsZUxpc3QucXVlcnlTZWxlY3RvcignLnRhYmxlLWxpc3QtYWRkJyk7XG4gICAgdmFyIEhpZGRlbiA9ICgwLCBfc2VyaWFsaXplZElucHV0Mi5kZWZhdWx0KSh0YWJsZUxpc3QsICcudGFibGUtbGlzdC1oaWRkZW4nKTtcbiAgICB2YXIgcmVtb3ZlID0gKDAsIF91dGlsaXRpZXMucmVtb3ZlSXRlbXMpKEhpZGRlbiwgX3V0aWxpdGllcy5vblJlbW92ZVRhYmxlKTtcbiAgICB2YXIgZHJhZyA9ICgwLCBfdXRpbGl0aWVzLmRyYWdJdGVtcykoSGlkZGVuLCBfdXRpbGl0aWVzLm9uRHJhZ1RhYmxlKTtcbiAgICB2YXIgTGlzdCA9ICgwLCBfbGlzdDIuZGVmYXVsdCkodGFibGVMaXN0LCB7XG4gICAgICBsaXN0OiAnLnRhYmxlLWxpc3QtbGlzdCcsXG4gICAgICBvbkRyYWc6IGRyYWcsXG4gICAgICBvblJlbW92ZTogcmVtb3ZlLFxuICAgICAgbGlzdFRlbXBsYXRlOiB0YWJsZUl0ZW1cbiAgICB9KTtcblxuICAgIHZhciB3cmFwcGVyID0gdGFibGVMaXN0LnF1ZXJ5U2VsZWN0b3IoJy50ZXh0LWxpc3Qtd3JhcHBlcicpO1xuICAgIHZhciBrZXkgPSB3cmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJy50YWJsZS1saXN0LWtleScpO1xuICAgIHZhciB2YWx1ZSA9IHdyYXBwZXIucXVlcnlTZWxlY3RvcignLnRhYmxlLWxpc3QtdmFsdWUnKTtcblxuICAgIGFkZFJvdy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgdmFyIHJvd0RhdGEgPSB7XG4gICAgICAgIGtleToga2V5LnZhbHVlLFxuICAgICAgICB2YWx1ZTogdmFsdWUudmFsdWVcbiAgICAgIH07XG5cbiAgICAgIExpc3QuYWRkKHJvd0RhdGEpO1xuICAgICAgSGlkZGVuLmFkZChyb3dEYXRhKTtcblxuICAgICAga2V5LnZhbHVlID0gJyc7XG4gICAgICB2YWx1ZS52YWx1ZSA9ICcnO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbnZhciBfbGlzdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cbnZhciBfbGlzdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9saXN0KTtcblxudmFyIF9zZXJpYWxpemVkSW5wdXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX3NlcmlhbGl6ZWRJbnB1dDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXJpYWxpemVkSW5wdXQpO1xuXG52YXIgX3V0aWxpdGllcyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciB0YWJsZUl0ZW0gPSBmdW5jdGlvbiB0YWJsZUl0ZW0ocm93RGF0YSkge1xuICByZXR1cm4gJzxsaSBjbGFzcz1cInRleHQtbGlzdC1pdGVtIHRhYmxlLWxpc3QtaXRlbVwiPlxcbiAgICA8c3BhbiBjbGFzcz1cInRhYmxlLWxpc3Qta2V5XCI+JyArIHJvd0RhdGEua2V5ICsgJzwvc3Bhbj5cXG4gICAgPHNwYW4gY2xhc3M9XCJ0YWJsZS1saXN0LXZhbHVlXCI+JyArIHJvd0RhdGEudmFsdWUgKyAnPC9zcGFuPlxcbiAgICA8c3ZnIHZpZXdCb3g9XCIwIDAgMjAgMjBcIj5cXG4gICAgICAgIDxwYXRoIGQ9XCJNMTAgMmM0LjQyIDAgOCAzLjU4IDggOHMtMy41OCA4LTggOC04LTMuNTgtOC04IDMuNTgtOCA4LTh6TTE1IDEzbC0zLTMgMy0zLTItMi0zIDMtMy0zLTIgMiAzIDMtMyAzIDIgMiAzLTMgMyAzelwiPjwvcGF0aD5cXG4gICAgPC9zdmc+XFxuPC9saT4nO1xufTtcblxuLyoqKi8gfSlcbi8qKioqKiovIF0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBpbmRleC5idW5kbGUuanMiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA1KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCBmMDY5YWY2ZWE1MjEwYTNhYTUzOSIsInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgZHJhZ3VsYSBmcm9tICdkcmFndWxhJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oIHBhcmVudCwgYXJncyApIHtcbiAgICBjb25zdCBsaXN0ID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3IoYXJncy5saXN0KTtcblxuICAgIHJlZ2lzdGVyRHJhZ0V2ZW50cyhsaXN0LCBhcmdzLm9uRHJhZyk7XG4gICAgcmVnaXN0ZXJSZW1vdmVFdmVudHMobGlzdCwgYXJncy5vblJlbW92ZSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBhZGQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCBodG1sID0gYXJncy5saXN0VGVtcGxhdGUoIHZhbHVlICk7XG4gICAgICAgICAgICBjb25zdCBsaXN0SXRlbSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCkuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KGh0bWwpO1xuXG4gICAgICAgICAgICBsaXN0LmFwcGVuZENoaWxkKCBsaXN0SXRlbSApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jb25zdCByZWdpc3RlclJlbW92ZUV2ZW50cyA9IChsaXN0LCBvblJlbW92ZSkgPT4ge1xuICAgIGNvbnN0IGxpc3RJdGVtcyA9IGxpc3QucXVlcnlTZWxlY3RvckFsbCgnbGknKTtcblxuICAgIGxpc3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSAoJ3N2ZycgPT09IGUudGFyZ2V0LnRhZ05hbWUpID8gZS50YXJnZXQgOiBlLnRhcmdldC5jbG9zZXN0KCdzdmcnKTtcblxuICAgICAgICBpZiAoICdzdmcnID09PSB0YXJnZXQudGFnTmFtZSApIHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RJdGVtID0gZS50YXJnZXQuY2xvc2VzdCgnbGknKTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gbGlzdEl0ZW0ucXVlcnlTZWxlY3Rvcignc3BhbicpLmlubmVySFRNTDtcbiAgICAgICAgICAgIGxpc3QucmVtb3ZlQ2hpbGQoIGxpc3RJdGVtICk7XG4gICAgICAgICAgICBvblJlbW92ZSggdmFsdWUgKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGxpc3RJdGVtcztcbn1cblxuY29uc3QgcmVnaXN0ZXJEcmFnRXZlbnRzID0gKGxpc3QsIGNhbGxiYWNrKSA9PiB7XG4gICAgY29uc3QgZHJha2UgPSBkcmFndWxhKFtsaXN0XSk7XG5cbiAgICBkcmFrZS5vbignZHJhZ2VuZCcsIChlbCkgPT4ge1xuICAgICAgICBjb25zdCBsaXN0SXRlbXMgPSBsaXN0LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJyk7XG4gICAgICAgIGNhbGxiYWNrKGxpc3QsIGxpc3RJdGVtcyk7XG4gICAgfSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9saXN0LmpzIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocGFyZW50LCBoaWRkZW5JbnB1dCkge1xuICBjb25zdCBoaWRkZW5FbCA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKGhpZGRlbklucHV0KTtcblxuICBjb25zdCBnZXRDdXJyZW50VmFsdWUgPSAoKSA9PlxuICAgIGhpZGRlbkVsLnZhbHVlID8gSlNPTi5wYXJzZShoaWRkZW5FbC52YWx1ZSkgOiBbXTtcblxuICBjb25zdCBhZGRWYWx1ZSA9IHZhbHVlID0+IHtcbiAgICBjb25zdCBjdXJyZW50VmFsdWUgPSBnZXRDdXJyZW50VmFsdWUoKTtcbiAgICByZXR1cm4gY3VycmVudFZhbHVlLmNvbmNhdCh2YWx1ZSk7XG4gIH07XG5cbiAgY29uc3QgcmVtb3ZlVmFsdWUgPSAodmFsdWUsIG9uUmVtb3ZlKSA9PiB7XG4gICAgY29uc3QgY3VycmVudFZhbHVlID0gZ2V0Q3VycmVudFZhbHVlKCk7XG4gICAgcmV0dXJuIG9uUmVtb3ZlKGN1cnJlbnRWYWx1ZSwgdmFsdWUpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgYWRkOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaGlkZGVuRWwudmFsdWUgPSBKU09OLnN0cmluZ2lmeShhZGRWYWx1ZSh2YWx1ZSkpO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbih2YWx1ZSwgb25SZW1vdmUpIHtcbiAgICAgIGhpZGRlbkVsLnZhbHVlID0gSlNPTi5zdHJpbmdpZnkocmVtb3ZlVmFsdWUodmFsdWUsIG9uUmVtb3ZlKSk7XG4gICAgfSxcbiAgICB1cGRhdGU6IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgaGlkZGVuRWwudmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZXMpO1xuICAgIH0sXG4gIH07XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zZXJpYWxpemVkLWlucHV0LmpzIiwiZXhwb3J0IGNvbnN0IHJlbW92ZUl0ZW1zID0gKEhpZGRlbiwgb25SZW1vdmUpID0+IHtcbiAgcmV0dXJuIHZhbHVlID0+IHtcbiAgICBIaWRkZW4ucmVtb3ZlKHZhbHVlLCBvblJlbW92ZSk7XG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgZHJhZ0l0ZW1zID0gKEhpZGRlbiwgb25EcmFnKSA9PiB7XG4gIHJldHVybiAobGlzdCwgbGlzdEl0ZW1zKSA9PiB7XG4gICAgY29uc3QgdmFsdWVzID0gb25EcmFnKGxpc3QsIGxpc3RJdGVtcyk7XG4gICAgSGlkZGVuLnVwZGF0ZSh2YWx1ZXMpO1xuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IG9uRHJhZ09iamVjdCA9IChsaXN0LCBsaXN0SXRlbXMpID0+IHtcbiAgcmV0dXJuIFtdLnJlZHVjZS5jYWxsKFxuICAgIGxpc3RJdGVtcyxcbiAgICAoYWNjLCBsaXN0SXRlbSkgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSB7XG4gICAgICAgIGlkOiBsaXN0SXRlbS5kYXRhc2V0LmlkLFxuICAgICAgICB0aXRsZTogbGlzdEl0ZW0ucXVlcnlTZWxlY3Rvcignc3BhbicpLmlubmVySFRNTCxcbiAgICAgIH07XG4gICAgICByZXR1cm4gYWNjLmNvbmNhdChbdmFsdWVdKTtcbiAgICB9LFxuICAgIFtdLFxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IG9uRHJhZ1RleHQgPSAobGlzdCwgbGlzdEl0ZW1zKSA9PiB7XG4gIHJldHVybiBbXS5yZWR1Y2UuY2FsbChcbiAgICBsaXN0SXRlbXMsXG4gICAgKGFjYywgbGlzdEl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gbGlzdEl0ZW0ucXVlcnlTZWxlY3Rvcignc3BhbicpLmlubmVySFRNTDtcbiAgICAgIHJldHVybiBhY2MuY29uY2F0KFt2YWx1ZV0pO1xuICAgIH0sXG4gICAgW10sXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3Qgb25EcmFnSW1hZ2UgPSAobGlzdCwgbGlzdEl0ZW1zKSA9PiB7XG4gIHJldHVybiBbXS5yZWR1Y2UuY2FsbChcbiAgICBsaXN0SXRlbXMsXG4gICAgKGFjYywgbGlzdEl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gcGFyc2VJbnQobGlzdEl0ZW0ucXVlcnlTZWxlY3Rvcignc3BhbicpLmlubmVySFRNTCk7XG4gICAgICByZXR1cm4gYWNjLmNvbmNhdChbdmFsdWVdKTtcbiAgICB9LFxuICAgIFtdLFxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IG9uUmVtb3ZlT2JqZWN0ID0gKGN1cnJlbnRWYWx1ZSwgbmV3VmFsdWUpID0+IHtcbiAgcmV0dXJuIGN1cnJlbnRWYWx1ZS5maWx0ZXIoY3VycmVudCA9PiBjdXJyZW50LnRpdGxlICE9PSBuZXdWYWx1ZSk7XG59O1xuXG5leHBvcnQgY29uc3Qgb25SZW1vdmVUZXh0ID0gKGN1cnJlbnRWYWx1ZSwgbmV3VmFsdWUpID0+IHtcbiAgcmV0dXJuIGN1cnJlbnRWYWx1ZS5maWx0ZXIoY3VycmVudCA9PiBjdXJyZW50ICE9PSBuZXdWYWx1ZSk7XG59O1xuXG5leHBvcnQgY29uc3Qgb25SZW1vdmVJbWFnZSA9IChjdXJyZW50VmFsdWUsIG5ld1ZhbHVlKSA9PiB7XG4gIHJldHVybiBjdXJyZW50VmFsdWUuZmlsdGVyKGN1cnJlbnQgPT4gY3VycmVudCAhPT0gcGFyc2VJbnQobmV3VmFsdWUpKTtcbn07XG5cbmV4cG9ydCBjb25zdCBvbkRyYWdUYWJsZSA9IChsaXN0LCBsaXN0SXRlbXMpID0+IHtcbiAgcmV0dXJuIFtdLnJlZHVjZS5jYWxsKFxuICAgIGxpc3RJdGVtcyxcbiAgICAoYWNjLCBsaXN0SXRlbSkgPT4ge1xuICAgICAgY29uc3Qga2V5ID0gbGlzdEl0ZW0ucXVlcnlTZWxlY3RvcignLnRhYmxlLWxpc3Qta2V5JykuaW5uZXJIVE1MO1xuICAgICAgY29uc3QgdmFsdWUgPSBsaXN0SXRlbS5xdWVyeVNlbGVjdG9yKCcudGFibGUtbGlzdC12YWx1ZScpLmlubmVySFRNTDtcbiAgICAgIHJldHVybiBhY2MuY29uY2F0KFt7IGtleToga2V5LCB2YWx1ZTogdmFsdWUgfV0pO1xuICAgIH0sXG4gICAgW10sXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3Qgb25SZW1vdmVUYWJsZSA9IChjdXJyZW50VmFsdWUsIG5ld1ZhbHVlKSA9PiB7XG4gIHJldHVybiBjdXJyZW50VmFsdWUuZmlsdGVyKGN1cnJlbnQgPT4gY3VycmVudC5rZXkgIT09IG5ld1ZhbHVlKTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi91dGlsaXRpZXMuanMiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhdXRvc3VnZ2VzdCwgZW5kcG9pbnQsIG9uU2VsZWN0LCBvbkVtcHR5KSB7XG4gIGxldCBzZWFyY2hUZXJtO1xuICBpZiAoIWF1dG9zdWdnZXN0KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgbGV0IHhociA9IGZhbHNlO1xuXG4gIGF1dG9zdWdnZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZSA9PiB7XG4gICAgaWYgKDAgPT09IGUudGFyZ2V0LnZhbHVlLmxlbmd0aCAmJiBvbkVtcHR5KSB7XG4gICAgICBzZWFyY2hUZXJtID0gZS50YXJnZXQudmFsdWU7XG4gICAgICBvbkVtcHR5KCk7XG4gICAgfVxuXG4gICAgaWYgKDMgPiBlLnRhcmdldC52YWx1ZS5sZW5ndGgpIHtcbiAgICAgIHNlYXJjaFRlcm0gPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoZS50YXJnZXQudmFsdWUgPT09IHNlYXJjaFRlcm0pIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gb25BdXRvU3VnZ2VzdElucHV0KGUpO1xuXG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgb25TZWxlY3QodmFsdWUsIGF1dG9zdWdnZXN0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHNlYXJjaFRlcm0gPSBlLnRhcmdldC52YWx1ZTtcblxuICAgIGF1dG9zdWdnZXN0LmNsYXNzTGlzdC5hZGQoJ3Nob3cnKTtcbiAgICB4aHIgPSBnZXRPcHRpb25zKHhociwgdXBkYXRlT3B0aW9ucywgYXV0b3N1Z2dlc3QsIGVuZHBvaW50KTtcbiAgfSk7XG4gIGF1dG9zdWdnZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSBvbkF1dG9TdWdnZXN0SW5wdXQoZSk7XG5cbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIG9uU2VsZWN0KHZhbHVlLCBhdXRvc3VnZ2VzdCk7XG4gICAgfVxuICB9KTtcbn1cblxuY29uc3Qgb25BdXRvU3VnZ2VzdElucHV0ID0gZSA9PiB7XG4gIGNvbnN0IGlucHV0ID0gZS50YXJnZXQ7XG4gIGNvbnN0IGlucHV0VmFsdWUgPSBpbnB1dC52YWx1ZTtcbiAgY29uc3QgbGlzdE5hbWUgPSBpbnB1dC5nZXRBdHRyaWJ1dGUoJ2xpc3QnKTtcbiAgY29uc3QgbGlzdE9wdGlvbnMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChsaXN0TmFtZSkuY2hpbGROb2RlcztcblxuICBjb25zdCBtYXRjaCA9IFtdLnJlZHVjZS5jYWxsKFxuICAgIGxpc3RPcHRpb25zLFxuICAgIChhY2MsIG9wdGlvbikgPT4ge1xuICAgICAgaWYgKG9wdGlvbi52YWx1ZSA9PT0gaW5wdXRWYWx1ZSkge1xuICAgICAgICByZXR1cm4gYWNjLmNvbmNhdCh7XG4gICAgICAgICAgaWQ6IG9wdGlvbi5kYXRhc2V0LmlkLFxuICAgICAgICAgIHRpdGxlOiBvcHRpb24udmFsdWUsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LFxuICAgIFtdLFxuICApO1xuXG4gIHJldHVybiAwID09PSBtYXRjaC5sZW5ndGggPyBmYWxzZSA6IG1hdGNoWzBdO1xufTtcblxuY29uc3QgZ2V0T3B0aW9ucyA9ICh4aHIsIGNhbGxiYWNrLCBpbnB1dCwgZW5kcG9pbnQpID0+IHtcbiAgY29uc3QgcXVlcnkgPSBidWlsZFF1ZXJ5KGlucHV0LnZhbHVlKTtcbiAgY29uc3QgdXJsID0gZW5kcG9pbnQgKyBxdWVyeTtcblxuICBpZiAoeGhyKSB7XG4gICAgeGhyLmFib3J0KCk7XG4gIH1cblxuICB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICB4aHIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAnbG9hZCcsXG4gICAgZXZ0ID0+IHtcbiAgICAgIGNhbGxiYWNrKGZhbHNlLCBldnQpO1xuICAgIH0sXG4gICAgZmFsc2UsXG4gICk7XG5cbiAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCAmJiBpc0pTT04oeGhyLnJlc3BvbnNlVGV4dCkpIHtcbiAgICAgIGNhbGxiYWNrKGZhbHNlLCB7IHJlc3VsdHM6IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCksIGlucHV0OiBpbnB1dCB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHhoci5yZXNwb25zZVRleHQgJiYgaXNKU09OKHhoci5yZXNwb25zZVRleHQpKSB7XG4gICAgICAgIGNhbGxiYWNrKFxuICAgICAgICAgIHsgbWVzc2FnZTogSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KSwgaW5wdXQ6IGlucHV0IH0sXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHhoci5hZGRFdmVudExpc3RlbmVyKFxuICAgICdlcnJvcicsXG4gICAgZXZ0ID0+IHtcbiAgICAgIGNhbGxiYWNrKGV2dCwgZmFsc2UpO1xuICAgIH0sXG4gICAgZmFsc2UsXG4gICk7XG5cbiAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgJ2Fib3J0JyxcbiAgICBldnQgPT4ge1xuICAgICAgY2FsbGJhY2sodHJ1ZSwgZmFsc2UpO1xuICAgIH0sXG4gICAgZmFsc2UsXG4gICk7XG5cbiAgeGhyLm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XG5cbiAgeGhyLnNlbmQoKTtcblxuICByZXR1cm4geGhyO1xufTtcblxuY29uc3QgdXBkYXRlT3B0aW9ucyA9IChlcnJvciwgcmVzcG9uc2UpID0+IHtcbiAgaWYgKGVycm9yKSB7XG4gICAgaWYgKHRydWUgPT09IGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZXJyb3IuaW5wdXQuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdycpO1xuICAgIGNvbnNvbGUud2FybihlcnJvcik7XG4gIH1cblxuICBpZiAocmVzcG9uc2UpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVzcG9uc2UucmVzdWx0cykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjcmVhdGVPcHRpb25zKHJlc3BvbnNlLnJlc3VsdHMsIHJlc3BvbnNlLmlucHV0KTtcbiAgfVxufTtcblxuY29uc3QgY3JlYXRlT3B0aW9ucyA9IChyZXN1bHRzLCBpbnB1dCkgPT4ge1xuICBjb25zdCBsaXN0TmFtZSA9IGlucHV0LmdldEF0dHJpYnV0ZSgnbGlzdCcpO1xuICBjb25zdCBkYXRhbGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGxpc3ROYW1lKTtcblxuICBjb25zdCBuZXdPcHRpb25zID0gcmVzdWx0cy5yZWR1Y2UoKGFjYywgcmVzdWx0KSA9PiB7XG4gICAgY29uc3Qgb3B0aW9uID0gY3JlYXRlT3B0aW9uKHJlc3VsdCk7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQob3B0aW9uKTtcbiAgfSwgJycpO1xuXG4gIGlucHV0LmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnKTtcbiAgZGF0YWxpc3QuaW5uZXJIVE1MID0gbmV3T3B0aW9ucztcbn07XG5cbmNvbnN0IGNyZWF0ZU9wdGlvbiA9IHZhbHVlID0+IHtcbiAgaWYgKHZhbHVlLnRpdGxlKSB7XG4gICAgcmV0dXJuIGA8b3B0aW9uIGRhdGEtaWQ9JHt2YWx1ZS5pZH0gdmFsdWU9XCIke3ZhbHVlLnRpdGxlLnJlbmRlcmVkfVwiPmA7XG4gIH1cblxuICBpZiAodmFsdWUubmFtZSkge1xuICAgIHJldHVybiBgPG9wdGlvbiBkYXRhLWlkPSR7dmFsdWUuaWR9IHZhbHVlPVwiJHt2YWx1ZS5uYW1lfVwiPmA7XG4gIH1cbn07XG5cbmNvbnN0IGlzSlNPTiA9IHN0ciA9PiB7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB0cnkge1xuICAgIEpTT04ucGFyc2Uoc3RyKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuY29uc3QgYnVpbGRRdWVyeSA9IHZhbHVlID0+IHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZS50b0xvd2VyQ2FzZSgpKTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hdXRvc3VnZ2VzdC5qcyIsImltcG9ydCBiYXNlQ3NzIGZyb20gJy4uL2Nzcy9pbmRleC5jc3MnO1xuaW1wb3J0IHRleHRMaXN0IGZyb20gJy4vdGV4dC1saXN0JztcbmltcG9ydCBhdXRvTGlzdCBmcm9tICcuL2F1dG9zdWdnZXN0LWxpc3QnO1xuaW1wb3J0IGxpc3QgZnJvbSAnLi9saXN0JztcbmltcG9ydCBhdXRvSXRlbSBmcm9tICcuL2F1dG8taXRlbSc7XG5pbXBvcnQgaW1hZ2VVcGxvYWRzIGZyb20gJy4vaW1hZ2UtdXBsb2Fkcyc7XG5pbXBvcnQgZGF0ZXBpY2tlciBmcm9tICcuL2RhdGVwaWNrZXInO1xuaW1wb3J0IGdhbGxlcnkgZnJvbSAnLi9nYWxsZXJ5JztcbmltcG9ydCB0YWJsZUxpc3QgZnJvbSAnLi90YWJsZS1saXN0JztcblxuY29uc3QgY3JlYXRlVGV4dEl0ZW0gPSB2YWx1ZSA9PiB7XG4gIHJldHVybiBgPGxpIGNsYXNzPVwidGV4dC1saXN0LWl0ZW1cIj5cbiAgICAgICAgPHNwYW4+JHt2YWx1ZX08L3NwYW4+XG4gICAgICAgIDxzdmcgdmlld0JveD1cIjAgMCAyMCAyMFwiPlxuICAgICAgICAgICAgPHBhdGggZD1cIk0xMCAyYzQuNDIgMCA4IDMuNTggOCA4cy0zLjU4IDgtOCA4LTgtMy41OC04LTggMy41OC04IDgtOHpNMTUgMTNsLTMtMyAzLTMtMi0yLTMgMy0zLTMtMiAyIDMgMy0zIDMgMiAyIDMtMyAzIDN6XCI+PC9wYXRoPlxuICAgICAgICA8L3N2Zz5cbiAgICA8L2xpPmA7XG59O1xuXG5jb25zdCBjcmVhdGVBdXRvU3VnZ2VzdEl0ZW0gPSB2YWx1ZSA9PiB7XG4gIHJldHVybiBgPGxpIGNsYXNzPVwidGV4dC1saXN0LWl0ZW1cIiBkYXRhLWlkPVwiJHt2YWx1ZS5pZH1cIj5cbiAgICAgICAgPHNwYW4+JHt2YWx1ZS50aXRsZX08L3NwYW4+XG4gICAgICAgIDxzdmcgdmlld0JveD1cIjAgMCAyMCAyMFwiPlxuICAgICAgICAgICAgPHBhdGggZD1cIk0xMCAyYzQuNDIgMCA4IDMuNTggOCA4cy0zLjU4IDgtOCA4LTgtMy41OC04LTggMy41OC04IDgtOHpNMTUgMTNsLTMtMyAzLTMtMi0yLTMgMy0zLTMtMiAyIDMgMy0zIDMgMiAyIDMtMyAzIDN6XCI+PC9wYXRoPlxuICAgICAgICA8L3N2Zz5cbiAgICA8L2xpPmA7XG59O1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24oKSB7XG4gIGltYWdlVXBsb2FkcygpO1xuICB0ZXh0TGlzdCh7XG4gICAgcGFyZW50OiAnLnRleHQtbGlzdCcsXG4gICAgYnV0dG9uOiAnLnRleHQtbGlzdC1hZGQnLFxuICAgIGxpc3Q6ICcudGV4dC1saXN0LWxpc3QnLFxuICAgIGhpZGRlbjogJy50ZXh0LWxpc3QtaGlkZGVuJyxcbiAgICBsaXN0VGVtcGxhdGU6IGNyZWF0ZVRleHRJdGVtLFxuICB9KTtcblxuICBhdXRvTGlzdCh7XG4gICAgcGFyZW50OiAnLmF1dG9zdWdnZXN0LWxpc3QnLFxuICAgIGlucHV0OiAnYXV0b3N1Z2dlc3QtbGlzdC1pbnB1dCcsXG4gICAgbGlzdDogJy5hdXRvc3VnZ2VzdC1saXN0LWxpc3QnLFxuICAgIGhpZGRlbjogJy5hdXRvc3VnZ2VzdC1saXN0LWhpZGRlbicsXG4gICAgbGlzdFRlbXBsYXRlOiBjcmVhdGVBdXRvU3VnZ2VzdEl0ZW0sXG4gIH0pO1xuXG4gIGF1dG9JdGVtKHtcbiAgICBwYXJlbnQ6ICcuYXV0b3N1Z2dlc3Qtd3JhcHBlcicsXG4gICAgaW5wdXQ6ICcuYXV0b3N1Z2dlc3QtaW5wdXQnLFxuICAgIGhpZGRlbjogJy5hdXRvc3VnZ2VzdC1oaWRkZW4nLFxuICB9KTtcblxuICBkYXRlcGlja2VyKCk7XG4gIGdhbGxlcnkoKTtcbiAgdGFibGVMaXN0KCk7XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2luZGV4LmpzIiwiaW1wb3J0IGxpc3QgZnJvbSAnLi9saXN0JztcbmltcG9ydCBoaWRkZW4gZnJvbSAnLi9zZXJpYWxpemVkLWlucHV0JztcbmltcG9ydCB7IHJlbW92ZUl0ZW1zLCBkcmFnSXRlbXMsIG9uRHJhZ1RleHQsIG9uUmVtb3ZlVGV4dCB9IGZyb20gJy4vdXRpbGl0aWVzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oIGFyZ3MgKSB7XG4gICAgY29uc3QgbGlzdEZpZWxkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYXJncy5wYXJlbnQpO1xuXG4gICAgaWYgKCAhIGxpc3RGaWVsZHMgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBbXS5mb3JFYWNoLmNhbGwoIGxpc3RGaWVsZHMsICggbGlzdEZpZWxkICkgPT4ge1xuICAgICAgICBjb25zdCB0ZXh0SW5wdXQgPSBsaXN0RmllbGQucXVlcnlTZWxlY3RvciggJ2lucHV0W3R5cGU9dGV4dF0nICk7XG4gICAgICAgIGNvbnN0IGFkZEJ1dHRvbiA9IGxpc3RGaWVsZC5xdWVyeVNlbGVjdG9yKCBhcmdzLmJ1dHRvbiApO1xuICAgICAgICBjb25zdCBIaWRkZW4gPSBoaWRkZW4oIGxpc3RGaWVsZCwgYXJncy5oaWRkZW4gKTtcbiAgICAgICAgY29uc3QgcmVtb3ZlID0gcmVtb3ZlSXRlbXMoIEhpZGRlbiwgb25SZW1vdmVUZXh0ICk7XG4gICAgICAgIGNvbnN0IGRyYWcgPSBkcmFnSXRlbXMoIEhpZGRlbiwgb25EcmFnVGV4dCApO1xuICAgICAgICBjb25zdCBMaXN0ID0gbGlzdCggbGlzdEZpZWxkLCBPYmplY3QuYXNzaWduKCBhcmdzLCB7IG9uRHJhZzogZHJhZywgb25SZW1vdmU6IHJlbW92ZX0gKSApO1xuXG4gICAgICAgIGxpc3RGaWVsZC5hZGRFdmVudExpc3RlbmVyKCAna2V5cHJlc3MnLCAoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCAxMyA9PT0gZS5rZXlDb2RlICkge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBMaXN0LmFkZCggdGV4dElucHV0LnZhbHVlICk7XG4gICAgICAgICAgICAgICAgSGlkZGVuLmFkZCggdGV4dElucHV0LnZhbHVlICk7XG4gICAgICAgICAgICAgICAgdGV4dElucHV0LnZhbHVlID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gKTtcblxuICAgICAgICBhZGRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIExpc3QuYWRkKCB0ZXh0SW5wdXQudmFsdWUpO1xuICAgICAgICAgICAgSGlkZGVuLmFkZCggdGV4dElucHV0LnZhbHVlICk7XG4gICAgICAgICAgICB0ZXh0SW5wdXQudmFsdWUgPSAnJztcbiAgICAgICAgfSApO1xuXG4gICAgfSApO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vdGV4dC1saXN0LmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1pdHRlciA9IHJlcXVpcmUoJ2NvbnRyYS9lbWl0dGVyJyk7XG52YXIgY3Jvc3N2ZW50ID0gcmVxdWlyZSgnY3Jvc3N2ZW50Jyk7XG52YXIgY2xhc3NlcyA9IHJlcXVpcmUoJy4vY2xhc3NlcycpO1xudmFyIGRvYyA9IGRvY3VtZW50O1xudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cbmZ1bmN0aW9uIGRyYWd1bGEgKGluaXRpYWxDb250YWluZXJzLCBvcHRpb25zKSB7XG4gIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICBpZiAobGVuID09PSAxICYmIEFycmF5LmlzQXJyYXkoaW5pdGlhbENvbnRhaW5lcnMpID09PSBmYWxzZSkge1xuICAgIG9wdGlvbnMgPSBpbml0aWFsQ29udGFpbmVycztcbiAgICBpbml0aWFsQ29udGFpbmVycyA9IFtdO1xuICB9XG4gIHZhciBfbWlycm9yOyAvLyBtaXJyb3IgaW1hZ2VcbiAgdmFyIF9zb3VyY2U7IC8vIHNvdXJjZSBjb250YWluZXJcbiAgdmFyIF9pdGVtOyAvLyBpdGVtIGJlaW5nIGRyYWdnZWRcbiAgdmFyIF9vZmZzZXRYOyAvLyByZWZlcmVuY2UgeFxuICB2YXIgX29mZnNldFk7IC8vIHJlZmVyZW5jZSB5XG4gIHZhciBfbW92ZVg7IC8vIHJlZmVyZW5jZSBtb3ZlIHhcbiAgdmFyIF9tb3ZlWTsgLy8gcmVmZXJlbmNlIG1vdmUgeVxuICB2YXIgX2luaXRpYWxTaWJsaW5nOyAvLyByZWZlcmVuY2Ugc2libGluZyB3aGVuIGdyYWJiZWRcbiAgdmFyIF9jdXJyZW50U2libGluZzsgLy8gcmVmZXJlbmNlIHNpYmxpbmcgbm93XG4gIHZhciBfY29weTsgLy8gaXRlbSB1c2VkIGZvciBjb3B5aW5nXG4gIHZhciBfcmVuZGVyVGltZXI7IC8vIHRpbWVyIGZvciBzZXRUaW1lb3V0IHJlbmRlck1pcnJvckltYWdlXG4gIHZhciBfbGFzdERyb3BUYXJnZXQgPSBudWxsOyAvLyBsYXN0IGNvbnRhaW5lciBpdGVtIHdhcyBvdmVyXG4gIHZhciBfZ3JhYmJlZDsgLy8gaG9sZHMgbW91c2Vkb3duIGNvbnRleHQgdW50aWwgZmlyc3QgbW91c2Vtb3ZlXG5cbiAgdmFyIG8gPSBvcHRpb25zIHx8IHt9O1xuICBpZiAoby5tb3ZlcyA9PT0gdm9pZCAwKSB7IG8ubW92ZXMgPSBhbHdheXM7IH1cbiAgaWYgKG8uYWNjZXB0cyA9PT0gdm9pZCAwKSB7IG8uYWNjZXB0cyA9IGFsd2F5czsgfVxuICBpZiAoby5pbnZhbGlkID09PSB2b2lkIDApIHsgby5pbnZhbGlkID0gaW52YWxpZFRhcmdldDsgfVxuICBpZiAoby5jb250YWluZXJzID09PSB2b2lkIDApIHsgby5jb250YWluZXJzID0gaW5pdGlhbENvbnRhaW5lcnMgfHwgW107IH1cbiAgaWYgKG8uaXNDb250YWluZXIgPT09IHZvaWQgMCkgeyBvLmlzQ29udGFpbmVyID0gbmV2ZXI7IH1cbiAgaWYgKG8uY29weSA9PT0gdm9pZCAwKSB7IG8uY29weSA9IGZhbHNlOyB9XG4gIGlmIChvLmNvcHlTb3J0U291cmNlID09PSB2b2lkIDApIHsgby5jb3B5U29ydFNvdXJjZSA9IGZhbHNlOyB9XG4gIGlmIChvLnJldmVydE9uU3BpbGwgPT09IHZvaWQgMCkgeyBvLnJldmVydE9uU3BpbGwgPSBmYWxzZTsgfVxuICBpZiAoby5yZW1vdmVPblNwaWxsID09PSB2b2lkIDApIHsgby5yZW1vdmVPblNwaWxsID0gZmFsc2U7IH1cbiAgaWYgKG8uZGlyZWN0aW9uID09PSB2b2lkIDApIHsgby5kaXJlY3Rpb24gPSAndmVydGljYWwnOyB9XG4gIGlmIChvLmlnbm9yZUlucHV0VGV4dFNlbGVjdGlvbiA9PT0gdm9pZCAwKSB7IG8uaWdub3JlSW5wdXRUZXh0U2VsZWN0aW9uID0gdHJ1ZTsgfVxuICBpZiAoby5taXJyb3JDb250YWluZXIgPT09IHZvaWQgMCkgeyBvLm1pcnJvckNvbnRhaW5lciA9IGRvYy5ib2R5OyB9XG5cbiAgdmFyIGRyYWtlID0gZW1pdHRlcih7XG4gICAgY29udGFpbmVyczogby5jb250YWluZXJzLFxuICAgIHN0YXJ0OiBtYW51YWxTdGFydCxcbiAgICBlbmQ6IGVuZCxcbiAgICBjYW5jZWw6IGNhbmNlbCxcbiAgICByZW1vdmU6IHJlbW92ZSxcbiAgICBkZXN0cm95OiBkZXN0cm95LFxuICAgIGNhbk1vdmU6IGNhbk1vdmUsXG4gICAgZHJhZ2dpbmc6IGZhbHNlXG4gIH0pO1xuXG4gIGlmIChvLnJlbW92ZU9uU3BpbGwgPT09IHRydWUpIHtcbiAgICBkcmFrZS5vbignb3ZlcicsIHNwaWxsT3Zlcikub24oJ291dCcsIHNwaWxsT3V0KTtcbiAgfVxuXG4gIGV2ZW50cygpO1xuXG4gIHJldHVybiBkcmFrZTtcblxuICBmdW5jdGlvbiBpc0NvbnRhaW5lciAoZWwpIHtcbiAgICByZXR1cm4gZHJha2UuY29udGFpbmVycy5pbmRleE9mKGVsKSAhPT0gLTEgfHwgby5pc0NvbnRhaW5lcihlbCk7XG4gIH1cblxuICBmdW5jdGlvbiBldmVudHMgKHJlbW92ZSkge1xuICAgIHZhciBvcCA9IHJlbW92ZSA/ICdyZW1vdmUnIDogJ2FkZCc7XG4gICAgdG91Y2h5KGRvY3VtZW50RWxlbWVudCwgb3AsICdtb3VzZWRvd24nLCBncmFiKTtcbiAgICB0b3VjaHkoZG9jdW1lbnRFbGVtZW50LCBvcCwgJ21vdXNldXAnLCByZWxlYXNlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV2ZW50dWFsTW92ZW1lbnRzIChyZW1vdmUpIHtcbiAgICB2YXIgb3AgPSByZW1vdmUgPyAncmVtb3ZlJyA6ICdhZGQnO1xuICAgIHRvdWNoeShkb2N1bWVudEVsZW1lbnQsIG9wLCAnbW91c2Vtb3ZlJywgc3RhcnRCZWNhdXNlTW91c2VNb3ZlZCk7XG4gIH1cblxuICBmdW5jdGlvbiBtb3ZlbWVudHMgKHJlbW92ZSkge1xuICAgIHZhciBvcCA9IHJlbW92ZSA/ICdyZW1vdmUnIDogJ2FkZCc7XG4gICAgY3Jvc3N2ZW50W29wXShkb2N1bWVudEVsZW1lbnQsICdzZWxlY3RzdGFydCcsIHByZXZlbnRHcmFiYmVkKTsgLy8gSUU4XG4gICAgY3Jvc3N2ZW50W29wXShkb2N1bWVudEVsZW1lbnQsICdjbGljaycsIHByZXZlbnRHcmFiYmVkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICAgIGV2ZW50cyh0cnVlKTtcbiAgICByZWxlYXNlKHt9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByZXZlbnRHcmFiYmVkIChlKSB7XG4gICAgaWYgKF9ncmFiYmVkKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ3JhYiAoZSkge1xuICAgIF9tb3ZlWCA9IGUuY2xpZW50WDtcbiAgICBfbW92ZVkgPSBlLmNsaWVudFk7XG5cbiAgICB2YXIgaWdub3JlID0gd2hpY2hNb3VzZUJ1dHRvbihlKSAhPT0gMSB8fCBlLm1ldGFLZXkgfHwgZS5jdHJsS2V5O1xuICAgIGlmIChpZ25vcmUpIHtcbiAgICAgIHJldHVybjsgLy8gd2Ugb25seSBjYXJlIGFib3V0IGhvbmVzdC10by1nb2QgbGVmdCBjbGlja3MgYW5kIHRvdWNoIGV2ZW50c1xuICAgIH1cbiAgICB2YXIgaXRlbSA9IGUudGFyZ2V0O1xuICAgIHZhciBjb250ZXh0ID0gY2FuU3RhcnQoaXRlbSk7XG4gICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIF9ncmFiYmVkID0gY29udGV4dDtcbiAgICBldmVudHVhbE1vdmVtZW50cygpO1xuICAgIGlmIChlLnR5cGUgPT09ICdtb3VzZWRvd24nKSB7XG4gICAgICBpZiAoaXNJbnB1dChpdGVtKSkgeyAvLyBzZWUgYWxzbzogaHR0cHM6Ly9naXRodWIuY29tL2JldmFjcXVhL2RyYWd1bGEvaXNzdWVzLzIwOFxuICAgICAgICBpdGVtLmZvY3VzKCk7IC8vIGZpeGVzIGh0dHBzOi8vZ2l0aHViLmNvbS9iZXZhY3F1YS9kcmFndWxhL2lzc3Vlcy8xNzZcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgLy8gZml4ZXMgaHR0cHM6Ly9naXRodWIuY29tL2JldmFjcXVhL2RyYWd1bGEvaXNzdWVzLzE1NVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0QmVjYXVzZU1vdXNlTW92ZWQgKGUpIHtcbiAgICBpZiAoIV9ncmFiYmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh3aGljaE1vdXNlQnV0dG9uKGUpID09PSAwKSB7XG4gICAgICByZWxlYXNlKHt9KTtcbiAgICAgIHJldHVybjsgLy8gd2hlbiB0ZXh0IGlzIHNlbGVjdGVkIG9uIGFuIGlucHV0IGFuZCB0aGVuIGRyYWdnZWQsIG1vdXNldXAgZG9lc24ndCBmaXJlLiB0aGlzIGlzIG91ciBvbmx5IGhvcGVcbiAgICB9XG4gICAgLy8gdHJ1dGh5IGNoZWNrIGZpeGVzICMyMzksIGVxdWFsaXR5IGZpeGVzICMyMDdcbiAgICBpZiAoZS5jbGllbnRYICE9PSB2b2lkIDAgJiYgZS5jbGllbnRYID09PSBfbW92ZVggJiYgZS5jbGllbnRZICE9PSB2b2lkIDAgJiYgZS5jbGllbnRZID09PSBfbW92ZVkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG8uaWdub3JlSW5wdXRUZXh0U2VsZWN0aW9uKSB7XG4gICAgICB2YXIgY2xpZW50WCA9IGdldENvb3JkKCdjbGllbnRYJywgZSk7XG4gICAgICB2YXIgY2xpZW50WSA9IGdldENvb3JkKCdjbGllbnRZJywgZSk7XG4gICAgICB2YXIgZWxlbWVudEJlaGluZEN1cnNvciA9IGRvYy5lbGVtZW50RnJvbVBvaW50KGNsaWVudFgsIGNsaWVudFkpO1xuICAgICAgaWYgKGlzSW5wdXQoZWxlbWVudEJlaGluZEN1cnNvcikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBncmFiYmVkID0gX2dyYWJiZWQ7IC8vIGNhbGwgdG8gZW5kKCkgdW5zZXRzIF9ncmFiYmVkXG4gICAgZXZlbnR1YWxNb3ZlbWVudHModHJ1ZSk7XG4gICAgbW92ZW1lbnRzKCk7XG4gICAgZW5kKCk7XG4gICAgc3RhcnQoZ3JhYmJlZCk7XG5cbiAgICB2YXIgb2Zmc2V0ID0gZ2V0T2Zmc2V0KF9pdGVtKTtcbiAgICBfb2Zmc2V0WCA9IGdldENvb3JkKCdwYWdlWCcsIGUpIC0gb2Zmc2V0LmxlZnQ7XG4gICAgX29mZnNldFkgPSBnZXRDb29yZCgncGFnZVknLCBlKSAtIG9mZnNldC50b3A7XG5cbiAgICBjbGFzc2VzLmFkZChfY29weSB8fCBfaXRlbSwgJ2d1LXRyYW5zaXQnKTtcbiAgICByZW5kZXJNaXJyb3JJbWFnZSgpO1xuICAgIGRyYWcoZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5TdGFydCAoaXRlbSkge1xuICAgIGlmIChkcmFrZS5kcmFnZ2luZyAmJiBfbWlycm9yKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc0NvbnRhaW5lcihpdGVtKSkge1xuICAgICAgcmV0dXJuOyAvLyBkb24ndCBkcmFnIGNvbnRhaW5lciBpdHNlbGZcbiAgICB9XG4gICAgdmFyIGhhbmRsZSA9IGl0ZW07XG4gICAgd2hpbGUgKGdldFBhcmVudChpdGVtKSAmJiBpc0NvbnRhaW5lcihnZXRQYXJlbnQoaXRlbSkpID09PSBmYWxzZSkge1xuICAgICAgaWYgKG8uaW52YWxpZChpdGVtLCBoYW5kbGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGl0ZW0gPSBnZXRQYXJlbnQoaXRlbSk7IC8vIGRyYWcgdGFyZ2V0IHNob3VsZCBiZSBhIHRvcCBlbGVtZW50XG4gICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgc291cmNlID0gZ2V0UGFyZW50KGl0ZW0pO1xuICAgIGlmICghc291cmNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChvLmludmFsaWQoaXRlbSwgaGFuZGxlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBtb3ZhYmxlID0gby5tb3ZlcyhpdGVtLCBzb3VyY2UsIGhhbmRsZSwgbmV4dEVsKGl0ZW0pKTtcbiAgICBpZiAoIW1vdmFibGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgaXRlbTogaXRlbSxcbiAgICAgIHNvdXJjZTogc291cmNlXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbk1vdmUgKGl0ZW0pIHtcbiAgICByZXR1cm4gISFjYW5TdGFydChpdGVtKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1hbnVhbFN0YXJ0IChpdGVtKSB7XG4gICAgdmFyIGNvbnRleHQgPSBjYW5TdGFydChpdGVtKTtcbiAgICBpZiAoY29udGV4dCkge1xuICAgICAgc3RhcnQoY29udGV4dCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnQgKGNvbnRleHQpIHtcbiAgICBpZiAoaXNDb3B5KGNvbnRleHQuaXRlbSwgY29udGV4dC5zb3VyY2UpKSB7XG4gICAgICBfY29weSA9IGNvbnRleHQuaXRlbS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICBkcmFrZS5lbWl0KCdjbG9uZWQnLCBfY29weSwgY29udGV4dC5pdGVtLCAnY29weScpO1xuICAgIH1cblxuICAgIF9zb3VyY2UgPSBjb250ZXh0LnNvdXJjZTtcbiAgICBfaXRlbSA9IGNvbnRleHQuaXRlbTtcbiAgICBfaW5pdGlhbFNpYmxpbmcgPSBfY3VycmVudFNpYmxpbmcgPSBuZXh0RWwoY29udGV4dC5pdGVtKTtcblxuICAgIGRyYWtlLmRyYWdnaW5nID0gdHJ1ZTtcbiAgICBkcmFrZS5lbWl0KCdkcmFnJywgX2l0ZW0sIF9zb3VyY2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52YWxpZFRhcmdldCAoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5kICgpIHtcbiAgICBpZiAoIWRyYWtlLmRyYWdnaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBpdGVtID0gX2NvcHkgfHwgX2l0ZW07XG4gICAgZHJvcChpdGVtLCBnZXRQYXJlbnQoaXRlbSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdW5ncmFiICgpIHtcbiAgICBfZ3JhYmJlZCA9IGZhbHNlO1xuICAgIGV2ZW50dWFsTW92ZW1lbnRzKHRydWUpO1xuICAgIG1vdmVtZW50cyh0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbGVhc2UgKGUpIHtcbiAgICB1bmdyYWIoKTtcblxuICAgIGlmICghZHJha2UuZHJhZ2dpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGl0ZW0gPSBfY29weSB8fCBfaXRlbTtcbiAgICB2YXIgY2xpZW50WCA9IGdldENvb3JkKCdjbGllbnRYJywgZSk7XG4gICAgdmFyIGNsaWVudFkgPSBnZXRDb29yZCgnY2xpZW50WScsIGUpO1xuICAgIHZhciBlbGVtZW50QmVoaW5kQ3Vyc29yID0gZ2V0RWxlbWVudEJlaGluZFBvaW50KF9taXJyb3IsIGNsaWVudFgsIGNsaWVudFkpO1xuICAgIHZhciBkcm9wVGFyZ2V0ID0gZmluZERyb3BUYXJnZXQoZWxlbWVudEJlaGluZEN1cnNvciwgY2xpZW50WCwgY2xpZW50WSk7XG4gICAgaWYgKGRyb3BUYXJnZXQgJiYgKChfY29weSAmJiBvLmNvcHlTb3J0U291cmNlKSB8fCAoIV9jb3B5IHx8IGRyb3BUYXJnZXQgIT09IF9zb3VyY2UpKSkge1xuICAgICAgZHJvcChpdGVtLCBkcm9wVGFyZ2V0KTtcbiAgICB9IGVsc2UgaWYgKG8ucmVtb3ZlT25TcGlsbCkge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbmNlbCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRyb3AgKGl0ZW0sIHRhcmdldCkge1xuICAgIHZhciBwYXJlbnQgPSBnZXRQYXJlbnQoaXRlbSk7XG4gICAgaWYgKF9jb3B5ICYmIG8uY29weVNvcnRTb3VyY2UgJiYgdGFyZ2V0ID09PSBfc291cmNlKSB7XG4gICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoX2l0ZW0pO1xuICAgIH1cbiAgICBpZiAoaXNJbml0aWFsUGxhY2VtZW50KHRhcmdldCkpIHtcbiAgICAgIGRyYWtlLmVtaXQoJ2NhbmNlbCcsIGl0ZW0sIF9zb3VyY2UsIF9zb3VyY2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkcmFrZS5lbWl0KCdkcm9wJywgaXRlbSwgdGFyZ2V0LCBfc291cmNlLCBfY3VycmVudFNpYmxpbmcpO1xuICAgIH1cbiAgICBjbGVhbnVwKCk7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmUgKCkge1xuICAgIGlmICghZHJha2UuZHJhZ2dpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGl0ZW0gPSBfY29weSB8fCBfaXRlbTtcbiAgICB2YXIgcGFyZW50ID0gZ2V0UGFyZW50KGl0ZW0pO1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChpdGVtKTtcbiAgICB9XG4gICAgZHJha2UuZW1pdChfY29weSA/ICdjYW5jZWwnIDogJ3JlbW92ZScsIGl0ZW0sIHBhcmVudCwgX3NvdXJjZSk7XG4gICAgY2xlYW51cCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsIChyZXZlcnQpIHtcbiAgICBpZiAoIWRyYWtlLmRyYWdnaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciByZXZlcnRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgPyByZXZlcnQgOiBvLnJldmVydE9uU3BpbGw7XG4gICAgdmFyIGl0ZW0gPSBfY29weSB8fCBfaXRlbTtcbiAgICB2YXIgcGFyZW50ID0gZ2V0UGFyZW50KGl0ZW0pO1xuICAgIHZhciBpbml0aWFsID0gaXNJbml0aWFsUGxhY2VtZW50KHBhcmVudCk7XG4gICAgaWYgKGluaXRpYWwgPT09IGZhbHNlICYmIHJldmVydHMpIHtcbiAgICAgIGlmIChfY29weSkge1xuICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKF9jb3B5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3NvdXJjZS5pbnNlcnRCZWZvcmUoaXRlbSwgX2luaXRpYWxTaWJsaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGluaXRpYWwgfHwgcmV2ZXJ0cykge1xuICAgICAgZHJha2UuZW1pdCgnY2FuY2VsJywgaXRlbSwgX3NvdXJjZSwgX3NvdXJjZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRyYWtlLmVtaXQoJ2Ryb3AnLCBpdGVtLCBwYXJlbnQsIF9zb3VyY2UsIF9jdXJyZW50U2libGluZyk7XG4gICAgfVxuICAgIGNsZWFudXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFudXAgKCkge1xuICAgIHZhciBpdGVtID0gX2NvcHkgfHwgX2l0ZW07XG4gICAgdW5ncmFiKCk7XG4gICAgcmVtb3ZlTWlycm9ySW1hZ2UoKTtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgY2xhc3Nlcy5ybShpdGVtLCAnZ3UtdHJhbnNpdCcpO1xuICAgIH1cbiAgICBpZiAoX3JlbmRlclRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQoX3JlbmRlclRpbWVyKTtcbiAgICB9XG4gICAgZHJha2UuZHJhZ2dpbmcgPSBmYWxzZTtcbiAgICBpZiAoX2xhc3REcm9wVGFyZ2V0KSB7XG4gICAgICBkcmFrZS5lbWl0KCdvdXQnLCBpdGVtLCBfbGFzdERyb3BUYXJnZXQsIF9zb3VyY2UpO1xuICAgIH1cbiAgICBkcmFrZS5lbWl0KCdkcmFnZW5kJywgaXRlbSk7XG4gICAgX3NvdXJjZSA9IF9pdGVtID0gX2NvcHkgPSBfaW5pdGlhbFNpYmxpbmcgPSBfY3VycmVudFNpYmxpbmcgPSBfcmVuZGVyVGltZXIgPSBfbGFzdERyb3BUYXJnZXQgPSBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNJbml0aWFsUGxhY2VtZW50ICh0YXJnZXQsIHMpIHtcbiAgICB2YXIgc2libGluZztcbiAgICBpZiAocyAhPT0gdm9pZCAwKSB7XG4gICAgICBzaWJsaW5nID0gcztcbiAgICB9IGVsc2UgaWYgKF9taXJyb3IpIHtcbiAgICAgIHNpYmxpbmcgPSBfY3VycmVudFNpYmxpbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNpYmxpbmcgPSBuZXh0RWwoX2NvcHkgfHwgX2l0ZW0pO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0ID09PSBfc291cmNlICYmIHNpYmxpbmcgPT09IF9pbml0aWFsU2libGluZztcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmREcm9wVGFyZ2V0IChlbGVtZW50QmVoaW5kQ3Vyc29yLCBjbGllbnRYLCBjbGllbnRZKSB7XG4gICAgdmFyIHRhcmdldCA9IGVsZW1lbnRCZWhpbmRDdXJzb3I7XG4gICAgd2hpbGUgKHRhcmdldCAmJiAhYWNjZXB0ZWQoKSkge1xuICAgICAgdGFyZ2V0ID0gZ2V0UGFyZW50KHRhcmdldCk7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG5cbiAgICBmdW5jdGlvbiBhY2NlcHRlZCAoKSB7XG4gICAgICB2YXIgZHJvcHBhYmxlID0gaXNDb250YWluZXIodGFyZ2V0KTtcbiAgICAgIGlmIChkcm9wcGFibGUgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGltbWVkaWF0ZSA9IGdldEltbWVkaWF0ZUNoaWxkKHRhcmdldCwgZWxlbWVudEJlaGluZEN1cnNvcik7XG4gICAgICB2YXIgcmVmZXJlbmNlID0gZ2V0UmVmZXJlbmNlKHRhcmdldCwgaW1tZWRpYXRlLCBjbGllbnRYLCBjbGllbnRZKTtcbiAgICAgIHZhciBpbml0aWFsID0gaXNJbml0aWFsUGxhY2VtZW50KHRhcmdldCwgcmVmZXJlbmNlKTtcbiAgICAgIGlmIChpbml0aWFsKSB7XG4gICAgICAgIHJldHVybiB0cnVlOyAvLyBzaG91bGQgYWx3YXlzIGJlIGFibGUgdG8gZHJvcCBpdCByaWdodCBiYWNrIHdoZXJlIGl0IHdhc1xuICAgICAgfVxuICAgICAgcmV0dXJuIG8uYWNjZXB0cyhfaXRlbSwgdGFyZ2V0LCBfc291cmNlLCByZWZlcmVuY2UpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYWcgKGUpIHtcbiAgICBpZiAoIV9taXJyb3IpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgdmFyIGNsaWVudFggPSBnZXRDb29yZCgnY2xpZW50WCcsIGUpO1xuICAgIHZhciBjbGllbnRZID0gZ2V0Q29vcmQoJ2NsaWVudFknLCBlKTtcbiAgICB2YXIgeCA9IGNsaWVudFggLSBfb2Zmc2V0WDtcbiAgICB2YXIgeSA9IGNsaWVudFkgLSBfb2Zmc2V0WTtcblxuICAgIF9taXJyb3Iuc3R5bGUubGVmdCA9IHggKyAncHgnO1xuICAgIF9taXJyb3Iuc3R5bGUudG9wID0geSArICdweCc7XG5cbiAgICB2YXIgaXRlbSA9IF9jb3B5IHx8IF9pdGVtO1xuICAgIHZhciBlbGVtZW50QmVoaW5kQ3Vyc29yID0gZ2V0RWxlbWVudEJlaGluZFBvaW50KF9taXJyb3IsIGNsaWVudFgsIGNsaWVudFkpO1xuICAgIHZhciBkcm9wVGFyZ2V0ID0gZmluZERyb3BUYXJnZXQoZWxlbWVudEJlaGluZEN1cnNvciwgY2xpZW50WCwgY2xpZW50WSk7XG4gICAgdmFyIGNoYW5nZWQgPSBkcm9wVGFyZ2V0ICE9PSBudWxsICYmIGRyb3BUYXJnZXQgIT09IF9sYXN0RHJvcFRhcmdldDtcbiAgICBpZiAoY2hhbmdlZCB8fCBkcm9wVGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICBvdXQoKTtcbiAgICAgIF9sYXN0RHJvcFRhcmdldCA9IGRyb3BUYXJnZXQ7XG4gICAgICBvdmVyKCk7XG4gICAgfVxuICAgIHZhciBwYXJlbnQgPSBnZXRQYXJlbnQoaXRlbSk7XG4gICAgaWYgKGRyb3BUYXJnZXQgPT09IF9zb3VyY2UgJiYgX2NvcHkgJiYgIW8uY29weVNvcnRTb3VyY2UpIHtcbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKGl0ZW0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgcmVmZXJlbmNlO1xuICAgIHZhciBpbW1lZGlhdGUgPSBnZXRJbW1lZGlhdGVDaGlsZChkcm9wVGFyZ2V0LCBlbGVtZW50QmVoaW5kQ3Vyc29yKTtcbiAgICBpZiAoaW1tZWRpYXRlICE9PSBudWxsKSB7XG4gICAgICByZWZlcmVuY2UgPSBnZXRSZWZlcmVuY2UoZHJvcFRhcmdldCwgaW1tZWRpYXRlLCBjbGllbnRYLCBjbGllbnRZKTtcbiAgICB9IGVsc2UgaWYgKG8ucmV2ZXJ0T25TcGlsbCA9PT0gdHJ1ZSAmJiAhX2NvcHkpIHtcbiAgICAgIHJlZmVyZW5jZSA9IF9pbml0aWFsU2libGluZztcbiAgICAgIGRyb3BUYXJnZXQgPSBfc291cmNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoX2NvcHkgJiYgcGFyZW50KSB7XG4gICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChpdGVtKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgKHJlZmVyZW5jZSA9PT0gbnVsbCAmJiBjaGFuZ2VkKSB8fFxuICAgICAgcmVmZXJlbmNlICE9PSBpdGVtICYmXG4gICAgICByZWZlcmVuY2UgIT09IG5leHRFbChpdGVtKVxuICAgICkge1xuICAgICAgX2N1cnJlbnRTaWJsaW5nID0gcmVmZXJlbmNlO1xuICAgICAgZHJvcFRhcmdldC5pbnNlcnRCZWZvcmUoaXRlbSwgcmVmZXJlbmNlKTtcbiAgICAgIGRyYWtlLmVtaXQoJ3NoYWRvdycsIGl0ZW0sIGRyb3BUYXJnZXQsIF9zb3VyY2UpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBtb3ZlZCAodHlwZSkgeyBkcmFrZS5lbWl0KHR5cGUsIGl0ZW0sIF9sYXN0RHJvcFRhcmdldCwgX3NvdXJjZSk7IH1cbiAgICBmdW5jdGlvbiBvdmVyICgpIHsgaWYgKGNoYW5nZWQpIHsgbW92ZWQoJ292ZXInKTsgfSB9XG4gICAgZnVuY3Rpb24gb3V0ICgpIHsgaWYgKF9sYXN0RHJvcFRhcmdldCkgeyBtb3ZlZCgnb3V0Jyk7IH0gfVxuICB9XG5cbiAgZnVuY3Rpb24gc3BpbGxPdmVyIChlbCkge1xuICAgIGNsYXNzZXMucm0oZWwsICdndS1oaWRlJyk7XG4gIH1cblxuICBmdW5jdGlvbiBzcGlsbE91dCAoZWwpIHtcbiAgICBpZiAoZHJha2UuZHJhZ2dpbmcpIHsgY2xhc3Nlcy5hZGQoZWwsICdndS1oaWRlJyk7IH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbmRlck1pcnJvckltYWdlICgpIHtcbiAgICBpZiAoX21pcnJvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgcmVjdCA9IF9pdGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIF9taXJyb3IgPSBfaXRlbS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgX21pcnJvci5zdHlsZS53aWR0aCA9IGdldFJlY3RXaWR0aChyZWN0KSArICdweCc7XG4gICAgX21pcnJvci5zdHlsZS5oZWlnaHQgPSBnZXRSZWN0SGVpZ2h0KHJlY3QpICsgJ3B4JztcbiAgICBjbGFzc2VzLnJtKF9taXJyb3IsICdndS10cmFuc2l0Jyk7XG4gICAgY2xhc3Nlcy5hZGQoX21pcnJvciwgJ2d1LW1pcnJvcicpO1xuICAgIG8ubWlycm9yQ29udGFpbmVyLmFwcGVuZENoaWxkKF9taXJyb3IpO1xuICAgIHRvdWNoeShkb2N1bWVudEVsZW1lbnQsICdhZGQnLCAnbW91c2Vtb3ZlJywgZHJhZyk7XG4gICAgY2xhc3Nlcy5hZGQoby5taXJyb3JDb250YWluZXIsICdndS11bnNlbGVjdGFibGUnKTtcbiAgICBkcmFrZS5lbWl0KCdjbG9uZWQnLCBfbWlycm9yLCBfaXRlbSwgJ21pcnJvcicpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlTWlycm9ySW1hZ2UgKCkge1xuICAgIGlmIChfbWlycm9yKSB7XG4gICAgICBjbGFzc2VzLnJtKG8ubWlycm9yQ29udGFpbmVyLCAnZ3UtdW5zZWxlY3RhYmxlJyk7XG4gICAgICB0b3VjaHkoZG9jdW1lbnRFbGVtZW50LCAncmVtb3ZlJywgJ21vdXNlbW92ZScsIGRyYWcpO1xuICAgICAgZ2V0UGFyZW50KF9taXJyb3IpLnJlbW92ZUNoaWxkKF9taXJyb3IpO1xuICAgICAgX21pcnJvciA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SW1tZWRpYXRlQ2hpbGQgKGRyb3BUYXJnZXQsIHRhcmdldCkge1xuICAgIHZhciBpbW1lZGlhdGUgPSB0YXJnZXQ7XG4gICAgd2hpbGUgKGltbWVkaWF0ZSAhPT0gZHJvcFRhcmdldCAmJiBnZXRQYXJlbnQoaW1tZWRpYXRlKSAhPT0gZHJvcFRhcmdldCkge1xuICAgICAgaW1tZWRpYXRlID0gZ2V0UGFyZW50KGltbWVkaWF0ZSk7XG4gICAgfVxuICAgIGlmIChpbW1lZGlhdGUgPT09IGRvY3VtZW50RWxlbWVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBpbW1lZGlhdGU7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRSZWZlcmVuY2UgKGRyb3BUYXJnZXQsIHRhcmdldCwgeCwgeSkge1xuICAgIHZhciBob3Jpem9udGFsID0gby5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJztcbiAgICB2YXIgcmVmZXJlbmNlID0gdGFyZ2V0ICE9PSBkcm9wVGFyZ2V0ID8gaW5zaWRlKCkgOiBvdXRzaWRlKCk7XG4gICAgcmV0dXJuIHJlZmVyZW5jZTtcblxuICAgIGZ1bmN0aW9uIG91dHNpZGUgKCkgeyAvLyBzbG93ZXIsIGJ1dCBhYmxlIHRvIGZpZ3VyZSBvdXQgYW55IHBvc2l0aW9uXG4gICAgICB2YXIgbGVuID0gZHJvcFRhcmdldC5jaGlsZHJlbi5sZW5ndGg7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBlbDtcbiAgICAgIHZhciByZWN0O1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGVsID0gZHJvcFRhcmdldC5jaGlsZHJlbltpXTtcbiAgICAgICAgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAoaG9yaXpvbnRhbCAmJiAocmVjdC5sZWZ0ICsgcmVjdC53aWR0aCAvIDIpID4geCkgeyByZXR1cm4gZWw7IH1cbiAgICAgICAgaWYgKCFob3Jpem9udGFsICYmIChyZWN0LnRvcCArIHJlY3QuaGVpZ2h0IC8gMikgPiB5KSB7IHJldHVybiBlbDsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zaWRlICgpIHsgLy8gZmFzdGVyLCBidXQgb25seSBhdmFpbGFibGUgaWYgZHJvcHBlZCBpbnNpZGUgYSBjaGlsZCBlbGVtZW50XG4gICAgICB2YXIgcmVjdCA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGlmIChob3Jpem9udGFsKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlKHggPiByZWN0LmxlZnQgKyBnZXRSZWN0V2lkdGgocmVjdCkgLyAyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXNvbHZlKHkgPiByZWN0LnRvcCArIGdldFJlY3RIZWlnaHQocmVjdCkgLyAyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNvbHZlIChhZnRlcikge1xuICAgICAgcmV0dXJuIGFmdGVyID8gbmV4dEVsKHRhcmdldCkgOiB0YXJnZXQ7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNDb3B5IChpdGVtLCBjb250YWluZXIpIHtcbiAgICByZXR1cm4gdHlwZW9mIG8uY29weSA9PT0gJ2Jvb2xlYW4nID8gby5jb3B5IDogby5jb3B5KGl0ZW0sIGNvbnRhaW5lcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gdG91Y2h5IChlbCwgb3AsIHR5cGUsIGZuKSB7XG4gIHZhciB0b3VjaCA9IHtcbiAgICBtb3VzZXVwOiAndG91Y2hlbmQnLFxuICAgIG1vdXNlZG93bjogJ3RvdWNoc3RhcnQnLFxuICAgIG1vdXNlbW92ZTogJ3RvdWNobW92ZSdcbiAgfTtcbiAgdmFyIHBvaW50ZXJzID0ge1xuICAgIG1vdXNldXA6ICdwb2ludGVydXAnLFxuICAgIG1vdXNlZG93bjogJ3BvaW50ZXJkb3duJyxcbiAgICBtb3VzZW1vdmU6ICdwb2ludGVybW92ZSdcbiAgfTtcbiAgdmFyIG1pY3Jvc29mdCA9IHtcbiAgICBtb3VzZXVwOiAnTVNQb2ludGVyVXAnLFxuICAgIG1vdXNlZG93bjogJ01TUG9pbnRlckRvd24nLFxuICAgIG1vdXNlbW92ZTogJ01TUG9pbnRlck1vdmUnXG4gIH07XG4gIGlmIChnbG9iYWwubmF2aWdhdG9yLnBvaW50ZXJFbmFibGVkKSB7XG4gICAgY3Jvc3N2ZW50W29wXShlbCwgcG9pbnRlcnNbdHlwZV0sIGZuKTtcbiAgfSBlbHNlIGlmIChnbG9iYWwubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQpIHtcbiAgICBjcm9zc3ZlbnRbb3BdKGVsLCBtaWNyb3NvZnRbdHlwZV0sIGZuKTtcbiAgfSBlbHNlIHtcbiAgICBjcm9zc3ZlbnRbb3BdKGVsLCB0b3VjaFt0eXBlXSwgZm4pO1xuICAgIGNyb3NzdmVudFtvcF0oZWwsIHR5cGUsIGZuKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB3aGljaE1vdXNlQnV0dG9uIChlKSB7XG4gIGlmIChlLnRvdWNoZXMgIT09IHZvaWQgMCkgeyByZXR1cm4gZS50b3VjaGVzLmxlbmd0aDsgfVxuICBpZiAoZS53aGljaCAhPT0gdm9pZCAwICYmIGUud2hpY2ggIT09IDApIHsgcmV0dXJuIGUud2hpY2g7IH0gLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9iZXZhY3F1YS9kcmFndWxhL2lzc3Vlcy8yNjFcbiAgaWYgKGUuYnV0dG9ucyAhPT0gdm9pZCAwKSB7IHJldHVybiBlLmJ1dHRvbnM7IH1cbiAgdmFyIGJ1dHRvbiA9IGUuYnV0dG9uO1xuICBpZiAoYnV0dG9uICE9PSB2b2lkIDApIHsgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L2Jsb2IvOTllOGZmMWJhYTdhZTM0MWU5NGJiODljM2U4NDU3MGM3YzNhZDllYS9zcmMvZXZlbnQuanMjTDU3My1MNTc1XG4gICAgcmV0dXJuIGJ1dHRvbiAmIDEgPyAxIDogYnV0dG9uICYgMiA/IDMgOiAoYnV0dG9uICYgNCA/IDIgOiAwKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRPZmZzZXQgKGVsKSB7XG4gIHZhciByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHJldHVybiB7XG4gICAgbGVmdDogcmVjdC5sZWZ0ICsgZ2V0U2Nyb2xsKCdzY3JvbGxMZWZ0JywgJ3BhZ2VYT2Zmc2V0JyksXG4gICAgdG9wOiByZWN0LnRvcCArIGdldFNjcm9sbCgnc2Nyb2xsVG9wJywgJ3BhZ2VZT2Zmc2V0JylcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0U2Nyb2xsIChzY3JvbGxQcm9wLCBvZmZzZXRQcm9wKSB7XG4gIGlmICh0eXBlb2YgZ2xvYmFsW29mZnNldFByb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBnbG9iYWxbb2Zmc2V0UHJvcF07XG4gIH1cbiAgaWYgKGRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnRFbGVtZW50W3Njcm9sbFByb3BdO1xuICB9XG4gIHJldHVybiBkb2MuYm9keVtzY3JvbGxQcm9wXTtcbn1cblxuZnVuY3Rpb24gZ2V0RWxlbWVudEJlaGluZFBvaW50IChwb2ludCwgeCwgeSkge1xuICB2YXIgcCA9IHBvaW50IHx8IHt9O1xuICB2YXIgc3RhdGUgPSBwLmNsYXNzTmFtZTtcbiAgdmFyIGVsO1xuICBwLmNsYXNzTmFtZSArPSAnIGd1LWhpZGUnO1xuICBlbCA9IGRvYy5lbGVtZW50RnJvbVBvaW50KHgsIHkpO1xuICBwLmNsYXNzTmFtZSA9IHN0YXRlO1xuICByZXR1cm4gZWw7XG59XG5cbmZ1bmN0aW9uIG5ldmVyICgpIHsgcmV0dXJuIGZhbHNlOyB9XG5mdW5jdGlvbiBhbHdheXMgKCkgeyByZXR1cm4gdHJ1ZTsgfVxuZnVuY3Rpb24gZ2V0UmVjdFdpZHRoIChyZWN0KSB7IHJldHVybiByZWN0LndpZHRoIHx8IChyZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0KTsgfVxuZnVuY3Rpb24gZ2V0UmVjdEhlaWdodCAocmVjdCkgeyByZXR1cm4gcmVjdC5oZWlnaHQgfHwgKHJlY3QuYm90dG9tIC0gcmVjdC50b3ApOyB9XG5mdW5jdGlvbiBnZXRQYXJlbnQgKGVsKSB7IHJldHVybiBlbC5wYXJlbnROb2RlID09PSBkb2MgPyBudWxsIDogZWwucGFyZW50Tm9kZTsgfVxuZnVuY3Rpb24gaXNJbnB1dCAoZWwpIHsgcmV0dXJuIGVsLnRhZ05hbWUgPT09ICdJTlBVVCcgfHwgZWwudGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyB8fCBlbC50YWdOYW1lID09PSAnU0VMRUNUJyB8fCBpc0VkaXRhYmxlKGVsKTsgfVxuZnVuY3Rpb24gaXNFZGl0YWJsZSAoZWwpIHtcbiAgaWYgKCFlbCkgeyByZXR1cm4gZmFsc2U7IH0gLy8gbm8gcGFyZW50cyB3ZXJlIGVkaXRhYmxlXG4gIGlmIChlbC5jb250ZW50RWRpdGFibGUgPT09ICdmYWxzZScpIHsgcmV0dXJuIGZhbHNlOyB9IC8vIHN0b3AgdGhlIGxvb2t1cFxuICBpZiAoZWwuY29udGVudEVkaXRhYmxlID09PSAndHJ1ZScpIHsgcmV0dXJuIHRydWU7IH0gLy8gZm91bmQgYSBjb250ZW50RWRpdGFibGUgZWxlbWVudCBpbiB0aGUgY2hhaW5cbiAgcmV0dXJuIGlzRWRpdGFibGUoZ2V0UGFyZW50KGVsKSk7IC8vIGNvbnRlbnRFZGl0YWJsZSBpcyBzZXQgdG8gJ2luaGVyaXQnXG59XG5cbmZ1bmN0aW9uIG5leHRFbCAoZWwpIHtcbiAgcmV0dXJuIGVsLm5leHRFbGVtZW50U2libGluZyB8fCBtYW51YWxseSgpO1xuICBmdW5jdGlvbiBtYW51YWxseSAoKSB7XG4gICAgdmFyIHNpYmxpbmcgPSBlbDtcbiAgICBkbyB7XG4gICAgICBzaWJsaW5nID0gc2libGluZy5uZXh0U2libGluZztcbiAgICB9IHdoaWxlIChzaWJsaW5nICYmIHNpYmxpbmcubm9kZVR5cGUgIT09IDEpO1xuICAgIHJldHVybiBzaWJsaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEV2ZW50SG9zdCAoZSkge1xuICAvLyBvbiB0b3VjaGVuZCBldmVudCwgd2UgaGF2ZSB0byB1c2UgYGUuY2hhbmdlZFRvdWNoZXNgXG4gIC8vIHNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzcxOTI1NjMvdG91Y2hlbmQtZXZlbnQtcHJvcGVydGllc1xuICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2JldmFjcXVhL2RyYWd1bGEvaXNzdWVzLzM0XG4gIGlmIChlLnRhcmdldFRvdWNoZXMgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCkge1xuICAgIHJldHVybiBlLnRhcmdldFRvdWNoZXNbMF07XG4gIH1cbiAgaWYgKGUuY2hhbmdlZFRvdWNoZXMgJiYgZS5jaGFuZ2VkVG91Y2hlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZS5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgfVxuICByZXR1cm4gZTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29vcmQgKGNvb3JkLCBlKSB7XG4gIHZhciBob3N0ID0gZ2V0RXZlbnRIb3N0KGUpO1xuICB2YXIgbWlzc01hcCA9IHtcbiAgICBwYWdlWDogJ2NsaWVudFgnLCAvLyBJRThcbiAgICBwYWdlWTogJ2NsaWVudFknIC8vIElFOFxuICB9O1xuICBpZiAoY29vcmQgaW4gbWlzc01hcCAmJiAhKGNvb3JkIGluIGhvc3QpICYmIG1pc3NNYXBbY29vcmRdIGluIGhvc3QpIHtcbiAgICBjb29yZCA9IG1pc3NNYXBbY29vcmRdO1xuICB9XG4gIHJldHVybiBob3N0W2Nvb3JkXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkcmFndWxhO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL1VzZXJzL2JvYmJ5L1dvcmsvYXJjaHN5c3RlbXMvd2ViL2FwcC9wbHVnaW5zL29tZy1maWVsZHMvbm9kZV9tb2R1bGVzL2RyYWd1bGEvZHJhZ3VsYS5qc1xuLy8gbW9kdWxlIGlkID0gOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBhdG9hID0gcmVxdWlyZSgnYXRvYScpO1xudmFyIGRlYm91bmNlID0gcmVxdWlyZSgnLi9kZWJvdW5jZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVtaXR0ZXIgKHRoaW5nLCBvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIGV2dCA9IHt9O1xuICBpZiAodGhpbmcgPT09IHVuZGVmaW5lZCkgeyB0aGluZyA9IHt9OyB9XG4gIHRoaW5nLm9uID0gZnVuY3Rpb24gKHR5cGUsIGZuKSB7XG4gICAgaWYgKCFldnRbdHlwZV0pIHtcbiAgICAgIGV2dFt0eXBlXSA9IFtmbl07XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2dFt0eXBlXS5wdXNoKGZuKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaW5nO1xuICB9O1xuICB0aGluZy5vbmNlID0gZnVuY3Rpb24gKHR5cGUsIGZuKSB7XG4gICAgZm4uX29uY2UgPSB0cnVlOyAvLyB0aGluZy5vZmYoZm4pIHN0aWxsIHdvcmtzIVxuICAgIHRoaW5nLm9uKHR5cGUsIGZuKTtcbiAgICByZXR1cm4gdGhpbmc7XG4gIH07XG4gIHRoaW5nLm9mZiA9IGZ1bmN0aW9uICh0eXBlLCBmbikge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBpZiAoYyA9PT0gMSkge1xuICAgICAgZGVsZXRlIGV2dFt0eXBlXTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IDApIHtcbiAgICAgIGV2dCA9IHt9O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZXQgPSBldnRbdHlwZV07XG4gICAgICBpZiAoIWV0KSB7IHJldHVybiB0aGluZzsgfVxuICAgICAgZXQuc3BsaWNlKGV0LmluZGV4T2YoZm4pLCAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaW5nO1xuICB9O1xuICB0aGluZy5lbWl0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcmdzID0gYXRvYShhcmd1bWVudHMpO1xuICAgIHJldHVybiB0aGluZy5lbWl0dGVyU25hcHNob3QoYXJncy5zaGlmdCgpKS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfTtcbiAgdGhpbmcuZW1pdHRlclNuYXBzaG90ID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICB2YXIgZXQgPSAoZXZ0W3R5cGVdIHx8IFtdKS5zbGljZSgwKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGFyZ3MgPSBhdG9hKGFyZ3VtZW50cyk7XG4gICAgICB2YXIgY3R4ID0gdGhpcyB8fCB0aGluZztcbiAgICAgIGlmICh0eXBlID09PSAnZXJyb3InICYmIG9wdHMudGhyb3dzICE9PSBmYWxzZSAmJiAhZXQubGVuZ3RoKSB7IHRocm93IGFyZ3MubGVuZ3RoID09PSAxID8gYXJnc1swXSA6IGFyZ3M7IH1cbiAgICAgIGV0LmZvckVhY2goZnVuY3Rpb24gZW1pdHRlciAobGlzdGVuKSB7XG4gICAgICAgIGlmIChvcHRzLmFzeW5jKSB7IGRlYm91bmNlKGxpc3RlbiwgYXJncywgY3R4KTsgfSBlbHNlIHsgbGlzdGVuLmFwcGx5KGN0eCwgYXJncyk7IH1cbiAgICAgICAgaWYgKGxpc3Rlbi5fb25jZSkgeyB0aGluZy5vZmYodHlwZSwgbGlzdGVuKTsgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGhpbmc7XG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIHRoaW5nO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9Vc2Vycy9ib2JieS9Xb3JrL2FyY2hzeXN0ZW1zL3dlYi9hcHAvcGx1Z2lucy9vbWctZmllbGRzL25vZGVfbW9kdWxlcy9jb250cmEvZW1pdHRlci5qc1xuLy8gbW9kdWxlIGlkID0gOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGF0b2EgKGEsIG4pIHsgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEsIG4pOyB9XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvVXNlcnMvYm9iYnkvV29yay9hcmNoc3lzdGVtcy93ZWIvYXBwL3BsdWdpbnMvb21nLWZpZWxkcy9ub2RlX21vZHVsZXMvYXRvYS9hdG9hLmpzXG4vLyBtb2R1bGUgaWQgPSAxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciB0aWNreSA9IHJlcXVpcmUoJ3RpY2t5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVib3VuY2UgKGZuLCBhcmdzLCBjdHgpIHtcbiAgaWYgKCFmbikgeyByZXR1cm47IH1cbiAgdGlja3koZnVuY3Rpb24gcnVuICgpIHtcbiAgICBmbi5hcHBseShjdHggfHwgbnVsbCwgYXJncyB8fCBbXSk7XG4gIH0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9Vc2Vycy9ib2JieS9Xb3JrL2FyY2hzeXN0ZW1zL3dlYi9hcHAvcGx1Z2lucy9vbWctZmllbGRzL25vZGVfbW9kdWxlcy9jb250cmEvZGVib3VuY2UuanNcbi8vIG1vZHVsZSBpZCA9IDExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBzaSA9IHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICdmdW5jdGlvbicsIHRpY2s7XG5pZiAoc2kpIHtcbiAgdGljayA9IGZ1bmN0aW9uIChmbikgeyBzZXRJbW1lZGlhdGUoZm4pOyB9O1xufSBlbHNlIHtcbiAgdGljayA9IGZ1bmN0aW9uIChmbikgeyBzZXRUaW1lb3V0KGZuLCAwKTsgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0aWNrO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9Vc2Vycy9ib2JieS9Xb3JrL2FyY2hzeXN0ZW1zL3dlYi9hcHAvcGx1Z2lucy9vbWctZmllbGRzL25vZGVfbW9kdWxlcy90aWNreS90aWNreS1icm93c2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAxMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCB3aW5kb3csIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHdpbmRvdywgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWlkYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvVXNlcnMvYm9iYnkvV29yay9hcmNoc3lzdGVtcy93ZWIvYXBwL3BsdWdpbnMvb21nLWZpZWxkcy9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qc1xuLy8gbW9kdWxlIGlkID0gMTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiKGZ1bmN0aW9uIChnbG9iYWwsIHVuZGVmaW5lZCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgaWYgKGdsb2JhbC5zZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXh0SGFuZGxlID0gMTsgLy8gU3BlYyBzYXlzIGdyZWF0ZXIgdGhhbiB6ZXJvXG4gICAgdmFyIHRhc2tzQnlIYW5kbGUgPSB7fTtcbiAgICB2YXIgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgdmFyIGRvYyA9IGdsb2JhbC5kb2N1bWVudDtcbiAgICB2YXIgcmVnaXN0ZXJJbW1lZGlhdGU7XG5cbiAgICBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoY2FsbGJhY2spIHtcbiAgICAgIC8vIENhbGxiYWNrIGNhbiBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhIHN0cmluZ1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gbmV3IEZ1bmN0aW9uKFwiXCIgKyBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgICAvLyBDb3B5IGZ1bmN0aW9uIGFyZ3VtZW50c1xuICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMV07XG4gICAgICB9XG4gICAgICAvLyBTdG9yZSBhbmQgcmVnaXN0ZXIgdGhlIHRhc2tcbiAgICAgIHZhciB0YXNrID0geyBjYWxsYmFjazogY2FsbGJhY2ssIGFyZ3M6IGFyZ3MgfTtcbiAgICAgIHRhc2tzQnlIYW5kbGVbbmV4dEhhbmRsZV0gPSB0YXNrO1xuICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUobmV4dEhhbmRsZSk7XG4gICAgICByZXR1cm4gbmV4dEhhbmRsZSsrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGhhbmRsZSkge1xuICAgICAgICBkZWxldGUgdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bih0YXNrKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IHRhc2suY2FsbGJhY2s7XG4gICAgICAgIHZhciBhcmdzID0gdGFzay5hcmdzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bklmUHJlc2VudChoYW5kbGUpIHtcbiAgICAgICAgLy8gRnJvbSB0aGUgc3BlYzogXCJXYWl0IHVudGlsIGFueSBpbnZvY2F0aW9ucyBvZiB0aGlzIGFsZ29yaXRobSBzdGFydGVkIGJlZm9yZSB0aGlzIG9uZSBoYXZlIGNvbXBsZXRlZC5cIlxuICAgICAgICAvLyBTbyBpZiB3ZSdyZSBjdXJyZW50bHkgcnVubmluZyBhIHRhc2ssIHdlJ2xsIG5lZWQgdG8gZGVsYXkgdGhpcyBpbnZvY2F0aW9uLlxuICAgICAgICBpZiAoY3VycmVudGx5UnVubmluZ0FUYXNrKSB7XG4gICAgICAgICAgICAvLyBEZWxheSBieSBkb2luZyBhIHNldFRpbWVvdXQuIHNldEltbWVkaWF0ZSB3YXMgdHJpZWQgaW5zdGVhZCwgYnV0IGluIEZpcmVmb3ggNyBpdCBnZW5lcmF0ZWQgYVxuICAgICAgICAgICAgLy8gXCJ0b28gbXVjaCByZWN1cnNpb25cIiBlcnJvci5cbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRhc2sgPSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgICAgICAgICBpZiAodGFzaykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IHRydWU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcnVuKHRhc2spO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW1tZWRpYXRlKGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7IHJ1bklmUHJlc2VudChoYW5kbGUpOyB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYW5Vc2VQb3N0TWVzc2FnZSgpIHtcbiAgICAgICAgLy8gVGhlIHRlc3QgYWdhaW5zdCBgaW1wb3J0U2NyaXB0c2AgcHJldmVudHMgdGhpcyBpbXBsZW1lbnRhdGlvbiBmcm9tIGJlaW5nIGluc3RhbGxlZCBpbnNpZGUgYSB3ZWIgd29ya2VyLFxuICAgICAgICAvLyB3aGVyZSBgZ2xvYmFsLnBvc3RNZXNzYWdlYCBtZWFucyBzb21ldGhpbmcgY29tcGxldGVseSBkaWZmZXJlbnQgYW5kIGNhbid0IGJlIHVzZWQgZm9yIHRoaXMgcHVycG9zZS5cbiAgICAgICAgaWYgKGdsb2JhbC5wb3N0TWVzc2FnZSAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICAgICAgICAgIHZhciBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBvbGRPbk1lc3NhZ2UgPSBnbG9iYWwub25tZXNzYWdlO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoXCJcIiwgXCIqXCIpO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IG9sZE9uTWVzc2FnZTtcbiAgICAgICAgICAgIHJldHVybiBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIC8vIEluc3RhbGxzIGFuIGV2ZW50IGhhbmRsZXIgb24gYGdsb2JhbGAgZm9yIHRoZSBgbWVzc2FnZWAgZXZlbnQ6IHNlZVxuICAgICAgICAvLyAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0RPTS93aW5kb3cucG9zdE1lc3NhZ2VcbiAgICAgICAgLy8gKiBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9jb21tcy5odG1sI2Nyb3NzRG9jdW1lbnRNZXNzYWdlc1xuXG4gICAgICAgIHZhciBtZXNzYWdlUHJlZml4ID0gXCJzZXRJbW1lZGlhdGUkXCIgKyBNYXRoLnJhbmRvbSgpICsgXCIkXCI7XG4gICAgICAgIHZhciBvbkdsb2JhbE1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gZ2xvYmFsICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGV2ZW50LmRhdGEgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgICAgICBldmVudC5kYXRhLmluZGV4T2YobWVzc2FnZVByZWZpeCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoK2V2ZW50LmRhdGEuc2xpY2UobWVzc2FnZVByZWZpeC5sZW5ndGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UsIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdsb2JhbC5hdHRhY2hFdmVudChcIm9ubWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShtZXNzYWdlUHJlZml4ICsgaGFuZGxlLCBcIipcIik7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGUgPSBldmVudC5kYXRhO1xuICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgaHRtbCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSA8c2NyaXB0PiBlbGVtZW50OyBpdHMgcmVhZHlzdGF0ZWNoYW5nZSBldmVudCB3aWxsIGJlIGZpcmVkIGFzeW5jaHJvbm91c2x5IG9uY2UgaXQgaXMgaW5zZXJ0ZWRcbiAgICAgICAgICAgIC8vIGludG8gdGhlIGRvY3VtZW50LiBEbyBzbywgdGh1cyBxdWV1aW5nIHVwIHRoZSB0YXNrLiBSZW1lbWJlciB0byBjbGVhbiB1cCBvbmNlIGl0J3MgYmVlbiBjYWxsZWQuXG4gICAgICAgICAgICB2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgICAgICAgICBzY3JpcHQgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSWYgc3VwcG9ydGVkLCB3ZSBzaG91bGQgYXR0YWNoIHRvIHRoZSBwcm90b3R5cGUgb2YgZ2xvYmFsLCBzaW5jZSB0aGF0IGlzIHdoZXJlIHNldFRpbWVvdXQgZXQgYWwuIGxpdmUuXG4gICAgdmFyIGF0dGFjaFRvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihnbG9iYWwpO1xuICAgIGF0dGFjaFRvID0gYXR0YWNoVG8gJiYgYXR0YWNoVG8uc2V0VGltZW91dCA/IGF0dGFjaFRvIDogZ2xvYmFsO1xuXG4gICAgLy8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBlLmcuIGJyb3dzZXJpZnkgZW52aXJvbm1lbnRzLlxuICAgIGlmICh7fS50b1N0cmluZy5jYWxsKGdsb2JhbC5wcm9jZXNzKSA9PT0gXCJbb2JqZWN0IHByb2Nlc3NdXCIpIHtcbiAgICAgICAgLy8gRm9yIE5vZGUuanMgYmVmb3JlIDAuOVxuICAgICAgICBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChjYW5Vc2VQb3N0TWVzc2FnZSgpKSB7XG4gICAgICAgIC8vIEZvciBub24tSUUxMCBtb2Rlcm4gYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZ2xvYmFsLk1lc3NhZ2VDaGFubmVsKSB7XG4gICAgICAgIC8vIEZvciB3ZWIgd29ya2Vycywgd2hlcmUgc3VwcG9ydGVkXG4gICAgICAgIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGRvYyAmJiBcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiIGluIGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpKSB7XG4gICAgICAgIC8vIEZvciBJRSA24oCTOFxuICAgICAgICBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGb3Igb2xkZXIgYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpO1xuICAgIH1cblxuICAgIGF0dGFjaFRvLnNldEltbWVkaWF0ZSA9IHNldEltbWVkaWF0ZTtcbiAgICBhdHRhY2hUby5jbGVhckltbWVkaWF0ZSA9IGNsZWFySW1tZWRpYXRlO1xufSh0eXBlb2Ygc2VsZiA9PT0gXCJ1bmRlZmluZWRcIiA/IHR5cGVvZiBnbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgPyB0aGlzIDogZ2xvYmFsIDogc2VsZikpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL1VzZXJzL2JvYmJ5L1dvcmsvYXJjaHN5c3RlbXMvd2ViL2FwcC9wbHVnaW5zL29tZy1maWVsZHMvbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvVXNlcnMvYm9iYnkvV29yay9hcmNoc3lzdGVtcy93ZWIvYXBwL3BsdWdpbnMvb21nLWZpZWxkcy9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAxNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBjdXN0b21FdmVudCA9IHJlcXVpcmUoJ2N1c3RvbS1ldmVudCcpO1xudmFyIGV2ZW50bWFwID0gcmVxdWlyZSgnLi9ldmVudG1hcCcpO1xudmFyIGRvYyA9IGdsb2JhbC5kb2N1bWVudDtcbnZhciBhZGRFdmVudCA9IGFkZEV2ZW50RWFzeTtcbnZhciByZW1vdmVFdmVudCA9IHJlbW92ZUV2ZW50RWFzeTtcbnZhciBoYXJkQ2FjaGUgPSBbXTtcblxuaWYgKCFnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICBhZGRFdmVudCA9IGFkZEV2ZW50SGFyZDtcbiAgcmVtb3ZlRXZlbnQgPSByZW1vdmVFdmVudEhhcmQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhZGQ6IGFkZEV2ZW50LFxuICByZW1vdmU6IHJlbW92ZUV2ZW50LFxuICBmYWJyaWNhdGU6IGZhYnJpY2F0ZUV2ZW50XG59O1xuXG5mdW5jdGlvbiBhZGRFdmVudEVhc3kgKGVsLCB0eXBlLCBmbiwgY2FwdHVyaW5nKSB7XG4gIHJldHVybiBlbC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGZuLCBjYXB0dXJpbmcpO1xufVxuXG5mdW5jdGlvbiBhZGRFdmVudEhhcmQgKGVsLCB0eXBlLCBmbikge1xuICByZXR1cm4gZWwuYXR0YWNoRXZlbnQoJ29uJyArIHR5cGUsIHdyYXAoZWwsIHR5cGUsIGZuKSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50RWFzeSAoZWwsIHR5cGUsIGZuLCBjYXB0dXJpbmcpIHtcbiAgcmV0dXJuIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgZm4sIGNhcHR1cmluZyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50SGFyZCAoZWwsIHR5cGUsIGZuKSB7XG4gIHZhciBsaXN0ZW5lciA9IHVud3JhcChlbCwgdHlwZSwgZm4pO1xuICBpZiAobGlzdGVuZXIpIHtcbiAgICByZXR1cm4gZWwuZGV0YWNoRXZlbnQoJ29uJyArIHR5cGUsIGxpc3RlbmVyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmYWJyaWNhdGVFdmVudCAoZWwsIHR5cGUsIG1vZGVsKSB7XG4gIHZhciBlID0gZXZlbnRtYXAuaW5kZXhPZih0eXBlKSA9PT0gLTEgPyBtYWtlQ3VzdG9tRXZlbnQoKSA6IG1ha2VDbGFzc2ljRXZlbnQoKTtcbiAgaWYgKGVsLmRpc3BhdGNoRXZlbnQpIHtcbiAgICBlbC5kaXNwYXRjaEV2ZW50KGUpO1xuICB9IGVsc2Uge1xuICAgIGVsLmZpcmVFdmVudCgnb24nICsgdHlwZSwgZSk7XG4gIH1cbiAgZnVuY3Rpb24gbWFrZUNsYXNzaWNFdmVudCAoKSB7XG4gICAgdmFyIGU7XG4gICAgaWYgKGRvYy5jcmVhdGVFdmVudCkge1xuICAgICAgZSA9IGRvYy5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICAgIGUuaW5pdEV2ZW50KHR5cGUsIHRydWUsIHRydWUpO1xuICAgIH0gZWxzZSBpZiAoZG9jLmNyZWF0ZUV2ZW50T2JqZWN0KSB7XG4gICAgICBlID0gZG9jLmNyZWF0ZUV2ZW50T2JqZWN0KCk7XG4gICAgfVxuICAgIHJldHVybiBlO1xuICB9XG4gIGZ1bmN0aW9uIG1ha2VDdXN0b21FdmVudCAoKSB7XG4gICAgcmV0dXJuIG5ldyBjdXN0b21FdmVudCh0eXBlLCB7IGRldGFpbDogbW9kZWwgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gd3JhcHBlckZhY3RvcnkgKGVsLCB0eXBlLCBmbikge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcHBlciAob3JpZ2luYWxFdmVudCkge1xuICAgIHZhciBlID0gb3JpZ2luYWxFdmVudCB8fCBnbG9iYWwuZXZlbnQ7XG4gICAgZS50YXJnZXQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCA9IGUucHJldmVudERlZmF1bHQgfHwgZnVuY3Rpb24gcHJldmVudERlZmF1bHQgKCkgeyBlLnJldHVyblZhbHVlID0gZmFsc2U7IH07XG4gICAgZS5zdG9wUHJvcGFnYXRpb24gPSBlLnN0b3BQcm9wYWdhdGlvbiB8fCBmdW5jdGlvbiBzdG9wUHJvcGFnYXRpb24gKCkgeyBlLmNhbmNlbEJ1YmJsZSA9IHRydWU7IH07XG4gICAgZS53aGljaCA9IGUud2hpY2ggfHwgZS5rZXlDb2RlO1xuICAgIGZuLmNhbGwoZWwsIGUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiB3cmFwIChlbCwgdHlwZSwgZm4pIHtcbiAgdmFyIHdyYXBwZXIgPSB1bndyYXAoZWwsIHR5cGUsIGZuKSB8fCB3cmFwcGVyRmFjdG9yeShlbCwgdHlwZSwgZm4pO1xuICBoYXJkQ2FjaGUucHVzaCh7XG4gICAgd3JhcHBlcjogd3JhcHBlcixcbiAgICBlbGVtZW50OiBlbCxcbiAgICB0eXBlOiB0eXBlLFxuICAgIGZuOiBmblxuICB9KTtcbiAgcmV0dXJuIHdyYXBwZXI7XG59XG5cbmZ1bmN0aW9uIHVud3JhcCAoZWwsIHR5cGUsIGZuKSB7XG4gIHZhciBpID0gZmluZChlbCwgdHlwZSwgZm4pO1xuICBpZiAoaSkge1xuICAgIHZhciB3cmFwcGVyID0gaGFyZENhY2hlW2ldLndyYXBwZXI7XG4gICAgaGFyZENhY2hlLnNwbGljZShpLCAxKTsgLy8gZnJlZSB1cCBhIHRhZCBvZiBtZW1vcnlcbiAgICByZXR1cm4gd3JhcHBlcjtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kIChlbCwgdHlwZSwgZm4pIHtcbiAgdmFyIGksIGl0ZW07XG4gIGZvciAoaSA9IDA7IGkgPCBoYXJkQ2FjaGUubGVuZ3RoOyBpKyspIHtcbiAgICBpdGVtID0gaGFyZENhY2hlW2ldO1xuICAgIGlmIChpdGVtLmVsZW1lbnQgPT09IGVsICYmIGl0ZW0udHlwZSA9PT0gdHlwZSAmJiBpdGVtLmZuID09PSBmbikge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvVXNlcnMvYm9iYnkvV29yay9hcmNoc3lzdGVtcy93ZWIvYXBwL3BsdWdpbnMvb21nLWZpZWxkcy9ub2RlX21vZHVsZXMvY3Jvc3N2ZW50L3NyYy9jcm9zc3ZlbnQuanNcbi8vIG1vZHVsZSBpZCA9IDE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlxudmFyIE5hdGl2ZUN1c3RvbUV2ZW50ID0gZ2xvYmFsLkN1c3RvbUV2ZW50O1xuXG5mdW5jdGlvbiB1c2VOYXRpdmUgKCkge1xuICB0cnkge1xuICAgIHZhciBwID0gbmV3IE5hdGl2ZUN1c3RvbUV2ZW50KCdjYXQnLCB7IGRldGFpbDogeyBmb286ICdiYXInIH0gfSk7XG4gICAgcmV0dXJuICAnY2F0JyA9PT0gcC50eXBlICYmICdiYXInID09PSBwLmRldGFpbC5mb287XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ3Jvc3MtYnJvd3NlciBgQ3VzdG9tRXZlbnRgIGNvbnN0cnVjdG9yLlxuICpcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DdXN0b21FdmVudC5DdXN0b21FdmVudFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZU5hdGl2ZSgpID8gTmF0aXZlQ3VzdG9tRXZlbnQgOlxuXG4vLyBJRSA+PSA5XG4nZnVuY3Rpb24nID09PSB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRXZlbnQgPyBmdW5jdGlvbiBDdXN0b21FdmVudCAodHlwZSwgcGFyYW1zKSB7XG4gIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XG4gIGlmIChwYXJhbXMpIHtcbiAgICBlLmluaXRDdXN0b21FdmVudCh0eXBlLCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUsIHBhcmFtcy5kZXRhaWwpO1xuICB9IGVsc2Uge1xuICAgIGUuaW5pdEN1c3RvbUV2ZW50KHR5cGUsIGZhbHNlLCBmYWxzZSwgdm9pZCAwKTtcbiAgfVxuICByZXR1cm4gZTtcbn0gOlxuXG4vLyBJRSA8PSA4XG5mdW5jdGlvbiBDdXN0b21FdmVudCAodHlwZSwgcGFyYW1zKSB7XG4gIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnRPYmplY3QoKTtcbiAgZS50eXBlID0gdHlwZTtcbiAgaWYgKHBhcmFtcykge1xuICAgIGUuYnViYmxlcyA9IEJvb2xlYW4ocGFyYW1zLmJ1YmJsZXMpO1xuICAgIGUuY2FuY2VsYWJsZSA9IEJvb2xlYW4ocGFyYW1zLmNhbmNlbGFibGUpO1xuICAgIGUuZGV0YWlsID0gcGFyYW1zLmRldGFpbDtcbiAgfSBlbHNlIHtcbiAgICBlLmJ1YmJsZXMgPSBmYWxzZTtcbiAgICBlLmNhbmNlbGFibGUgPSBmYWxzZTtcbiAgICBlLmRldGFpbCA9IHZvaWQgMDtcbiAgfVxuICByZXR1cm4gZTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9Vc2Vycy9ib2JieS9Xb3JrL2FyY2hzeXN0ZW1zL3dlYi9hcHAvcGx1Z2lucy9vbWctZmllbGRzL25vZGVfbW9kdWxlcy9jdXN0b20tZXZlbnQvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIGV2ZW50bWFwID0gW107XG52YXIgZXZlbnRuYW1lID0gJyc7XG52YXIgcm9uID0gL15vbi87XG5cbmZvciAoZXZlbnRuYW1lIGluIGdsb2JhbCkge1xuICBpZiAocm9uLnRlc3QoZXZlbnRuYW1lKSkge1xuICAgIGV2ZW50bWFwLnB1c2goZXZlbnRuYW1lLnNsaWNlKDIpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV2ZW50bWFwO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL1VzZXJzL2JvYmJ5L1dvcmsvYXJjaHN5c3RlbXMvd2ViL2FwcC9wbHVnaW5zL29tZy1maWVsZHMvbm9kZV9tb2R1bGVzL2Nyb3NzdmVudC9zcmMvZXZlbnRtYXAuanNcbi8vIG1vZHVsZSBpZCA9IDE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNhY2hlID0ge307XG52YXIgc3RhcnQgPSAnKD86XnxcXFxccyknO1xudmFyIGVuZCA9ICcoPzpcXFxcc3wkKSc7XG5cbmZ1bmN0aW9uIGxvb2t1cENsYXNzIChjbGFzc05hbWUpIHtcbiAgdmFyIGNhY2hlZCA9IGNhY2hlW2NsYXNzTmFtZV07XG4gIGlmIChjYWNoZWQpIHtcbiAgICBjYWNoZWQubGFzdEluZGV4ID0gMDtcbiAgfSBlbHNlIHtcbiAgICBjYWNoZVtjbGFzc05hbWVdID0gY2FjaGVkID0gbmV3IFJlZ0V4cChzdGFydCArIGNsYXNzTmFtZSArIGVuZCwgJ2cnKTtcbiAgfVxuICByZXR1cm4gY2FjaGVkO1xufVxuXG5mdW5jdGlvbiBhZGRDbGFzcyAoZWwsIGNsYXNzTmFtZSkge1xuICB2YXIgY3VycmVudCA9IGVsLmNsYXNzTmFtZTtcbiAgaWYgKCFjdXJyZW50Lmxlbmd0aCkge1xuICAgIGVsLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgfSBlbHNlIGlmICghbG9va3VwQ2xhc3MoY2xhc3NOYW1lKS50ZXN0KGN1cnJlbnQpKSB7XG4gICAgZWwuY2xhc3NOYW1lICs9ICcgJyArIGNsYXNzTmFtZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBybUNsYXNzIChlbCwgY2xhc3NOYW1lKSB7XG4gIGVsLmNsYXNzTmFtZSA9IGVsLmNsYXNzTmFtZS5yZXBsYWNlKGxvb2t1cENsYXNzKGNsYXNzTmFtZSksICcgJykudHJpbSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYWRkOiBhZGRDbGFzcyxcbiAgcm06IHJtQ2xhc3Ncbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvVXNlcnMvYm9iYnkvV29yay9hcmNoc3lzdGVtcy93ZWIvYXBwL3BsdWdpbnMvb21nLWZpZWxkcy9ub2RlX21vZHVsZXMvZHJhZ3VsYS9jbGFzc2VzLmpzXG4vLyBtb2R1bGUgaWQgPSAxOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgbGlzdCBmcm9tICcuL2xpc3QnO1xuaW1wb3J0IGF1dG9TdWdnZXN0IGZyb20gJy4vYXV0b3N1Z2dlc3QnO1xuaW1wb3J0IGhpZGRlbiBmcm9tICcuL3NlcmlhbGl6ZWQtaW5wdXQnO1xuaW1wb3J0IHtcbiAgcmVtb3ZlSXRlbXMsXG4gIGRyYWdJdGVtcyxcbiAgb25EcmFnT2JqZWN0LFxuICBvblJlbW92ZU9iamVjdCxcbn0gZnJvbSAnLi91dGlsaXRpZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcmdzKSB7XG4gIGNvbnN0IGZpZWxkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYXJncy5wYXJlbnQpO1xuXG4gIGlmICghZmllbGRzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgW10uZm9yRWFjaC5jYWxsKGZpZWxkcywgYXV0b0xpc3QgPT4ge1xuICAgIGNvbnN0IEhpZGRlbiA9IGhpZGRlbihhdXRvTGlzdCwgYXJncy5oaWRkZW4pO1xuICAgIGNvbnN0IHJlbW92ZSA9IHJlbW92ZUl0ZW1zKEhpZGRlbiwgb25SZW1vdmVPYmplY3QpO1xuICAgIGNvbnN0IGRyYWcgPSBkcmFnSXRlbXMoSGlkZGVuLCBvbkRyYWdPYmplY3QpO1xuICAgIGNvbnN0IExpc3QgPSBsaXN0KFxuICAgICAgYXV0b0xpc3QsXG4gICAgICBPYmplY3QuYXNzaWduKGFyZ3MsIHsgb25EcmFnOiBkcmFnLCBvblJlbW92ZTogcmVtb3ZlIH0pLFxuICAgICk7XG4gICAgY29uc3QgaW5wdXQgPSBhdXRvTGlzdC5xdWVyeVNlbGVjdG9yKCcuYXV0b3N1Z2dlc3QtbGlzdC1pbnB1dCcpO1xuICAgIGNvbnN0IGVsTmFtZSA9IGBhdXRvTGlzdF8ke2lucHV0LmdldEF0dHJpYnV0ZSgnbGlzdCcpfWA7XG4gICAgbGV0IGVuZHBvaW50O1xuXG4gICAgaWYgKHdpbmRvd1tlbE5hbWVdLm5hbWVzcGFjZSkge1xuICAgICAgZW5kcG9pbnQgPSBgJHtPTUdGaWVsZHMuYmFzZVVSTH0vd3AtanNvbi8ke3dpbmRvd1tlbE5hbWVdLm5hbWVzcGFjZX0vJHtcbiAgICAgICAgd2luZG93W2VsTmFtZV0ucmVzb3VyY2VcbiAgICAgIH0/c2VhcmNoPWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVuZHBvaW50ID0gYCR7T01HRmllbGRzLmJhc2VVUkx9L3dwLWpzb24vd3AvdjIvJHtcbiAgICAgICAgd2luZG93W2VsTmFtZV0ucmVzb3VyY2VcbiAgICAgIH0/c2VhcmNoPWA7XG4gICAgfVxuXG4gICAgYXV0b1N1Z2dlc3QoaW5wdXQsIGVuZHBvaW50LCAodmFsdWUsIGlucHV0KSA9PiB7XG4gICAgICBMaXN0LmFkZCh2YWx1ZSk7XG4gICAgICBpbnB1dC52YWx1ZSA9ICcnO1xuICAgICAgSGlkZGVuLmFkZCh2YWx1ZSk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXV0b3N1Z2dlc3QtbGlzdC5qcyIsImltcG9ydCBhdXRvU3VnZ2VzdCBmcm9tICcuL2F1dG9zdWdnZXN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJncykge1xuICBjb25zdCBmaWVsZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGFyZ3MucGFyZW50KTtcblxuICBpZiAoIWZpZWxkcykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIFtdLmZvckVhY2guY2FsbChmaWVsZHMsIGF1dG9JdGVtID0+IHtcbiAgICBjb25zdCBoaWRkZW4gPSBhdXRvSXRlbS5xdWVyeVNlbGVjdG9yKGFyZ3MuaGlkZGVuKTtcbiAgICBjb25zdCBpbnB1dCA9IGF1dG9JdGVtLnF1ZXJ5U2VsZWN0b3IoJy5hdXRvc3VnZ2VzdC1pbnB1dCcpO1xuICAgIGNvbnN0IGVsTmFtZSA9IGBhdXRvTGlzdF8ke2lucHV0LmdldEF0dHJpYnV0ZSgnbGlzdCcpfWA7XG4gICAgbGV0IGVuZHBvaW50O1xuXG4gICAgaWYgKHdpbmRvd1tlbE5hbWVdLm5hbWVzcGFjZSkge1xuICAgICAgZW5kcG9pbnQgPSBgJHtPTUdGaWVsZHMuYmFzZVVSTH0vd3AtanNvbi8ke3dpbmRvd1tlbE5hbWVdLm5hbWVzcGFjZX0vJHtcbiAgICAgICAgd2luZG93W2VsTmFtZV0ucmVzb3VyY2VcbiAgICAgIH0/c2VhcmNoPWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVuZHBvaW50ID0gYCR7T01HRmllbGRzLmJhc2VVUkx9L3dwLWpzb24vd3AvdjIvJHtcbiAgICAgICAgd2luZG93W2VsTmFtZV0ucmVzb3VyY2VcbiAgICAgIH0/c2VhcmNoPWA7XG4gICAgfVxuXG4gICAgYXV0b1N1Z2dlc3QoXG4gICAgICBpbnB1dCxcbiAgICAgIGVuZHBvaW50LFxuICAgICAgKHZhbHVlLCBpbnB1dCkgPT4ge1xuICAgICAgICBoaWRkZW4udmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICB9LFxuICAgICAgKCkgPT4ge1xuICAgICAgICBoaWRkZW4udmFsdWUgPSAnJztcbiAgICAgIH0sXG4gICAgKTtcbiAgfSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hdXRvLWl0ZW0uanMiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbWFnZVVwbG9hZHMoKSB7XG5cdHZhciBmZWF0dXJlZEltYWdlV3JhcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jdXN0b20tbWVkaWEtdXBsb2FkJyk7XG5cblx0aWYgKCBmZWF0dXJlZEltYWdlV3JhcC5sZW5ndGggPT09IDAgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0W10ubWFwLmNhbGwoIGZlYXR1cmVkSW1hZ2VXcmFwLCBmdW5jdGlvbihpdGVtKSB7XG5cdFx0Ly8gdmFyIEltYWdlV3JhcElkID0gaXRlbS5hdHRyaWJ1dGUuaWQ7XG5cdFx0dmFyIHJlbW92ZUltYWdlID0gaXRlbS5xdWVyeVNlbGVjdG9yKCcucmVtb3ZlLWltYWdlJyk7XG5cdFx0dmFyIHJlcGxhY2VJbWFnZSA9IGl0ZW0ucXVlcnlTZWxlY3RvcignLnJlcGxhY2UtaW1hZ2UnKTtcblx0XHR2YXIgc2V0SW1hZ2UgPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoJy5zZXQtaW1hZ2UnKTtcblx0XHR2YXIgZmVhdHVyZWRJbWFnZVRhZyA9IGl0ZW0ucXVlcnlTZWxlY3RvcignYS5yZXBsYWNlLWltYWdlIGltZycpO1xuXHRcdHZhciBmZWF0dXJlZEltYWdlSUQgPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3R5cGU9XCJoaWRkZW5cIl0nKTtcblx0XHR2YXIgZmVhdHVyZWRJbWFnZVRpdGxlID0gaXRlbS5xdWVyeVNlbGVjdG9yKCAnLnRodW1ibmFpbC10aXRsZScgKTtcblx0XHR2YXIgbWVkaWFGcmFtZSA9IHdwLm1lZGlhKHtcblx0XHRcdHRpdGxlOiAnQ2hvb3NlIE1lZGlhJyxcblx0XHRcdGJ1dHRvbjoge1xuXHRcdFx0XHR0ZXh0OiAnVXNlIFNlbGVjdGVkIE1lZGlhJ1xuXHRcdFx0fSxcblx0XHRcdG11bHRpcGxlOiBmYWxzZVxuXHRcdH0pO1xuXG5cdFx0bWVkaWFGcmFtZS5vbignc2VsZWN0JywgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgYXR0YWNobWVudCA9IG1lZGlhRnJhbWUuc3RhdGUoKS5nZXQoJ3NlbGVjdGlvbicpLmZpcnN0KCkudG9KU09OKCk7XG5cblx0XHRcdGl0ZW0uY2xhc3NMaXN0LnRvZ2dsZSgnaGFzLWltYWdlJyk7XG5cdFx0XHRmZWF0dXJlZEltYWdlSUQudmFsdWUgPSBhdHRhY2htZW50LmlkO1xuXHRcdFx0aWYgKGF0dGFjaG1lbnQuaGFzT3duUHJvcGVydHkoJ3NpemVzJykpIHtcblx0XHRcdFx0ZmVhdHVyZWRJbWFnZVRhZy5zZXRBdHRyaWJ1dGUoJ3NyYycsIGF0dGFjaG1lbnQuc2l6ZXMudGh1bWJuYWlsLnVybCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmZWF0dXJlZEltYWdlVGFnLnNldEF0dHJpYnV0ZSgnc3JjJywgYXR0YWNobWVudC5pY29uKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBmZWF0dXJlZEltYWdlVGl0bGUgKSB7XG5cdFx0XHRcdGZlYXR1cmVkSW1hZ2VUaXRsZS5pbm5lckhUTUwgPSBhdHRhY2htZW50LmZpbGVuYW1lO1xuXHRcdFx0fVxuXG5cdFx0fSk7XG5cblx0XHRyZW1vdmVJbWFnZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0aXRlbS5jbGFzc0xpc3QudG9nZ2xlKCdoYXMtaW1hZ2UnKTtcblx0XHRcdGZlYXR1cmVkSW1hZ2VUYWcuc2V0QXR0cmlidXRlKCdzcmMnLCAnJyk7XG5cdFx0XHRmZWF0dXJlZEltYWdlSUQudmFsdWUgPSAnJztcblxuXHRcdFx0aWYgKCBmZWF0dXJlZEltYWdlVGl0bGUgKSB7XG5cdFx0XHRcdGZlYXR1cmVkSW1hZ2VUaXRsZS5pbm5lckhUTUwgPSAnJztcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJlcGxhY2VJbWFnZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0bWVkaWFGcmFtZS5vcGVuKCk7XG5cdFx0fSk7XG5cblx0XHRzZXRJbWFnZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0bWVkaWFGcmFtZS5vcGVuKCk7XG5cdFx0fSk7XG5cdH0pO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2ltYWdlLXVwbG9hZHMuanMiLCJpbXBvcnQgZmxhdHBpY2tyIGZyb20gJ2ZsYXRwaWNrcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICBjb25zdCBkYXRlcGlja2VycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5kYXRlcGlja2VyLWlucHV0Jyk7XG5cbiAgaWYgKCFkYXRlcGlja2Vycykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIFtdLmZvckVhY2guY2FsbChkYXRlcGlja2VycywgZGF0ZUZpZWxkID0+IHtcbiAgICBjb25zdCBjdXJyZW50RGF0ZSA9IGRhdGVGaWVsZC5kYXRhc2V0LmRhdGU7XG5cbiAgICBmbGF0cGlja3IoZGF0ZUZpZWxkLCB7XG4gICAgICBhbHRJbnB1dDogdHJ1ZSxcbiAgICAgIGFsdEZvcm1hdDogJ0YgaiwgWScsXG4gICAgICBkYXRlRm9ybWF0OiAnVScsXG4gICAgICBkZWZhdWx0RGF0ZTogIWN1cnJlbnREYXRlID8gJycgOiBjdXJyZW50RGF0ZSxcbiAgICB9KTtcbiAgfSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kYXRlcGlja2VyLmpzIiwiLyogZmxhdHBpY2tyIHY0LjQuMywgQGxpY2Vuc2UgTUlUICovXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIChnbG9iYWwuZmxhdHBpY2tyID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIHBhZCA9IGZ1bmN0aW9uIHBhZChudW1iZXIpIHtcbiAgICAgIHJldHVybiAoXCIwXCIgKyBudW1iZXIpLnNsaWNlKC0yKTtcbiAgICB9O1xuICAgIHZhciBpbnQgPSBmdW5jdGlvbiBpbnQoYm9vbCkge1xuICAgICAgcmV0dXJuIGJvb2wgPT09IHRydWUgPyAxIDogMDtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIGltbWVkaWF0ZSkge1xuICAgICAgaWYgKGltbWVkaWF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGltbWVkaWF0ZSA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGltZW91dDtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb250ZXh0ID0gdGhpcyxcbiAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHRpbWVvdXQgIT09IG51bGwgJiYgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgIGlmICghaW1tZWRpYXRlKSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICB9LCB3YWl0KTtcbiAgICAgICAgaWYgKGltbWVkaWF0ZSAmJiAhdGltZW91dCkgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHZhciBhcnJheWlmeSA9IGZ1bmN0aW9uIGFycmF5aWZ5KG9iaikge1xuICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIEFycmF5ID8gb2JqIDogW29ial07XG4gICAgfTtcblxuICAgIHZhciBkb19ub3RoaW5nID0gZnVuY3Rpb24gZG9fbm90aGluZygpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcblxuICAgIHZhciBtb250aFRvU3RyID0gZnVuY3Rpb24gbW9udGhUb1N0cihtb250aE51bWJlciwgc2hvcnRoYW5kLCBsb2NhbGUpIHtcbiAgICAgIHJldHVybiBsb2NhbGUubW9udGhzW3Nob3J0aGFuZCA/IFwic2hvcnRoYW5kXCIgOiBcImxvbmdoYW5kXCJdW21vbnRoTnVtYmVyXTtcbiAgICB9O1xuICAgIHZhciByZXZGb3JtYXQgPSB7XG4gICAgICBEOiBkb19ub3RoaW5nLFxuICAgICAgRjogZnVuY3Rpb24gRihkYXRlT2JqLCBtb250aE5hbWUsIGxvY2FsZSkge1xuICAgICAgICBkYXRlT2JqLnNldE1vbnRoKGxvY2FsZS5tb250aHMubG9uZ2hhbmQuaW5kZXhPZihtb250aE5hbWUpKTtcbiAgICAgIH0sXG4gICAgICBHOiBmdW5jdGlvbiBHKGRhdGVPYmosIGhvdXIpIHtcbiAgICAgICAgZGF0ZU9iai5zZXRIb3VycyhwYXJzZUZsb2F0KGhvdXIpKTtcbiAgICAgIH0sXG4gICAgICBIOiBmdW5jdGlvbiBIKGRhdGVPYmosIGhvdXIpIHtcbiAgICAgICAgZGF0ZU9iai5zZXRIb3VycyhwYXJzZUZsb2F0KGhvdXIpKTtcbiAgICAgIH0sXG4gICAgICBKOiBmdW5jdGlvbiBKKGRhdGVPYmosIGRheSkge1xuICAgICAgICBkYXRlT2JqLnNldERhdGUocGFyc2VGbG9hdChkYXkpKTtcbiAgICAgIH0sXG4gICAgICBLOiBmdW5jdGlvbiBLKGRhdGVPYmosIGFtUE0sIGxvY2FsZSkge1xuICAgICAgICBkYXRlT2JqLnNldEhvdXJzKGRhdGVPYmouZ2V0SG91cnMoKSAlIDEyICsgMTIgKiBpbnQobmV3IFJlZ0V4cChsb2NhbGUuYW1QTVsxXSwgXCJpXCIpLnRlc3QoYW1QTSkpKTtcbiAgICAgIH0sXG4gICAgICBNOiBmdW5jdGlvbiBNKGRhdGVPYmosIHNob3J0TW9udGgsIGxvY2FsZSkge1xuICAgICAgICBkYXRlT2JqLnNldE1vbnRoKGxvY2FsZS5tb250aHMuc2hvcnRoYW5kLmluZGV4T2Yoc2hvcnRNb250aCkpO1xuICAgICAgfSxcbiAgICAgIFM6IGZ1bmN0aW9uIFMoZGF0ZU9iaiwgc2Vjb25kcykge1xuICAgICAgICBkYXRlT2JqLnNldFNlY29uZHMocGFyc2VGbG9hdChzZWNvbmRzKSk7XG4gICAgICB9LFxuICAgICAgVTogZnVuY3Rpb24gVShfLCB1bml4U2Vjb25kcykge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUocGFyc2VGbG9hdCh1bml4U2Vjb25kcykgKiAxMDAwKTtcbiAgICAgIH0sXG4gICAgICBXOiBmdW5jdGlvbiBXKGRhdGVPYmosIHdlZWtOdW0pIHtcbiAgICAgICAgdmFyIHdlZWtOdW1iZXIgPSBwYXJzZUludCh3ZWVrTnVtKTtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGVPYmouZ2V0RnVsbFllYXIoKSwgMCwgMiArICh3ZWVrTnVtYmVyIC0gMSkgKiA3LCAwLCAwLCAwLCAwKTtcbiAgICAgIH0sXG4gICAgICBZOiBmdW5jdGlvbiBZKGRhdGVPYmosIHllYXIpIHtcbiAgICAgICAgZGF0ZU9iai5zZXRGdWxsWWVhcihwYXJzZUZsb2F0KHllYXIpKTtcbiAgICAgIH0sXG4gICAgICBaOiBmdW5jdGlvbiBaKF8sIElTT0RhdGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKElTT0RhdGUpO1xuICAgICAgfSxcbiAgICAgIGQ6IGZ1bmN0aW9uIGQoZGF0ZU9iaiwgZGF5KSB7XG4gICAgICAgIGRhdGVPYmouc2V0RGF0ZShwYXJzZUZsb2F0KGRheSkpO1xuICAgICAgfSxcbiAgICAgIGg6IGZ1bmN0aW9uIGgoZGF0ZU9iaiwgaG91cikge1xuICAgICAgICBkYXRlT2JqLnNldEhvdXJzKHBhcnNlRmxvYXQoaG91cikpO1xuICAgICAgfSxcbiAgICAgIGk6IGZ1bmN0aW9uIGkoZGF0ZU9iaiwgbWludXRlcykge1xuICAgICAgICBkYXRlT2JqLnNldE1pbnV0ZXMocGFyc2VGbG9hdChtaW51dGVzKSk7XG4gICAgICB9LFxuICAgICAgajogZnVuY3Rpb24gaihkYXRlT2JqLCBkYXkpIHtcbiAgICAgICAgZGF0ZU9iai5zZXREYXRlKHBhcnNlRmxvYXQoZGF5KSk7XG4gICAgICB9LFxuICAgICAgbDogZG9fbm90aGluZyxcbiAgICAgIG06IGZ1bmN0aW9uIG0oZGF0ZU9iaiwgbW9udGgpIHtcbiAgICAgICAgZGF0ZU9iai5zZXRNb250aChwYXJzZUZsb2F0KG1vbnRoKSAtIDEpO1xuICAgICAgfSxcbiAgICAgIG46IGZ1bmN0aW9uIG4oZGF0ZU9iaiwgbW9udGgpIHtcbiAgICAgICAgZGF0ZU9iai5zZXRNb250aChwYXJzZUZsb2F0KG1vbnRoKSAtIDEpO1xuICAgICAgfSxcbiAgICAgIHM6IGZ1bmN0aW9uIHMoZGF0ZU9iaiwgc2Vjb25kcykge1xuICAgICAgICBkYXRlT2JqLnNldFNlY29uZHMocGFyc2VGbG9hdChzZWNvbmRzKSk7XG4gICAgICB9LFxuICAgICAgdzogZG9fbm90aGluZyxcbiAgICAgIHk6IGZ1bmN0aW9uIHkoZGF0ZU9iaiwgeWVhcikge1xuICAgICAgICBkYXRlT2JqLnNldEZ1bGxZZWFyKDIwMDAgKyBwYXJzZUZsb2F0KHllYXIpKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciB0b2tlblJlZ2V4ID0ge1xuICAgICAgRDogXCIoXFxcXHcrKVwiLFxuICAgICAgRjogXCIoXFxcXHcrKVwiLFxuICAgICAgRzogXCIoXFxcXGRcXFxcZHxcXFxcZClcIixcbiAgICAgIEg6IFwiKFxcXFxkXFxcXGR8XFxcXGQpXCIsXG4gICAgICBKOiBcIihcXFxcZFxcXFxkfFxcXFxkKVxcXFx3K1wiLFxuICAgICAgSzogXCJcIixcbiAgICAgIE06IFwiKFxcXFx3KylcIixcbiAgICAgIFM6IFwiKFxcXFxkXFxcXGR8XFxcXGQpXCIsXG4gICAgICBVOiBcIiguKylcIixcbiAgICAgIFc6IFwiKFxcXFxkXFxcXGR8XFxcXGQpXCIsXG4gICAgICBZOiBcIihcXFxcZHs0fSlcIixcbiAgICAgIFo6IFwiKC4rKVwiLFxuICAgICAgZDogXCIoXFxcXGRcXFxcZHxcXFxcZClcIixcbiAgICAgIGg6IFwiKFxcXFxkXFxcXGR8XFxcXGQpXCIsXG4gICAgICBpOiBcIihcXFxcZFxcXFxkfFxcXFxkKVwiLFxuICAgICAgajogXCIoXFxcXGRcXFxcZHxcXFxcZClcIixcbiAgICAgIGw6IFwiKFxcXFx3KylcIixcbiAgICAgIG06IFwiKFxcXFxkXFxcXGR8XFxcXGQpXCIsXG4gICAgICBuOiBcIihcXFxcZFxcXFxkfFxcXFxkKVwiLFxuICAgICAgczogXCIoXFxcXGRcXFxcZHxcXFxcZClcIixcbiAgICAgIHc6IFwiKFxcXFxkXFxcXGR8XFxcXGQpXCIsXG4gICAgICB5OiBcIihcXFxcZHsyfSlcIlxuICAgIH07XG4gICAgdmFyIGZvcm1hdHMgPSB7XG4gICAgICBaOiBmdW5jdGlvbiBaKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIGRhdGUudG9JU09TdHJpbmcoKTtcbiAgICAgIH0sXG4gICAgICBEOiBmdW5jdGlvbiBEKGRhdGUsIGxvY2FsZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzLnNob3J0aGFuZFtmb3JtYXRzLncoZGF0ZSwgbG9jYWxlLCBvcHRpb25zKV07XG4gICAgICB9LFxuICAgICAgRjogZnVuY3Rpb24gRihkYXRlLCBsb2NhbGUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG1vbnRoVG9TdHIoZm9ybWF0cy5uKGRhdGUsIGxvY2FsZSwgb3B0aW9ucykgLSAxLCBmYWxzZSwgbG9jYWxlKTtcbiAgICAgIH0sXG4gICAgICBHOiBmdW5jdGlvbiBHKGRhdGUsIGxvY2FsZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gcGFkKGZvcm1hdHMuaChkYXRlLCBsb2NhbGUsIG9wdGlvbnMpKTtcbiAgICAgIH0sXG4gICAgICBIOiBmdW5jdGlvbiBIKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIHBhZChkYXRlLmdldEhvdXJzKCkpO1xuICAgICAgfSxcbiAgICAgIEo6IGZ1bmN0aW9uIEooZGF0ZSwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUub3JkaW5hbCAhPT0gdW5kZWZpbmVkID8gZGF0ZS5nZXREYXRlKCkgKyBsb2NhbGUub3JkaW5hbChkYXRlLmdldERhdGUoKSkgOiBkYXRlLmdldERhdGUoKTtcbiAgICAgIH0sXG4gICAgICBLOiBmdW5jdGlvbiBLKGRhdGUsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmFtUE1baW50KGRhdGUuZ2V0SG91cnMoKSA+IDExKV07XG4gICAgICB9LFxuICAgICAgTTogZnVuY3Rpb24gTShkYXRlLCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIG1vbnRoVG9TdHIoZGF0ZS5nZXRNb250aCgpLCB0cnVlLCBsb2NhbGUpO1xuICAgICAgfSxcbiAgICAgIFM6IGZ1bmN0aW9uIFMoZGF0ZSkge1xuICAgICAgICByZXR1cm4gcGFkKGRhdGUuZ2V0U2Vjb25kcygpKTtcbiAgICAgIH0sXG4gICAgICBVOiBmdW5jdGlvbiBVKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpIC8gMTAwMDtcbiAgICAgIH0sXG4gICAgICBXOiBmdW5jdGlvbiBXKGRhdGUsIF8sIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMuZ2V0V2VlayhkYXRlKTtcbiAgICAgIH0sXG4gICAgICBZOiBmdW5jdGlvbiBZKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICAgIH0sXG4gICAgICBkOiBmdW5jdGlvbiBkKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIHBhZChkYXRlLmdldERhdGUoKSk7XG4gICAgICB9LFxuICAgICAgaDogZnVuY3Rpb24gaChkYXRlKSB7XG4gICAgICAgIHJldHVybiBkYXRlLmdldEhvdXJzKCkgJSAxMiA/IGRhdGUuZ2V0SG91cnMoKSAlIDEyIDogMTI7XG4gICAgICB9LFxuICAgICAgaTogZnVuY3Rpb24gaShkYXRlKSB7XG4gICAgICAgIHJldHVybiBwYWQoZGF0ZS5nZXRNaW51dGVzKCkpO1xuICAgICAgfSxcbiAgICAgIGo6IGZ1bmN0aW9uIGooZGF0ZSkge1xuICAgICAgICByZXR1cm4gZGF0ZS5nZXREYXRlKCk7XG4gICAgICB9LFxuICAgICAgbDogZnVuY3Rpb24gbChkYXRlLCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5cy5sb25naGFuZFtkYXRlLmdldERheSgpXTtcbiAgICAgIH0sXG4gICAgICBtOiBmdW5jdGlvbiBtKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIHBhZChkYXRlLmdldE1vbnRoKCkgKyAxKTtcbiAgICAgIH0sXG4gICAgICBuOiBmdW5jdGlvbiBuKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKSArIDE7XG4gICAgICB9LFxuICAgICAgczogZnVuY3Rpb24gcyhkYXRlKSB7XG4gICAgICAgIHJldHVybiBkYXRlLmdldFNlY29uZHMoKTtcbiAgICAgIH0sXG4gICAgICB3OiBmdW5jdGlvbiB3KGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIGRhdGUuZ2V0RGF5KCk7XG4gICAgICB9LFxuICAgICAgeTogZnVuY3Rpb24geShkYXRlKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcoZGF0ZS5nZXRGdWxsWWVhcigpKS5zdWJzdHJpbmcoMik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBlbmdsaXNoID0ge1xuICAgICAgd2Vla2RheXM6IHtcbiAgICAgICAgc2hvcnRoYW5kOiBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIl0sXG4gICAgICAgIGxvbmdoYW5kOiBbXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiXVxuICAgICAgfSxcbiAgICAgIG1vbnRoczoge1xuICAgICAgICBzaG9ydGhhbmQ6IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXSxcbiAgICAgICAgbG9uZ2hhbmQ6IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdXG4gICAgICB9LFxuICAgICAgZGF5c0luTW9udGg6IFszMSwgMjgsIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXSxcbiAgICAgIGZpcnN0RGF5T2ZXZWVrOiAwLFxuICAgICAgb3JkaW5hbDogZnVuY3Rpb24gb3JkaW5hbChudGgpIHtcbiAgICAgICAgdmFyIHMgPSBudGggJSAxMDA7XG4gICAgICAgIGlmIChzID4gMyAmJiBzIDwgMjEpIHJldHVybiBcInRoXCI7XG5cbiAgICAgICAgc3dpdGNoIChzICUgMTApIHtcbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICByZXR1cm4gXCJzdFwiO1xuXG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgcmV0dXJuIFwibmRcIjtcblxuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHJldHVybiBcInJkXCI7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFwidGhcIjtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJhbmdlU2VwYXJhdG9yOiBcIiB0byBcIixcbiAgICAgIHdlZWtBYmJyZXZpYXRpb246IFwiV2tcIixcbiAgICAgIHNjcm9sbFRpdGxlOiBcIlNjcm9sbCB0byBpbmNyZW1lbnRcIixcbiAgICAgIHRvZ2dsZVRpdGxlOiBcIkNsaWNrIHRvIHRvZ2dsZVwiLFxuICAgICAgYW1QTTogW1wiQU1cIiwgXCJQTVwiXSxcbiAgICAgIHllYXJBcmlhTGFiZWw6IFwiWWVhclwiXG4gICAgfTtcblxuICAgIHZhciBjcmVhdGVEYXRlRm9ybWF0dGVyID0gZnVuY3Rpb24gY3JlYXRlRGF0ZUZvcm1hdHRlcihfcmVmKSB7XG4gICAgICB2YXIgX3JlZiRjb25maWcgPSBfcmVmLmNvbmZpZyxcbiAgICAgICAgICBjb25maWcgPSBfcmVmJGNvbmZpZyA9PT0gdm9pZCAwID8gZGVmYXVsdHMgOiBfcmVmJGNvbmZpZyxcbiAgICAgICAgICBfcmVmJGwxMG4gPSBfcmVmLmwxMG4sXG4gICAgICAgICAgbDEwbiA9IF9yZWYkbDEwbiA9PT0gdm9pZCAwID8gZW5nbGlzaCA6IF9yZWYkbDEwbjtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoZGF0ZU9iaiwgZnJtdCwgb3ZlcnJpZGVMb2NhbGUpIHtcbiAgICAgICAgaWYgKGNvbmZpZy5mb3JtYXREYXRlICE9PSB1bmRlZmluZWQpIHJldHVybiBjb25maWcuZm9ybWF0RGF0ZShkYXRlT2JqLCBmcm10KTtcbiAgICAgICAgdmFyIGxvY2FsZSA9IG92ZXJyaWRlTG9jYWxlIHx8IGwxMG47XG4gICAgICAgIHJldHVybiBmcm10LnNwbGl0KFwiXCIpLm1hcChmdW5jdGlvbiAoYywgaSwgYXJyKSB7XG4gICAgICAgICAgcmV0dXJuIGZvcm1hdHNbY10gJiYgYXJyW2kgLSAxXSAhPT0gXCJcXFxcXCIgPyBmb3JtYXRzW2NdKGRhdGVPYmosIGxvY2FsZSwgY29uZmlnKSA6IGMgIT09IFwiXFxcXFwiID8gYyA6IFwiXCI7XG4gICAgICAgIH0pLmpvaW4oXCJcIik7XG4gICAgICB9O1xuICAgIH07XG4gICAgdmFyIGNyZWF0ZURhdGVQYXJzZXIgPSBmdW5jdGlvbiBjcmVhdGVEYXRlUGFyc2VyKF9yZWYyKSB7XG4gICAgICB2YXIgX3JlZjIkY29uZmlnID0gX3JlZjIuY29uZmlnLFxuICAgICAgICAgIGNvbmZpZyA9IF9yZWYyJGNvbmZpZyA9PT0gdm9pZCAwID8gZGVmYXVsdHMgOiBfcmVmMiRjb25maWcsXG4gICAgICAgICAgX3JlZjIkbDEwbiA9IF9yZWYyLmwxMG4sXG4gICAgICAgICAgbDEwbiA9IF9yZWYyJGwxMG4gPT09IHZvaWQgMCA/IGVuZ2xpc2ggOiBfcmVmMiRsMTBuO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRlLCBnaXZlbkZvcm1hdCwgdGltZWxlc3MpIHtcbiAgICAgICAgaWYgKGRhdGUgIT09IDAgJiYgIWRhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBwYXJzZWREYXRlO1xuICAgICAgICB2YXIgZGF0ZV9vcmlnID0gZGF0ZTtcbiAgICAgICAgaWYgKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSBwYXJzZWREYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpO2Vsc2UgaWYgKHR5cGVvZiBkYXRlICE9PSBcInN0cmluZ1wiICYmIGRhdGUudG9GaXhlZCAhPT0gdW5kZWZpbmVkKSBwYXJzZWREYXRlID0gbmV3IERhdGUoZGF0ZSk7ZWxzZSBpZiAodHlwZW9mIGRhdGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICB2YXIgZm9ybWF0ID0gZ2l2ZW5Gb3JtYXQgfHwgKGNvbmZpZyB8fCBkZWZhdWx0cykuZGF0ZUZvcm1hdDtcbiAgICAgICAgICB2YXIgZGF0ZXN0ciA9IFN0cmluZyhkYXRlKS50cmltKCk7XG5cbiAgICAgICAgICBpZiAoZGF0ZXN0ciA9PT0gXCJ0b2RheVwiKSB7XG4gICAgICAgICAgICBwYXJzZWREYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIHRpbWVsZXNzID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKC9aJC8udGVzdChkYXRlc3RyKSB8fCAvR01UJC8udGVzdChkYXRlc3RyKSkgcGFyc2VkRGF0ZSA9IG5ldyBEYXRlKGRhdGUpO2Vsc2UgaWYgKGNvbmZpZyAmJiBjb25maWcucGFyc2VEYXRlKSBwYXJzZWREYXRlID0gY29uZmlnLnBhcnNlRGF0ZShkYXRlLCBmb3JtYXQpO2Vsc2Uge1xuICAgICAgICAgICAgcGFyc2VkRGF0ZSA9ICFjb25maWcgfHwgIWNvbmZpZy5ub0NhbGVuZGFyID8gbmV3IERhdGUobmV3IERhdGUoKS5nZXRGdWxsWWVhcigpLCAwLCAxLCAwLCAwLCAwLCAwKSA6IG5ldyBEYXRlKG5ldyBEYXRlKCkuc2V0SG91cnMoMCwgMCwgMCwgMCkpO1xuICAgICAgICAgICAgdmFyIG1hdGNoZWQsXG4gICAgICAgICAgICAgICAgb3BzID0gW107XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBtYXRjaEluZGV4ID0gMCwgcmVnZXhTdHIgPSBcIlwiOyBpIDwgZm9ybWF0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIHZhciB0b2tlbiA9IGZvcm1hdFtpXTtcbiAgICAgICAgICAgICAgdmFyIGlzQmFja1NsYXNoID0gdG9rZW4gPT09IFwiXFxcXFwiO1xuICAgICAgICAgICAgICB2YXIgZXNjYXBlZCA9IGZvcm1hdFtpIC0gMV0gPT09IFwiXFxcXFwiIHx8IGlzQmFja1NsYXNoO1xuXG4gICAgICAgICAgICAgIGlmICh0b2tlblJlZ2V4W3Rva2VuXSAmJiAhZXNjYXBlZCkge1xuICAgICAgICAgICAgICAgIHJlZ2V4U3RyICs9IHRva2VuUmVnZXhbdG9rZW5dO1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IG5ldyBSZWdFeHAocmVnZXhTdHIpLmV4ZWMoZGF0ZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAobWF0Y2ggJiYgKG1hdGNoZWQgPSB0cnVlKSkge1xuICAgICAgICAgICAgICAgICAgb3BzW3Rva2VuICE9PSBcIllcIiA/IFwicHVzaFwiIDogXCJ1bnNoaWZ0XCJdKHtcbiAgICAgICAgICAgICAgICAgICAgZm46IHJldkZvcm1hdFt0b2tlbl0sXG4gICAgICAgICAgICAgICAgICAgIHZhbDogbWF0Y2hbKyttYXRjaEluZGV4XVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFpc0JhY2tTbGFzaCkgcmVnZXhTdHIgKz0gXCIuXCI7XG5cbiAgICAgICAgICAgICAgb3BzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZuID0gX3JlZjMuZm4sXG4gICAgICAgICAgICAgICAgICAgIHZhbCA9IF9yZWYzLnZhbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VkRGF0ZSA9IGZuKHBhcnNlZERhdGUsIHZhbCwgbDEwbikgfHwgcGFyc2VkRGF0ZTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBhcnNlZERhdGUgPSBtYXRjaGVkID8gcGFyc2VkRGF0ZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIShwYXJzZWREYXRlIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgICBjb25maWcuZXJyb3JIYW5kbGVyKG5ldyBFcnJvcihcIkludmFsaWQgZGF0ZSBwcm92aWRlZDogXCIgKyBkYXRlX29yaWcpKTtcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRpbWVsZXNzID09PSB0cnVlKSBwYXJzZWREYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgICByZXR1cm4gcGFyc2VkRGF0ZTtcbiAgICAgIH07XG4gICAgfTtcbiAgICBmdW5jdGlvbiBjb21wYXJlRGF0ZXMoZGF0ZTEsIGRhdGUyLCB0aW1lbGVzcykge1xuICAgICAgaWYgKHRpbWVsZXNzID09PSB2b2lkIDApIHtcbiAgICAgICAgdGltZWxlc3MgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGltZWxlc3MgIT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShkYXRlMS5nZXRUaW1lKCkpLnNldEhvdXJzKDAsIDAsIDAsIDApIC0gbmV3IERhdGUoZGF0ZTIuZ2V0VGltZSgpKS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRhdGUxLmdldFRpbWUoKSAtIGRhdGUyLmdldFRpbWUoKTtcbiAgICB9XG4gICAgdmFyIGdldFdlZWsgPSBmdW5jdGlvbiBnZXRXZWVrKGdpdmVuRGF0ZSkge1xuICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShnaXZlbkRhdGUuZ2V0VGltZSgpKTtcbiAgICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyAzIC0gKGRhdGUuZ2V0RGF5KCkgKyA2KSAlIDcpO1xuICAgICAgdmFyIHdlZWsxID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCAwLCA0KTtcbiAgICAgIHJldHVybiAxICsgTWF0aC5yb3VuZCgoKGRhdGUuZ2V0VGltZSgpIC0gd2VlazEuZ2V0VGltZSgpKSAvIDg2NDAwMDAwIC0gMyArICh3ZWVrMS5nZXREYXkoKSArIDYpICUgNykgLyA3KTtcbiAgICB9O1xuICAgIHZhciBpc0JldHdlZW4gPSBmdW5jdGlvbiBpc0JldHdlZW4odHMsIHRzMSwgdHMyKSB7XG4gICAgICByZXR1cm4gdHMgPiBNYXRoLm1pbih0czEsIHRzMikgJiYgdHMgPCBNYXRoLm1heCh0czEsIHRzMik7XG4gICAgfTtcbiAgICB2YXIgZHVyYXRpb24gPSB7XG4gICAgICBEQVk6IDg2NDAwMDAwXG4gICAgfTtcblxuICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgIF9kaXNhYmxlOiBbXSxcbiAgICAgIF9lbmFibGU6IFtdLFxuICAgICAgYWxsb3dJbnB1dDogZmFsc2UsXG4gICAgICBhbHRGb3JtYXQ6IFwiRiBqLCBZXCIsXG4gICAgICBhbHRJbnB1dDogZmFsc2UsXG4gICAgICBhbHRJbnB1dENsYXNzOiBcImZvcm0tY29udHJvbCBpbnB1dFwiLFxuICAgICAgYW5pbWF0ZTogdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiTVNJRVwiKSA9PT0gLTEsXG4gICAgICBhcmlhRGF0ZUZvcm1hdDogXCJGIGosIFlcIixcbiAgICAgIGNsaWNrT3BlbnM6IHRydWUsXG4gICAgICBjbG9zZU9uU2VsZWN0OiB0cnVlLFxuICAgICAgY29uanVuY3Rpb246IFwiLCBcIixcbiAgICAgIGRhdGVGb3JtYXQ6IFwiWS1tLWRcIixcbiAgICAgIGRlZmF1bHRIb3VyOiAxMixcbiAgICAgIGRlZmF1bHRNaW51dGU6IDAsXG4gICAgICBkZWZhdWx0U2Vjb25kczogMCxcbiAgICAgIGRpc2FibGU6IFtdLFxuICAgICAgZGlzYWJsZU1vYmlsZTogZmFsc2UsXG4gICAgICBlbmFibGU6IFtdLFxuICAgICAgZW5hYmxlU2Vjb25kczogZmFsc2UsXG4gICAgICBlbmFibGVUaW1lOiBmYWxzZSxcbiAgICAgIGVycm9ySGFuZGxlcjogY29uc29sZS53YXJuLFxuICAgICAgZ2V0V2VlazogZ2V0V2VlayxcbiAgICAgIGhvdXJJbmNyZW1lbnQ6IDEsXG4gICAgICBpZ25vcmVkRm9jdXNFbGVtZW50czogW10sXG4gICAgICBpbmxpbmU6IGZhbHNlLFxuICAgICAgbG9jYWxlOiBcImRlZmF1bHRcIixcbiAgICAgIG1pbnV0ZUluY3JlbWVudDogNSxcbiAgICAgIG1vZGU6IFwic2luZ2xlXCIsXG4gICAgICBuZXh0QXJyb3c6IFwiPHN2ZyB2ZXJzaW9uPScxLjEnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycgeG1sbnM6eGxpbms9J2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnIHZpZXdCb3g9JzAgMCAxNyAxNyc+PGc+PC9nPjxwYXRoIGQ9J00xMy4yMDcgOC40NzJsLTcuODU0IDcuODU0LTAuNzA3LTAuNzA3IDcuMTQ2LTcuMTQ2LTcuMTQ2LTcuMTQ4IDAuNzA3LTAuNzA3IDcuODU0IDcuODU0eicgLz48L3N2Zz5cIixcbiAgICAgIG5vQ2FsZW5kYXI6IGZhbHNlLFxuICAgICAgbm93OiBuZXcgRGF0ZSgpLFxuICAgICAgb25DaGFuZ2U6IFtdLFxuICAgICAgb25DbG9zZTogW10sXG4gICAgICBvbkRheUNyZWF0ZTogW10sXG4gICAgICBvbkRlc3Ryb3k6IFtdLFxuICAgICAgb25LZXlEb3duOiBbXSxcbiAgICAgIG9uTW9udGhDaGFuZ2U6IFtdLFxuICAgICAgb25PcGVuOiBbXSxcbiAgICAgIG9uUGFyc2VDb25maWc6IFtdLFxuICAgICAgb25SZWFkeTogW10sXG4gICAgICBvblZhbHVlVXBkYXRlOiBbXSxcbiAgICAgIG9uWWVhckNoYW5nZTogW10sXG4gICAgICBvblByZUNhbGVuZGFyUG9zaXRpb246IFtdLFxuICAgICAgcGx1Z2luczogW10sXG4gICAgICBwb3NpdGlvbjogXCJhdXRvXCIsXG4gICAgICBwb3NpdGlvbkVsZW1lbnQ6IHVuZGVmaW5lZCxcbiAgICAgIHByZXZBcnJvdzogXCI8c3ZnIHZlcnNpb249JzEuMScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycgdmlld0JveD0nMCAwIDE3IDE3Jz48Zz48L2c+PHBhdGggZD0nTTUuMjA3IDguNDcxbDcuMTQ2IDcuMTQ3LTAuNzA3IDAuNzA3LTcuODUzLTcuODU0IDcuODU0LTcuODUzIDAuNzA3IDAuNzA3LTcuMTQ3IDcuMTQ2eicgLz48L3N2Zz5cIixcbiAgICAgIHNob3J0aGFuZEN1cnJlbnRNb250aDogZmFsc2UsXG4gICAgICBzaG93TW9udGhzOiAxLFxuICAgICAgc3RhdGljOiBmYWxzZSxcbiAgICAgIHRpbWVfMjRocjogZmFsc2UsXG4gICAgICB3ZWVrTnVtYmVyczogZmFsc2UsXG4gICAgICB3cmFwOiBmYWxzZVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiB0b2dnbGVDbGFzcyhlbGVtLCBjbGFzc05hbWUsIGJvb2wpIHtcbiAgICAgIGlmIChib29sID09PSB0cnVlKSByZXR1cm4gZWxlbS5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlYXRlRWxlbWVudCh0YWcsIGNsYXNzTmFtZSwgY29udGVudCkge1xuICAgICAgdmFyIGUgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lIHx8IFwiXCI7XG4gICAgICBjb250ZW50ID0gY29udGVudCB8fCBcIlwiO1xuICAgICAgZS5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gICAgICBpZiAoY29udGVudCAhPT0gdW5kZWZpbmVkKSBlLnRleHRDb250ZW50ID0gY29udGVudDtcbiAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjbGVhck5vZGUobm9kZSkge1xuICAgICAgd2hpbGUgKG5vZGUuZmlyc3RDaGlsZCkge1xuICAgICAgICBub2RlLnJlbW92ZUNoaWxkKG5vZGUuZmlyc3RDaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZpbmRQYXJlbnQobm9kZSwgY29uZGl0aW9uKSB7XG4gICAgICBpZiAoY29uZGl0aW9uKG5vZGUpKSByZXR1cm4gbm9kZTtlbHNlIGlmIChub2RlLnBhcmVudE5vZGUpIHJldHVybiBmaW5kUGFyZW50KG5vZGUucGFyZW50Tm9kZSwgY29uZGl0aW9uKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZU51bWJlcklucHV0KGlucHV0Q2xhc3NOYW1lLCBvcHRzKSB7XG4gICAgICB2YXIgd3JhcHBlciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJudW1JbnB1dFdyYXBwZXJcIiksXG4gICAgICAgICAgbnVtSW5wdXQgPSBjcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwgXCJudW1JbnB1dCBcIiArIGlucHV0Q2xhc3NOYW1lKSxcbiAgICAgICAgICBhcnJvd1VwID0gY3JlYXRlRWxlbWVudChcInNwYW5cIiwgXCJhcnJvd1VwXCIpLFxuICAgICAgICAgIGFycm93RG93biA9IGNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIFwiYXJyb3dEb3duXCIpO1xuICAgICAgbnVtSW5wdXQudHlwZSA9IFwidGV4dFwiO1xuICAgICAgbnVtSW5wdXQucGF0dGVybiA9IFwiXFxcXGQqXCI7XG4gICAgICBpZiAob3B0cyAhPT0gdW5kZWZpbmVkKSBmb3IgKHZhciBrZXkgaW4gb3B0cykge1xuICAgICAgICBudW1JbnB1dC5zZXRBdHRyaWJ1dGUoa2V5LCBvcHRzW2tleV0pO1xuICAgICAgfVxuICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChudW1JbnB1dCk7XG4gICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGFycm93VXApO1xuICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChhcnJvd0Rvd24pO1xuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBPYmplY3QuYXNzaWduICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24gPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiQ2Fubm90IGNvbnZlcnQgdW5kZWZpbmVkIG9yIG51bGwgdG8gb2JqZWN0XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3Aoc291cmNlKSB7XG4gICAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3MubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3NbX2ldO1xuXG4gICAgICAgICAgX2xvb3Aoc291cmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBERUJPVU5DRURfQ0hBTkdFX01TID0gMzAwO1xuXG4gICAgZnVuY3Rpb24gRmxhdHBpY2tySW5zdGFuY2UoZWxlbWVudCwgaW5zdGFuY2VDb25maWcpIHtcbiAgICAgIHZhciBzZWxmID0ge1xuICAgICAgICBjb25maWc6IE9iamVjdC5hc3NpZ24oe30sIGZsYXRwaWNrci5kZWZhdWx0Q29uZmlnKSxcbiAgICAgICAgbDEwbjogZW5nbGlzaFxuICAgICAgfTtcbiAgICAgIHNlbGYucGFyc2VEYXRlID0gY3JlYXRlRGF0ZVBhcnNlcih7XG4gICAgICAgIGNvbmZpZzogc2VsZi5jb25maWcsXG4gICAgICAgIGwxMG46IHNlbGYubDEwblxuICAgICAgfSk7XG4gICAgICBzZWxmLl9oYW5kbGVycyA9IFtdO1xuICAgICAgc2VsZi5fYmluZCA9IGJpbmQ7XG4gICAgICBzZWxmLl9zZXRIb3Vyc0Zyb21EYXRlID0gc2V0SG91cnNGcm9tRGF0ZTtcbiAgICAgIHNlbGYuY2hhbmdlTW9udGggPSBjaGFuZ2VNb250aDtcbiAgICAgIHNlbGYuY2hhbmdlWWVhciA9IGNoYW5nZVllYXI7XG4gICAgICBzZWxmLmNsZWFyID0gY2xlYXI7XG4gICAgICBzZWxmLmNsb3NlID0gY2xvc2U7XG4gICAgICBzZWxmLl9jcmVhdGVFbGVtZW50ID0gY3JlYXRlRWxlbWVudDtcbiAgICAgIHNlbGYuZGVzdHJveSA9IGRlc3Ryb3k7XG4gICAgICBzZWxmLmlzRW5hYmxlZCA9IGlzRW5hYmxlZDtcbiAgICAgIHNlbGYuanVtcFRvRGF0ZSA9IGp1bXBUb0RhdGU7XG4gICAgICBzZWxmLm9wZW4gPSBvcGVuO1xuICAgICAgc2VsZi5yZWRyYXcgPSByZWRyYXc7XG4gICAgICBzZWxmLnNldCA9IHNldDtcbiAgICAgIHNlbGYuc2V0RGF0ZSA9IHNldERhdGU7XG4gICAgICBzZWxmLnRvZ2dsZSA9IHRvZ2dsZTtcblxuICAgICAgZnVuY3Rpb24gc2V0dXBIZWxwZXJGdW5jdGlvbnMoKSB7XG4gICAgICAgIHNlbGYudXRpbHMgPSB7XG4gICAgICAgICAgZ2V0RGF5c0luTW9udGg6IGZ1bmN0aW9uIGdldERheXNJbk1vbnRoKG1vbnRoLCB5cikge1xuICAgICAgICAgICAgaWYgKG1vbnRoID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgbW9udGggPSBzZWxmLmN1cnJlbnRNb250aDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHlyID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgeXIgPSBzZWxmLmN1cnJlbnRZZWFyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobW9udGggPT09IDEgJiYgKHlyICUgNCA9PT0gMCAmJiB5ciAlIDEwMCAhPT0gMCB8fCB5ciAlIDQwMCA9PT0gMCkpIHJldHVybiAyOTtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLmwxMG4uZGF5c0luTW9udGhbbW9udGhdO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgc2VsZi5lbGVtZW50ID0gc2VsZi5pbnB1dCA9IGVsZW1lbnQ7XG4gICAgICAgIHNlbGYuaXNPcGVuID0gZmFsc2U7XG4gICAgICAgIHBhcnNlQ29uZmlnKCk7XG4gICAgICAgIHNldHVwTG9jYWxlKCk7XG4gICAgICAgIHNldHVwSW5wdXRzKCk7XG4gICAgICAgIHNldHVwRGF0ZXMoKTtcbiAgICAgICAgc2V0dXBIZWxwZXJGdW5jdGlvbnMoKTtcbiAgICAgICAgaWYgKCFzZWxmLmlzTW9iaWxlKSBidWlsZCgpO1xuICAgICAgICBiaW5kRXZlbnRzKCk7XG5cbiAgICAgICAgaWYgKHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggfHwgc2VsZi5jb25maWcubm9DYWxlbmRhcikge1xuICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5lbmFibGVUaW1lKSB7XG4gICAgICAgICAgICBzZXRIb3Vyc0Zyb21EYXRlKHNlbGYuY29uZmlnLm5vQ2FsZW5kYXIgPyBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiB8fCBzZWxmLmNvbmZpZy5taW5EYXRlIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB1cGRhdGVWYWx1ZShmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLnNob3dUaW1lSW5wdXQgPSBzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID4gMCB8fCBzZWxmLmNvbmZpZy5ub0NhbGVuZGFyO1xuXG4gICAgICAgIGlmIChzZWxmLmRheXNDb250YWluZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG4gICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICAgIHZhciBkYXlzV2lkdGggPSAoc2VsZi5kYXlzQ29udGFpbmVyLm9mZnNldFdpZHRoICsgMSkgKiBzZWxmLmNvbmZpZy5zaG93TW9udGhzO1xuICAgICAgICAgIHNlbGYuZGF5c0NvbnRhaW5lci5zdHlsZS53aWR0aCA9IGRheXNXaWR0aCArIFwicHhcIjtcbiAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnN0eWxlLndpZHRoID0gZGF5c1dpZHRoICsgXCJweFwiO1xuXG4gICAgICAgICAgaWYgKHNlbGYud2Vla1dyYXBwZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS53aWR0aCA9IGRheXNXaWR0aCArIHNlbGYud2Vla1dyYXBwZXIub2Zmc2V0V2lkdGggKyBcInB4XCI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XG4gICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpc1NhZmFyaSA9IC9eKCg/IWNocm9tZXxhbmRyb2lkKS4pKnNhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbiAgICAgICAgaWYgKCFzZWxmLmlzTW9iaWxlICYmIGlzU2FmYXJpKSB7XG4gICAgICAgICAgcG9zaXRpb25DYWxlbmRhcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJpZ2dlckV2ZW50KFwib25SZWFkeVwiKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYmluZFRvSW5zdGFuY2UoZm4pIHtcbiAgICAgICAgcmV0dXJuIGZuLmJpbmQoc2VsZik7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZVRpbWUoZSkge1xuICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICAgICB0aW1lV3JhcHBlcihlKTtcblxuICAgICAgICBpZiAoZS50eXBlICE9PSBcImlucHV0XCIpIHtcbiAgICAgICAgICBzZXRIb3Vyc0Zyb21JbnB1dHMoKTtcbiAgICAgICAgICB1cGRhdGVWYWx1ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2V0SG91cnNGcm9tSW5wdXRzKCk7XG4gICAgICAgICAgICB1cGRhdGVWYWx1ZSgpO1xuICAgICAgICAgIH0sIERFQk9VTkNFRF9DSEFOR0VfTVMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGFtcG0ybWlsaXRhcnkoaG91ciwgYW1QTSkge1xuICAgICAgICByZXR1cm4gaG91ciAlIDEyICsgMTIgKiBpbnQoYW1QTSA9PT0gc2VsZi5sMTBuLmFtUE1bMV0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBtaWxpdGFyeTJhbXBtKGhvdXIpIHtcbiAgICAgICAgc3dpdGNoIChob3VyICUgMjQpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgIHJldHVybiAxMjtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gaG91ciAlIDEyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNldEhvdXJzRnJvbUlucHV0cygpIHtcbiAgICAgICAgaWYgKHNlbGYuaG91ckVsZW1lbnQgPT09IHVuZGVmaW5lZCB8fCBzZWxmLm1pbnV0ZUVsZW1lbnQgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgICAgICB2YXIgaG91cnMgPSAocGFyc2VJbnQoc2VsZi5ob3VyRWxlbWVudC52YWx1ZS5zbGljZSgtMiksIDEwKSB8fCAwKSAlIDI0LFxuICAgICAgICAgICAgbWludXRlcyA9IChwYXJzZUludChzZWxmLm1pbnV0ZUVsZW1lbnQudmFsdWUsIDEwKSB8fCAwKSAlIDYwLFxuICAgICAgICAgICAgc2Vjb25kcyA9IHNlbGYuc2Vjb25kRWxlbWVudCAhPT0gdW5kZWZpbmVkID8gKHBhcnNlSW50KHNlbGYuc2Vjb25kRWxlbWVudC52YWx1ZSwgMTApIHx8IDApICUgNjAgOiAwO1xuICAgICAgICBpZiAoc2VsZi5hbVBNICE9PSB1bmRlZmluZWQpIGhvdXJzID0gYW1wbTJtaWxpdGFyeShob3Vycywgc2VsZi5hbVBNLnRleHRDb250ZW50KTtcbiAgICAgICAgdmFyIGxpbWl0TWluSG91cnMgPSBzZWxmLmNvbmZpZy5taW5UaW1lICE9PSB1bmRlZmluZWQgfHwgc2VsZi5jb25maWcubWluRGF0ZSAmJiBzZWxmLm1pbkRhdGVIYXNUaW1lICYmIHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqICYmIGNvbXBhcmVEYXRlcyhzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiwgc2VsZi5jb25maWcubWluRGF0ZSwgdHJ1ZSkgPT09IDA7XG4gICAgICAgIHZhciBsaW1pdE1heEhvdXJzID0gc2VsZi5jb25maWcubWF4VGltZSAhPT0gdW5kZWZpbmVkIHx8IHNlbGYuY29uZmlnLm1heERhdGUgJiYgc2VsZi5tYXhEYXRlSGFzVGltZSAmJiBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiAmJiBjb21wYXJlRGF0ZXMoc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmosIHNlbGYuY29uZmlnLm1heERhdGUsIHRydWUpID09PSAwO1xuXG4gICAgICAgIGlmIChsaW1pdE1heEhvdXJzKSB7XG4gICAgICAgICAgdmFyIG1heFRpbWUgPSBzZWxmLmNvbmZpZy5tYXhUaW1lICE9PSB1bmRlZmluZWQgPyBzZWxmLmNvbmZpZy5tYXhUaW1lIDogc2VsZi5jb25maWcubWF4RGF0ZTtcbiAgICAgICAgICBob3VycyA9IE1hdGgubWluKGhvdXJzLCBtYXhUaW1lLmdldEhvdXJzKCkpO1xuICAgICAgICAgIGlmIChob3VycyA9PT0gbWF4VGltZS5nZXRIb3VycygpKSBtaW51dGVzID0gTWF0aC5taW4obWludXRlcywgbWF4VGltZS5nZXRNaW51dGVzKCkpO1xuICAgICAgICAgIGlmIChtaW51dGVzID09PSBtYXhUaW1lLmdldE1pbnV0ZXMoKSkgc2Vjb25kcyA9IE1hdGgubWluKHNlY29uZHMsIG1heFRpbWUuZ2V0U2Vjb25kcygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaW1pdE1pbkhvdXJzKSB7XG4gICAgICAgICAgdmFyIG1pblRpbWUgPSBzZWxmLmNvbmZpZy5taW5UaW1lICE9PSB1bmRlZmluZWQgPyBzZWxmLmNvbmZpZy5taW5UaW1lIDogc2VsZi5jb25maWcubWluRGF0ZTtcbiAgICAgICAgICBob3VycyA9IE1hdGgubWF4KGhvdXJzLCBtaW5UaW1lLmdldEhvdXJzKCkpO1xuICAgICAgICAgIGlmIChob3VycyA9PT0gbWluVGltZS5nZXRIb3VycygpKSBtaW51dGVzID0gTWF0aC5tYXgobWludXRlcywgbWluVGltZS5nZXRNaW51dGVzKCkpO1xuICAgICAgICAgIGlmIChtaW51dGVzID09PSBtaW5UaW1lLmdldE1pbnV0ZXMoKSkgc2Vjb25kcyA9IE1hdGgubWF4KHNlY29uZHMsIG1pblRpbWUuZ2V0U2Vjb25kcygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldEhvdXJzKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2V0SG91cnNGcm9tRGF0ZShkYXRlT2JqKSB7XG4gICAgICAgIHZhciBkYXRlID0gZGF0ZU9iaiB8fCBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iajtcbiAgICAgICAgaWYgKGRhdGUpIHNldEhvdXJzKGRhdGUuZ2V0SG91cnMoKSwgZGF0ZS5nZXRNaW51dGVzKCksIGRhdGUuZ2V0U2Vjb25kcygpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2V0SG91cnMoaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMpIHtcbiAgICAgICAgaWYgKHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iai5zZXRIb3Vycyhob3VycyAlIDI0LCBtaW51dGVzLCBzZWNvbmRzIHx8IDAsIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzZWxmLmhvdXJFbGVtZW50IHx8ICFzZWxmLm1pbnV0ZUVsZW1lbnQgfHwgc2VsZi5pc01vYmlsZSkgcmV0dXJuO1xuICAgICAgICBzZWxmLmhvdXJFbGVtZW50LnZhbHVlID0gcGFkKCFzZWxmLmNvbmZpZy50aW1lXzI0aHIgPyAoMTIgKyBob3VycykgJSAxMiArIDEyICogaW50KGhvdXJzICUgMTIgPT09IDApIDogaG91cnMpO1xuICAgICAgICBzZWxmLm1pbnV0ZUVsZW1lbnQudmFsdWUgPSBwYWQobWludXRlcyk7XG4gICAgICAgIGlmIChzZWxmLmFtUE0gIT09IHVuZGVmaW5lZCkgc2VsZi5hbVBNLnRleHRDb250ZW50ID0gc2VsZi5sMTBuLmFtUE1baW50KGhvdXJzID49IDEyKV07XG4gICAgICAgIGlmIChzZWxmLnNlY29uZEVsZW1lbnQgIT09IHVuZGVmaW5lZCkgc2VsZi5zZWNvbmRFbGVtZW50LnZhbHVlID0gcGFkKHNlY29uZHMpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBvblllYXJJbnB1dChldmVudCkge1xuICAgICAgICB2YXIgeWVhciA9IHBhcnNlSW50KGV2ZW50LnRhcmdldC52YWx1ZSkgKyAoZXZlbnQuZGVsdGEgfHwgMCk7XG5cbiAgICAgICAgaWYgKHllYXIudG9TdHJpbmcoKS5sZW5ndGggPT09IDQgfHwgZXZlbnQua2V5ID09PSBcIkVudGVyXCIpIHtcbiAgICAgICAgICBldmVudC50YXJnZXQuYmx1cigpO1xuICAgICAgICAgIGlmICghL1teXFxkXS8udGVzdCh5ZWFyLnRvU3RyaW5nKCkpKSBjaGFuZ2VZZWFyKHllYXIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGJpbmQoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgQXJyYXkpIHJldHVybiBldmVudC5mb3JFYWNoKGZ1bmN0aW9uIChldikge1xuICAgICAgICAgIHJldHVybiBiaW5kKGVsZW1lbnQsIGV2LCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgQXJyYXkpIHJldHVybiBlbGVtZW50LmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgcmV0dXJuIGJpbmQoZWwsIGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG5cbiAgICAgICAgc2VsZi5faGFuZGxlcnMucHVzaCh7XG4gICAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgaGFuZGxlcjogaGFuZGxlclxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gb25DbGljayhoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgICAgZXZ0LndoaWNoID09PSAxICYmIGhhbmRsZXIoZXZ0KTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdHJpZ2dlckNoYW5nZSgpIHtcbiAgICAgICAgdHJpZ2dlckV2ZW50KFwib25DaGFuZ2VcIik7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGJpbmRFdmVudHMoKSB7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy53cmFwKSB7XG4gICAgICAgICAgW1wib3BlblwiLCBcImNsb3NlXCIsIFwidG9nZ2xlXCIsIFwiY2xlYXJcIl0uZm9yRWFjaChmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKHNlbGYuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtXCIgKyBldnQgKyBcIl1cIiksIGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgICByZXR1cm4gYmluZChlbCwgXCJjbGlja1wiLCBzZWxmW2V2dF0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VsZi5pc01vYmlsZSkge1xuICAgICAgICAgIHNldHVwTW9iaWxlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRlYm91bmNlZFJlc2l6ZSA9IGRlYm91bmNlKG9uUmVzaXplLCA1MCk7XG4gICAgICAgIHNlbGYuX2RlYm91bmNlZENoYW5nZSA9IGRlYm91bmNlKHRyaWdnZXJDaGFuZ2UsIERFQk9VTkNFRF9DSEFOR0VfTVMpO1xuICAgICAgICBpZiAoc2VsZi5kYXlzQ29udGFpbmVyICYmICEvaVBob25lfGlQYWR8aVBvZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIGJpbmQoc2VsZi5kYXlzQ29udGFpbmVyLCBcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInJhbmdlXCIpIG9uTW91c2VPdmVyKGUudGFyZ2V0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJpbmQod2luZG93LmRvY3VtZW50LmJvZHksIFwia2V5ZG93blwiLCBvbktleURvd24pO1xuICAgICAgICBpZiAoIXNlbGYuY29uZmlnLnN0YXRpYykgYmluZChzZWxmLl9pbnB1dCwgXCJrZXlkb3duXCIsIG9uS2V5RG93bik7XG4gICAgICAgIGlmICghc2VsZi5jb25maWcuaW5saW5lICYmICFzZWxmLmNvbmZpZy5zdGF0aWMpIGJpbmQod2luZG93LCBcInJlc2l6ZVwiLCBkZWJvdW5jZWRSZXNpemUpO1xuICAgICAgICBpZiAod2luZG93Lm9udG91Y2hzdGFydCAhPT0gdW5kZWZpbmVkKSBiaW5kKHdpbmRvdy5kb2N1bWVudCwgXCJ0b3VjaHN0YXJ0XCIsIGRvY3VtZW50Q2xpY2spO1xuICAgICAgICBiaW5kKHdpbmRvdy5kb2N1bWVudCwgXCJtb3VzZWRvd25cIiwgb25DbGljayhkb2N1bWVudENsaWNrKSk7XG4gICAgICAgIGJpbmQod2luZG93LmRvY3VtZW50LCBcImZvY3VzXCIsIGRvY3VtZW50Q2xpY2ssIHtcbiAgICAgICAgICBjYXB0dXJlOiB0cnVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5jbGlja09wZW5zID09PSB0cnVlKSB7XG4gICAgICAgICAgYmluZChzZWxmLl9pbnB1dCwgXCJmb2N1c1wiLCBzZWxmLm9wZW4pO1xuICAgICAgICAgIGJpbmQoc2VsZi5faW5wdXQsIFwibW91c2Vkb3duXCIsIG9uQ2xpY2soc2VsZi5vcGVuKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VsZi5kYXlzQ29udGFpbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBiaW5kKHNlbGYubW9udGhOYXYsIFwibW91c2Vkb3duXCIsIG9uQ2xpY2sob25Nb250aE5hdkNsaWNrKSk7XG4gICAgICAgICAgYmluZChzZWxmLm1vbnRoTmF2LCBbXCJrZXl1cFwiLCBcImluY3JlbWVudFwiXSwgb25ZZWFySW5wdXQpO1xuICAgICAgICAgIGJpbmQoc2VsZi5kYXlzQ29udGFpbmVyLCBcIm1vdXNlZG93blwiLCBvbkNsaWNrKHNlbGVjdERhdGUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWxmLnRpbWVDb250YWluZXIgIT09IHVuZGVmaW5lZCAmJiBzZWxmLm1pbnV0ZUVsZW1lbnQgIT09IHVuZGVmaW5lZCAmJiBzZWxmLmhvdXJFbGVtZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgc2VsVGV4dCA9IGZ1bmN0aW9uIHNlbFRleHQoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGUudGFyZ2V0LnNlbGVjdCgpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBiaW5kKHNlbGYudGltZUNvbnRhaW5lciwgW1wiaW5wdXRcIiwgXCJpbmNyZW1lbnRcIl0sIHVwZGF0ZVRpbWUpO1xuICAgICAgICAgIGJpbmQoc2VsZi50aW1lQ29udGFpbmVyLCBcIm1vdXNlZG93blwiLCBvbkNsaWNrKHRpbWVJbmNyZW1lbnQpKTtcbiAgICAgICAgICBiaW5kKHNlbGYudGltZUNvbnRhaW5lciwgW1wiaW5wdXRcIiwgXCJpbmNyZW1lbnRcIl0sIHNlbGYuX2RlYm91bmNlZENoYW5nZSwge1xuICAgICAgICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJpbmQoW3NlbGYuaG91ckVsZW1lbnQsIHNlbGYubWludXRlRWxlbWVudF0sIFtcImZvY3VzXCIsIFwiY2xpY2tcIl0sIHNlbFRleHQpO1xuICAgICAgICAgIGlmIChzZWxmLnNlY29uZEVsZW1lbnQgIT09IHVuZGVmaW5lZCkgYmluZChzZWxmLnNlY29uZEVsZW1lbnQsIFwiZm9jdXNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuc2Vjb25kRWxlbWVudCAmJiBzZWxmLnNlY29uZEVsZW1lbnQuc2VsZWN0KCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAoc2VsZi5hbVBNICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGJpbmQoc2VsZi5hbVBNLCBcIm1vdXNlZG93blwiLCBvbkNsaWNrKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgIHVwZGF0ZVRpbWUoZSk7XG4gICAgICAgICAgICAgIHRyaWdnZXJDaGFuZ2UoKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24ganVtcFRvRGF0ZShqdW1wRGF0ZSkge1xuICAgICAgICB2YXIganVtcFRvID0ganVtcERhdGUgIT09IHVuZGVmaW5lZCA/IHNlbGYucGFyc2VEYXRlKGp1bXBEYXRlKSA6IHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqIHx8IChzZWxmLmNvbmZpZy5taW5EYXRlICYmIHNlbGYuY29uZmlnLm1pbkRhdGUgPiBzZWxmLm5vdyA/IHNlbGYuY29uZmlnLm1pbkRhdGUgOiBzZWxmLmNvbmZpZy5tYXhEYXRlICYmIHNlbGYuY29uZmlnLm1heERhdGUgPCBzZWxmLm5vdyA/IHNlbGYuY29uZmlnLm1heERhdGUgOiBzZWxmLm5vdyk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoanVtcFRvICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNlbGYuY3VycmVudFllYXIgPSBqdW1wVG8uZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICAgIHNlbGYuY3VycmVudE1vbnRoID0ganVtcFRvLmdldE1vbnRoKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgZS5tZXNzYWdlID0gXCJJbnZhbGlkIGRhdGUgc3VwcGxpZWQ6IFwiICsganVtcFRvO1xuICAgICAgICAgIHNlbGYuY29uZmlnLmVycm9ySGFuZGxlcihlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYucmVkcmF3KCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRpbWVJbmNyZW1lbnQoZSkge1xuICAgICAgICBpZiAofmUudGFyZ2V0LmNsYXNzTmFtZS5pbmRleE9mKFwiYXJyb3dcIikpIGluY3JlbWVudE51bUlucHV0KGUsIGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImFycm93VXBcIikgPyAxIDogLTEpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpbmNyZW1lbnROdW1JbnB1dChlLCBkZWx0YSwgaW5wdXRFbGVtKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSBlICYmIGUudGFyZ2V0O1xuICAgICAgICB2YXIgaW5wdXQgPSBpbnB1dEVsZW0gfHwgdGFyZ2V0ICYmIHRhcmdldC5wYXJlbnROb2RlICYmIHRhcmdldC5wYXJlbnROb2RlLmZpcnN0Q2hpbGQ7XG4gICAgICAgIHZhciBldmVudCA9IGNyZWF0ZUV2ZW50KFwiaW5jcmVtZW50XCIpO1xuICAgICAgICBldmVudC5kZWx0YSA9IGRlbHRhO1xuICAgICAgICBpbnB1dCAmJiBpbnB1dC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYnVpbGQoKSB7XG4gICAgICAgIHZhciBmcmFnbWVudCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLWNhbGVuZGFyXCIpO1xuICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnRhYkluZGV4ID0gLTE7XG5cbiAgICAgICAgaWYgKCFzZWxmLmNvbmZpZy5ub0NhbGVuZGFyKSB7XG4gICAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoYnVpbGRNb250aE5hdigpKTtcbiAgICAgICAgICBzZWxmLmlubmVyQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImZsYXRwaWNrci1pbm5lckNvbnRhaW5lclwiKTtcblxuICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy53ZWVrTnVtYmVycykge1xuICAgICAgICAgICAgdmFyIF9idWlsZFdlZWtzID0gYnVpbGRXZWVrcygpLFxuICAgICAgICAgICAgICAgIHdlZWtXcmFwcGVyID0gX2J1aWxkV2Vla3Mud2Vla1dyYXBwZXIsXG4gICAgICAgICAgICAgICAgd2Vla051bWJlcnMgPSBfYnVpbGRXZWVrcy53ZWVrTnVtYmVycztcblxuICAgICAgICAgICAgc2VsZi5pbm5lckNvbnRhaW5lci5hcHBlbmRDaGlsZCh3ZWVrV3JhcHBlcik7XG4gICAgICAgICAgICBzZWxmLndlZWtOdW1iZXJzID0gd2Vla051bWJlcnM7XG4gICAgICAgICAgICBzZWxmLndlZWtXcmFwcGVyID0gd2Vla1dyYXBwZXI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi5yQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImZsYXRwaWNrci1yQ29udGFpbmVyXCIpO1xuICAgICAgICAgIHNlbGYuckNvbnRhaW5lci5hcHBlbmRDaGlsZChidWlsZFdlZWtkYXlzKCkpO1xuXG4gICAgICAgICAgaWYgKCFzZWxmLmRheXNDb250YWluZXIpIHtcbiAgICAgICAgICAgIHNlbGYuZGF5c0NvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJmbGF0cGlja3ItZGF5c1wiKTtcbiAgICAgICAgICAgIHNlbGYuZGF5c0NvbnRhaW5lci50YWJJbmRleCA9IC0xO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJ1aWxkRGF5cygpO1xuICAgICAgICAgIHNlbGYuckNvbnRhaW5lci5hcHBlbmRDaGlsZChzZWxmLmRheXNDb250YWluZXIpO1xuICAgICAgICAgIHNlbGYuaW5uZXJDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VsZi5yQ29udGFpbmVyKTtcbiAgICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChzZWxmLmlubmVyQ29udGFpbmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5lbmFibGVUaW1lKSB7XG4gICAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoYnVpbGRUaW1lKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdG9nZ2xlQ2xhc3Moc2VsZi5jYWxlbmRhckNvbnRhaW5lciwgXCJyYW5nZU1vZGVcIiwgc2VsZi5jb25maWcubW9kZSA9PT0gXCJyYW5nZVwiKTtcbiAgICAgICAgdG9nZ2xlQ2xhc3Moc2VsZi5jYWxlbmRhckNvbnRhaW5lciwgXCJhbmltYXRlXCIsIHNlbGYuY29uZmlnLmFuaW1hdGUgPT09IHRydWUpO1xuICAgICAgICB0b2dnbGVDbGFzcyhzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCBcIm11bHRpTW9udGhcIiwgc2VsZi5jb25maWcuc2hvd01vbnRocyA+IDEpO1xuICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLmFwcGVuZENoaWxkKGZyYWdtZW50KTtcbiAgICAgICAgdmFyIGN1c3RvbUFwcGVuZCA9IHNlbGYuY29uZmlnLmFwcGVuZFRvICE9PSB1bmRlZmluZWQgJiYgc2VsZi5jb25maWcuYXBwZW5kVG8ubm9kZVR5cGUgIT09IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoc2VsZi5jb25maWcuaW5saW5lIHx8IHNlbGYuY29uZmlnLnN0YXRpYykge1xuICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuY2xhc3NMaXN0LmFkZChzZWxmLmNvbmZpZy5pbmxpbmUgPyBcImlubGluZVwiIDogXCJzdGF0aWNcIik7XG5cbiAgICAgICAgICBpZiAoc2VsZi5jb25maWcuaW5saW5lKSB7XG4gICAgICAgICAgICBpZiAoIWN1c3RvbUFwcGVuZCAmJiBzZWxmLmVsZW1lbnQucGFyZW50Tm9kZSkgc2VsZi5lbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNlbGYuY2FsZW5kYXJDb250YWluZXIsIHNlbGYuX2lucHV0Lm5leHRTaWJsaW5nKTtlbHNlIGlmIChzZWxmLmNvbmZpZy5hcHBlbmRUbyAhPT0gdW5kZWZpbmVkKSBzZWxmLmNvbmZpZy5hcHBlbmRUby5hcHBlbmRDaGlsZChzZWxmLmNhbGVuZGFyQ29udGFpbmVyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VsZi5jb25maWcuc3RhdGljKSB7XG4gICAgICAgICAgICB2YXIgd3JhcHBlciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJmbGF0cGlja3Itd3JhcHBlclwiKTtcbiAgICAgICAgICAgIGlmIChzZWxmLmVsZW1lbnQucGFyZW50Tm9kZSkgc2VsZi5lbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHdyYXBwZXIsIHNlbGYuZWxlbWVudCk7XG4gICAgICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHNlbGYuZWxlbWVudCk7XG4gICAgICAgICAgICBpZiAoc2VsZi5hbHRJbnB1dCkgd3JhcHBlci5hcHBlbmRDaGlsZChzZWxmLmFsdElucHV0KTtcbiAgICAgICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoc2VsZi5jYWxlbmRhckNvbnRhaW5lcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzZWxmLmNvbmZpZy5zdGF0aWMgJiYgIXNlbGYuY29uZmlnLmlubGluZSkgKHNlbGYuY29uZmlnLmFwcGVuZFRvICE9PSB1bmRlZmluZWQgPyBzZWxmLmNvbmZpZy5hcHBlbmRUbyA6IHdpbmRvdy5kb2N1bWVudC5ib2R5KS5hcHBlbmRDaGlsZChzZWxmLmNhbGVuZGFyQ29udGFpbmVyKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY3JlYXRlRGF5KGNsYXNzTmFtZSwgZGF0ZSwgZGF5TnVtYmVyLCBpKSB7XG4gICAgICAgIHZhciBkYXRlSXNFbmFibGVkID0gaXNFbmFibGVkKGRhdGUsIHRydWUpLFxuICAgICAgICAgICAgZGF5RWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIFwiZmxhdHBpY2tyLWRheSBcIiArIGNsYXNzTmFtZSwgZGF0ZS5nZXREYXRlKCkudG9TdHJpbmcoKSk7XG4gICAgICAgIGRheUVsZW1lbnQuZGF0ZU9iaiA9IGRhdGU7XG4gICAgICAgIGRheUVsZW1lbnQuJGkgPSBpO1xuICAgICAgICBkYXlFbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgc2VsZi5mb3JtYXREYXRlKGRhdGUsIHNlbGYuY29uZmlnLmFyaWFEYXRlRm9ybWF0KSk7XG5cbiAgICAgICAgaWYgKGNvbXBhcmVEYXRlcyhkYXRlLCBzZWxmLm5vdykgPT09IDApIHtcbiAgICAgICAgICBzZWxmLnRvZGF5RGF0ZUVsZW0gPSBkYXlFbGVtZW50O1xuICAgICAgICAgIGRheUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRvZGF5XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRhdGVJc0VuYWJsZWQpIHtcbiAgICAgICAgICBkYXlFbGVtZW50LnRhYkluZGV4ID0gLTE7XG5cbiAgICAgICAgICBpZiAoaXNEYXRlU2VsZWN0ZWQoZGF0ZSkpIHtcbiAgICAgICAgICAgIGRheUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInNlbGVjdGVkXCIpO1xuICAgICAgICAgICAgc2VsZi5zZWxlY3RlZERhdGVFbGVtID0gZGF5RWxlbWVudDtcblxuICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1vZGUgPT09IFwicmFuZ2VcIikge1xuICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhkYXlFbGVtZW50LCBcInN0YXJ0UmFuZ2VcIiwgc2VsZi5zZWxlY3RlZERhdGVzWzBdICYmIGNvbXBhcmVEYXRlcyhkYXRlLCBzZWxmLnNlbGVjdGVkRGF0ZXNbMF0sIHRydWUpID09PSAwKTtcbiAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3MoZGF5RWxlbWVudCwgXCJlbmRSYW5nZVwiLCBzZWxmLnNlbGVjdGVkRGF0ZXNbMV0gJiYgY29tcGFyZURhdGVzKGRhdGUsIHNlbGYuc2VsZWN0ZWREYXRlc1sxXSwgdHJ1ZSkgPT09IDApO1xuICAgICAgICAgICAgICBpZiAoY2xhc3NOYW1lID09PSBcIm5leHRNb250aERheVwiKSBkYXlFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJpblJhbmdlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXlFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInJhbmdlXCIpIHtcbiAgICAgICAgICBpZiAoaXNEYXRlSW5SYW5nZShkYXRlKSAmJiAhaXNEYXRlU2VsZWN0ZWQoZGF0ZSkpIGRheUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImluUmFuZ2VcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VsZi53ZWVrTnVtYmVycyAmJiBzZWxmLmNvbmZpZy5zaG93TW9udGhzID09PSAxICYmIGNsYXNzTmFtZSAhPT0gXCJwcmV2TW9udGhEYXlcIiAmJiBkYXlOdW1iZXIgJSA3ID09PSAxKSB7XG4gICAgICAgICAgc2VsZi53ZWVrTnVtYmVycy5pbnNlcnRBZGphY2VudEhUTUwoXCJiZWZvcmVlbmRcIiwgXCI8c3BhbiBjbGFzcz0nZmxhdHBpY2tyLWRheSc+XCIgKyBzZWxmLmNvbmZpZy5nZXRXZWVrKGRhdGUpICsgXCI8L3NwYW4+XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJpZ2dlckV2ZW50KFwib25EYXlDcmVhdGVcIiwgZGF5RWxlbWVudCk7XG4gICAgICAgIHJldHVybiBkYXlFbGVtZW50O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBmb2N1c09uRGF5KGN1cnJlbnRJbmQsIG9mZnNldCkge1xuICAgICAgICB2YXIgY3VycmVudEluZGV4ID0gY3VycmVudEluZCAhPT0gdW5kZWZpbmVkID8gY3VycmVudEluZCA6IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuJGk7XG4gICAgICAgIHZhciBuZXdJbmRleCA9IChjdXJyZW50SW5kZXggfHwgMCkgKyBvZmZzZXQgfHwgMCxcbiAgICAgICAgICAgIHRhcmdldE5vZGUgPSBBcnJheS5wcm90b3R5cGUuZmluZC5jYWxsKHNlbGYuZGF5cy5jaGlsZHJlbiwgZnVuY3Rpb24gKGMsIGkpIHtcbiAgICAgICAgICByZXR1cm4gaSA+PSBuZXdJbmRleCAmJiBjLmNsYXNzTmFtZS5pbmRleE9mKFwiTW9udGhEYXlcIikgPT09IC0xICYmIGlzRW5hYmxlZChjLmRhdGVPYmopO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGFyZ2V0Tm9kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGFyZ2V0Tm9kZS5mb2N1cygpO1xuICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInJhbmdlXCIpIG9uTW91c2VPdmVyKHRhcmdldE5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGJ1aWxkTW9udGhEYXlzKHllYXIsIG1vbnRoKSB7XG4gICAgICAgIHZhciBmaXJzdE9mTW9udGggPSAobmV3IERhdGUoeWVhciwgbW9udGgsIDEpLmdldERheSgpIC0gc2VsZi5sMTBuLmZpcnN0RGF5T2ZXZWVrICsgNykgJSA3O1xuICAgICAgICB2YXIgcHJldk1vbnRoRGF5cyA9IHNlbGYudXRpbHMuZ2V0RGF5c0luTW9udGgoKG1vbnRoIC0gMSArIDEyKSAlIDEyKTtcbiAgICAgICAgdmFyIGRheXNJbk1vbnRoID0gc2VsZi51dGlscy5nZXREYXlzSW5Nb250aChtb250aCksXG4gICAgICAgICAgICBkYXlzID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgICAgdmFyIGRheU51bWJlciA9IHByZXZNb250aERheXMgKyAxIC0gZmlyc3RPZk1vbnRoLFxuICAgICAgICAgICAgZGF5SW5kZXggPSAwO1xuXG4gICAgICAgIGZvciAoOyBkYXlOdW1iZXIgPD0gcHJldk1vbnRoRGF5czsgZGF5TnVtYmVyKyssIGRheUluZGV4KyspIHtcbiAgICAgICAgICBkYXlzLmFwcGVuZENoaWxkKGNyZWF0ZURheShcInByZXZNb250aERheVwiLCBuZXcgRGF0ZSh5ZWFyLCBtb250aCAtIDEsIGRheU51bWJlciksIGRheU51bWJlciwgZGF5SW5kZXgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoZGF5TnVtYmVyID0gMTsgZGF5TnVtYmVyIDw9IGRheXNJbk1vbnRoOyBkYXlOdW1iZXIrKywgZGF5SW5kZXgrKykge1xuICAgICAgICAgIGRheXMuYXBwZW5kQ2hpbGQoY3JlYXRlRGF5KFwiXCIsIG5ldyBEYXRlKHllYXIsIG1vbnRoLCBkYXlOdW1iZXIpLCBkYXlOdW1iZXIsIGRheUluZGV4KSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBkYXlOdW0gPSBkYXlzSW5Nb250aCArIDE7IGRheU51bSA8PSA0MiAtIGZpcnN0T2ZNb250aCAmJiAoc2VsZi5jb25maWcuc2hvd01vbnRocyA9PT0gMSB8fCBkYXlJbmRleCAlIDcgIT09IDApOyBkYXlOdW0rKywgZGF5SW5kZXgrKykge1xuICAgICAgICAgIGRheXMuYXBwZW5kQ2hpbGQoY3JlYXRlRGF5KFwibmV4dE1vbnRoRGF5XCIsIG5ldyBEYXRlKHllYXIsIG1vbnRoICsgMSwgZGF5TnVtICUgZGF5c0luTW9udGgpLCBkYXlOdW0sIGRheUluZGV4KSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGF5Q29udGFpbmVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImRheUNvbnRhaW5lclwiKTtcbiAgICAgICAgZGF5Q29udGFpbmVyLmFwcGVuZENoaWxkKGRheXMpO1xuICAgICAgICByZXR1cm4gZGF5Q29udGFpbmVyO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBidWlsZERheXMoKSB7XG4gICAgICAgIGlmIChzZWxmLmRheXNDb250YWluZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNsZWFyTm9kZShzZWxmLmRheXNDb250YWluZXIpO1xuICAgICAgICBpZiAoc2VsZi53ZWVrTnVtYmVycykgY2xlYXJOb2RlKHNlbGYud2Vla051bWJlcnMpO1xuICAgICAgICB2YXIgZnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuY29uZmlnLnNob3dNb250aHM7IGkrKykge1xuICAgICAgICAgIHZhciBkID0gbmV3IERhdGUoc2VsZi5jdXJyZW50WWVhciwgc2VsZi5jdXJyZW50TW9udGgsIDEpO1xuICAgICAgICAgIGQuc2V0TW9udGgoc2VsZi5jdXJyZW50TW9udGggKyBpKTtcbiAgICAgICAgICBmcmFnLmFwcGVuZENoaWxkKGJ1aWxkTW9udGhEYXlzKGQuZ2V0RnVsbFllYXIoKSwgZC5nZXRNb250aCgpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLmRheXNDb250YWluZXIuYXBwZW5kQ2hpbGQoZnJhZyk7XG4gICAgICAgIHNlbGYuZGF5cyA9IHNlbGYuZGF5c0NvbnRhaW5lci5maXJzdENoaWxkO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBidWlsZE1vbnRoKCkge1xuICAgICAgICB2YXIgY29udGFpbmVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImZsYXRwaWNrci1tb250aFwiKTtcbiAgICAgICAgdmFyIG1vbnRoTmF2RnJhZ21lbnQgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICB2YXIgbW9udGhFbGVtZW50ID0gY3JlYXRlRWxlbWVudChcInNwYW5cIiwgXCJjdXItbW9udGhcIik7XG4gICAgICAgIG1vbnRoRWxlbWVudC50aXRsZSA9IHNlbGYubDEwbi5zY3JvbGxUaXRsZTtcbiAgICAgICAgdmFyIHllYXJJbnB1dCA9IGNyZWF0ZU51bWJlcklucHV0KFwiY3VyLXllYXJcIiwge1xuICAgICAgICAgIHRhYmluZGV4OiBcIi0xXCJcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciB5ZWFyRWxlbWVudCA9IHllYXJJbnB1dC5jaGlsZE5vZGVzWzBdO1xuICAgICAgICB5ZWFyRWxlbWVudC50aXRsZSA9IHNlbGYubDEwbi5zY3JvbGxUaXRsZTtcbiAgICAgICAgeWVhckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBzZWxmLmwxMG4ueWVhckFyaWFMYWJlbCk7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5taW5EYXRlKSB5ZWFyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLW1pblwiLCBzZWxmLmNvbmZpZy5taW5EYXRlLmdldEZ1bGxZZWFyKCkudG9TdHJpbmcoKSk7XG5cbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1heERhdGUpIHtcbiAgICAgICAgICB5ZWFyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLW1heFwiLCBzZWxmLmNvbmZpZy5tYXhEYXRlLmdldEZ1bGxZZWFyKCkudG9TdHJpbmcoKSk7XG4gICAgICAgICAgeWVhckVsZW1lbnQuZGlzYWJsZWQgPSAhIXNlbGYuY29uZmlnLm1pbkRhdGUgJiYgc2VsZi5jb25maWcubWluRGF0ZS5nZXRGdWxsWWVhcigpID09PSBzZWxmLmNvbmZpZy5tYXhEYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY3VycmVudE1vbnRoID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImZsYXRwaWNrci1jdXJyZW50LW1vbnRoXCIpO1xuICAgICAgICBjdXJyZW50TW9udGguYXBwZW5kQ2hpbGQobW9udGhFbGVtZW50KTtcbiAgICAgICAgY3VycmVudE1vbnRoLmFwcGVuZENoaWxkKHllYXJJbnB1dCk7XG4gICAgICAgIG1vbnRoTmF2RnJhZ21lbnQuYXBwZW5kQ2hpbGQoY3VycmVudE1vbnRoKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKG1vbnRoTmF2RnJhZ21lbnQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgICAgICAgIHllYXJFbGVtZW50OiB5ZWFyRWxlbWVudCxcbiAgICAgICAgICBtb250aEVsZW1lbnQ6IG1vbnRoRWxlbWVudFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBidWlsZE1vbnRoTmF2KCkge1xuICAgICAgICBzZWxmLm1vbnRoTmF2ID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImZsYXRwaWNrci1tb250aHNcIik7XG4gICAgICAgIHNlbGYueWVhckVsZW1lbnRzID0gW107XG4gICAgICAgIHNlbGYubW9udGhFbGVtZW50cyA9IFtdO1xuICAgICAgICBzZWxmLnByZXZNb250aE5hdiA9IGNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIFwiZmxhdHBpY2tyLXByZXYtbW9udGhcIik7XG4gICAgICAgIHNlbGYucHJldk1vbnRoTmF2LmlubmVySFRNTCA9IHNlbGYuY29uZmlnLnByZXZBcnJvdztcbiAgICAgICAgc2VsZi5uZXh0TW9udGhOYXYgPSBjcmVhdGVFbGVtZW50KFwic3BhblwiLCBcImZsYXRwaWNrci1uZXh0LW1vbnRoXCIpO1xuICAgICAgICBzZWxmLm5leHRNb250aE5hdi5pbm5lckhUTUwgPSBzZWxmLmNvbmZpZy5uZXh0QXJyb3c7XG4gICAgICAgIHNlbGYubW9udGhOYXYuYXBwZW5kQ2hpbGQoc2VsZi5wcmV2TW9udGhOYXYpO1xuXG4gICAgICAgIGZvciAodmFyIG0gPSBzZWxmLmNvbmZpZy5zaG93TW9udGhzOyBtLS07KSB7XG4gICAgICAgICAgdmFyIG1vbnRoID0gYnVpbGRNb250aCgpO1xuICAgICAgICAgIHNlbGYueWVhckVsZW1lbnRzLnB1c2gobW9udGgueWVhckVsZW1lbnQpO1xuICAgICAgICAgIHNlbGYubW9udGhFbGVtZW50cy5wdXNoKG1vbnRoLm1vbnRoRWxlbWVudCk7XG4gICAgICAgICAgc2VsZi5tb250aE5hdi5hcHBlbmRDaGlsZChtb250aC5jb250YWluZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5tb250aE5hdi5hcHBlbmRDaGlsZChzZWxmLm5leHRNb250aE5hdik7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLCBcIl9oaWRlUHJldk1vbnRoQXJyb3dcIiwge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuX19oaWRlUHJldk1vbnRoQXJyb3c7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldChib29sKSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5fX2hpZGVQcmV2TW9udGhBcnJvdyAhPT0gYm9vbCkge1xuICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhzZWxmLnByZXZNb250aE5hdiwgXCJkaXNhYmxlZFwiLCBib29sKTtcbiAgICAgICAgICAgICAgc2VsZi5fX2hpZGVQcmV2TW9udGhBcnJvdyA9IGJvb2w7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNlbGYsIFwiX2hpZGVOZXh0TW9udGhBcnJvd1wiLCB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi5fX2hpZGVOZXh0TW9udGhBcnJvdztcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KGJvb2wpIHtcbiAgICAgICAgICAgIGlmIChzZWxmLl9faGlkZU5leHRNb250aEFycm93ICE9PSBib29sKSB7XG4gICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHNlbGYubmV4dE1vbnRoTmF2LCBcImRpc2FibGVkXCIsIGJvb2wpO1xuICAgICAgICAgICAgICBzZWxmLl9faGlkZU5leHRNb250aEFycm93ID0gYm9vbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBzZWxmLmN1cnJlbnRZZWFyRWxlbWVudCA9IHNlbGYueWVhckVsZW1lbnRzWzBdO1xuICAgICAgICB1cGRhdGVOYXZpZ2F0aW9uQ3VycmVudE1vbnRoKCk7XG4gICAgICAgIHJldHVybiBzZWxmLm1vbnRoTmF2O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBidWlsZFRpbWUoKSB7XG4gICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuY2xhc3NMaXN0LmFkZChcImhhc1RpbWVcIik7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5ub0NhbGVuZGFyKSBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJub0NhbGVuZGFyXCIpO1xuICAgICAgICBzZWxmLnRpbWVDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLXRpbWVcIik7XG4gICAgICAgIHNlbGYudGltZUNvbnRhaW5lci50YWJJbmRleCA9IC0xO1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gY3JlYXRlRWxlbWVudChcInNwYW5cIiwgXCJmbGF0cGlja3ItdGltZS1zZXBhcmF0b3JcIiwgXCI6XCIpO1xuICAgICAgICB2YXIgaG91cklucHV0ID0gY3JlYXRlTnVtYmVySW5wdXQoXCJmbGF0cGlja3ItaG91clwiKTtcbiAgICAgICAgc2VsZi5ob3VyRWxlbWVudCA9IGhvdXJJbnB1dC5jaGlsZE5vZGVzWzBdO1xuICAgICAgICB2YXIgbWludXRlSW5wdXQgPSBjcmVhdGVOdW1iZXJJbnB1dChcImZsYXRwaWNrci1taW51dGVcIik7XG4gICAgICAgIHNlbGYubWludXRlRWxlbWVudCA9IG1pbnV0ZUlucHV0LmNoaWxkTm9kZXNbMF07XG4gICAgICAgIHNlbGYuaG91ckVsZW1lbnQudGFiSW5kZXggPSBzZWxmLm1pbnV0ZUVsZW1lbnQudGFiSW5kZXggPSAtMTtcbiAgICAgICAgc2VsZi5ob3VyRWxlbWVudC52YWx1ZSA9IHBhZChzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiA/IHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqLmdldEhvdXJzKCkgOiBzZWxmLmNvbmZpZy50aW1lXzI0aHIgPyBzZWxmLmNvbmZpZy5kZWZhdWx0SG91ciA6IG1pbGl0YXJ5MmFtcG0oc2VsZi5jb25maWcuZGVmYXVsdEhvdXIpKTtcbiAgICAgICAgc2VsZi5taW51dGVFbGVtZW50LnZhbHVlID0gcGFkKHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqID8gc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmouZ2V0TWludXRlcygpIDogc2VsZi5jb25maWcuZGVmYXVsdE1pbnV0ZSk7XG4gICAgICAgIHNlbGYuaG91ckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS1zdGVwXCIsIHNlbGYuY29uZmlnLmhvdXJJbmNyZW1lbnQudG9TdHJpbmcoKSk7XG4gICAgICAgIHNlbGYubWludXRlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN0ZXBcIiwgc2VsZi5jb25maWcubWludXRlSW5jcmVtZW50LnRvU3RyaW5nKCkpO1xuICAgICAgICBzZWxmLmhvdXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtbWluXCIsIHNlbGYuY29uZmlnLnRpbWVfMjRociA/IFwiMFwiIDogXCIxXCIpO1xuICAgICAgICBzZWxmLmhvdXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtbWF4XCIsIHNlbGYuY29uZmlnLnRpbWVfMjRociA/IFwiMjNcIiA6IFwiMTJcIik7XG4gICAgICAgIHNlbGYubWludXRlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLW1pblwiLCBcIjBcIik7XG4gICAgICAgIHNlbGYubWludXRlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLW1heFwiLCBcIjU5XCIpO1xuICAgICAgICBzZWxmLnRpbWVDb250YWluZXIuYXBwZW5kQ2hpbGQoaG91cklucHV0KTtcbiAgICAgICAgc2VsZi50aW1lQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlcGFyYXRvcik7XG4gICAgICAgIHNlbGYudGltZUNvbnRhaW5lci5hcHBlbmRDaGlsZChtaW51dGVJbnB1dCk7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy50aW1lXzI0aHIpIHNlbGYudGltZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwidGltZTI0aHJcIik7XG5cbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLmVuYWJsZVNlY29uZHMpIHtcbiAgICAgICAgICBzZWxmLnRpbWVDb250YWluZXIuY2xhc3NMaXN0LmFkZChcImhhc1NlY29uZHNcIik7XG4gICAgICAgICAgdmFyIHNlY29uZElucHV0ID0gY3JlYXRlTnVtYmVySW5wdXQoXCJmbGF0cGlja3Itc2Vjb25kXCIpO1xuICAgICAgICAgIHNlbGYuc2Vjb25kRWxlbWVudCA9IHNlY29uZElucHV0LmNoaWxkTm9kZXNbMF07XG4gICAgICAgICAgc2VsZi5zZWNvbmRFbGVtZW50LnZhbHVlID0gcGFkKHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqID8gc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmouZ2V0U2Vjb25kcygpIDogc2VsZi5jb25maWcuZGVmYXVsdFNlY29uZHMpO1xuICAgICAgICAgIHNlbGYuc2Vjb25kRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN0ZXBcIiwgc2VsZi5taW51dGVFbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtc3RlcFwiKSk7XG4gICAgICAgICAgc2VsZi5zZWNvbmRFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtbWluXCIsIHNlbGYubWludXRlRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1pblwiKSk7XG4gICAgICAgICAgc2VsZi5zZWNvbmRFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtbWF4XCIsIHNlbGYubWludXRlRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1heFwiKSk7XG4gICAgICAgICAgc2VsZi50aW1lQ29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIFwiZmxhdHBpY2tyLXRpbWUtc2VwYXJhdG9yXCIsIFwiOlwiKSk7XG4gICAgICAgICAgc2VsZi50aW1lQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlY29uZElucHV0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghc2VsZi5jb25maWcudGltZV8yNGhyKSB7XG4gICAgICAgICAgc2VsZi5hbVBNID0gY3JlYXRlRWxlbWVudChcInNwYW5cIiwgXCJmbGF0cGlja3ItYW0tcG1cIiwgc2VsZi5sMTBuLmFtUE1baW50KChzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiA/IHNlbGYuaG91ckVsZW1lbnQudmFsdWUgOiBzZWxmLmNvbmZpZy5kZWZhdWx0SG91cikgPiAxMSldKTtcbiAgICAgICAgICBzZWxmLmFtUE0udGl0bGUgPSBzZWxmLmwxMG4udG9nZ2xlVGl0bGU7XG4gICAgICAgICAgc2VsZi5hbVBNLnRhYkluZGV4ID0gLTE7XG4gICAgICAgICAgc2VsZi50aW1lQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlbGYuYW1QTSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VsZi50aW1lQ29udGFpbmVyO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBidWlsZFdlZWtkYXlzKCkge1xuICAgICAgICBpZiAoIXNlbGYud2Vla2RheUNvbnRhaW5lcikgc2VsZi53ZWVrZGF5Q29udGFpbmVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImZsYXRwaWNrci13ZWVrZGF5c1wiKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gc2VsZi5jb25maWcuc2hvd01vbnRoczsgaS0tOykge1xuICAgICAgICAgIHZhciBjb250YWluZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLXdlZWtkYXljb250YWluZXJcIik7XG4gICAgICAgICAgc2VsZi53ZWVrZGF5Q29udGFpbmVyLmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICB1cGRhdGVXZWVrZGF5cygpO1xuICAgICAgICByZXR1cm4gc2VsZi53ZWVrZGF5Q29udGFpbmVyO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB1cGRhdGVXZWVrZGF5cygpIHtcbiAgICAgICAgdmFyIGZpcnN0RGF5T2ZXZWVrID0gc2VsZi5sMTBuLmZpcnN0RGF5T2ZXZWVrO1xuICAgICAgICB2YXIgd2Vla2RheXMgPSBzZWxmLmwxMG4ud2Vla2RheXMuc2hvcnRoYW5kLmNvbmNhdCgpO1xuXG4gICAgICAgIGlmIChmaXJzdERheU9mV2VlayA+IDAgJiYgZmlyc3REYXlPZldlZWsgPCB3ZWVrZGF5cy5sZW5ndGgpIHtcbiAgICAgICAgICB3ZWVrZGF5cyA9IHdlZWtkYXlzLnNwbGljZShmaXJzdERheU9mV2Vlaywgd2Vla2RheXMubGVuZ3RoKS5jb25jYXQod2Vla2RheXMuc3BsaWNlKDAsIGZpcnN0RGF5T2ZXZWVrKSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gc2VsZi5jb25maWcuc2hvd01vbnRoczsgaS0tOykge1xuICAgICAgICAgIHNlbGYud2Vla2RheUNvbnRhaW5lci5jaGlsZHJlbltpXS5pbm5lckhUTUwgPSBcIlxcbiAgICAgIDxzcGFuIGNsYXNzPWZsYXRwaWNrci13ZWVrZGF5PlxcbiAgICAgICAgXCIgKyB3ZWVrZGF5cy5qb2luKFwiPC9zcGFuPjxzcGFuIGNsYXNzPWZsYXRwaWNrci13ZWVrZGF5PlwiKSArIFwiXFxuICAgICAgPC9zcGFuPlxcbiAgICAgIFwiO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGJ1aWxkV2Vla3MoKSB7XG4gICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuY2xhc3NMaXN0LmFkZChcImhhc1dlZWtzXCIpO1xuICAgICAgICB2YXIgd2Vla1dyYXBwZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLXdlZWt3cmFwcGVyXCIpO1xuICAgICAgICB3ZWVrV3JhcHBlci5hcHBlbmRDaGlsZChjcmVhdGVFbGVtZW50KFwic3BhblwiLCBcImZsYXRwaWNrci13ZWVrZGF5XCIsIHNlbGYubDEwbi53ZWVrQWJicmV2aWF0aW9uKSk7XG4gICAgICAgIHZhciB3ZWVrTnVtYmVycyA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJmbGF0cGlja3Itd2Vla3NcIik7XG4gICAgICAgIHdlZWtXcmFwcGVyLmFwcGVuZENoaWxkKHdlZWtOdW1iZXJzKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB3ZWVrV3JhcHBlcjogd2Vla1dyYXBwZXIsXG4gICAgICAgICAgd2Vla051bWJlcnM6IHdlZWtOdW1iZXJzXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNoYW5nZU1vbnRoKHZhbHVlLCBpc19vZmZzZXQsIGZyb21fa2V5Ym9hcmQpIHtcbiAgICAgICAgaWYgKGlzX29mZnNldCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgaXNfb2Zmc2V0ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmcm9tX2tleWJvYXJkID09PSB2b2lkIDApIHtcbiAgICAgICAgICBmcm9tX2tleWJvYXJkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGVsdGEgPSBpc19vZmZzZXQgPyB2YWx1ZSA6IHZhbHVlIC0gc2VsZi5jdXJyZW50TW9udGg7XG4gICAgICAgIGlmIChkZWx0YSA8IDAgJiYgc2VsZi5faGlkZVByZXZNb250aEFycm93ID09PSB0cnVlIHx8IGRlbHRhID4gMCAmJiBzZWxmLl9oaWRlTmV4dE1vbnRoQXJyb3cgPT09IHRydWUpIHJldHVybjtcbiAgICAgICAgc2VsZi5jdXJyZW50TW9udGggKz0gZGVsdGE7XG5cbiAgICAgICAgaWYgKHNlbGYuY3VycmVudE1vbnRoIDwgMCB8fCBzZWxmLmN1cnJlbnRNb250aCA+IDExKSB7XG4gICAgICAgICAgc2VsZi5jdXJyZW50WWVhciArPSBzZWxmLmN1cnJlbnRNb250aCA+IDExID8gMSA6IC0xO1xuICAgICAgICAgIHNlbGYuY3VycmVudE1vbnRoID0gKHNlbGYuY3VycmVudE1vbnRoICsgMTIpICUgMTI7XG4gICAgICAgICAgdHJpZ2dlckV2ZW50KFwib25ZZWFyQ2hhbmdlXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnVpbGREYXlzKCk7XG4gICAgICAgIHRyaWdnZXJFdmVudChcIm9uTW9udGhDaGFuZ2VcIik7XG4gICAgICAgIHVwZGF0ZU5hdmlnYXRpb25DdXJyZW50TW9udGgoKTtcblxuICAgICAgICBpZiAoZnJvbV9rZXlib2FyZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGZvY3VzT25EYXkodW5kZWZpbmVkLCAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjbGVhcih0cmlnZ2VyQ2hhbmdlRXZlbnQpIHtcbiAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2VFdmVudCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgdHJpZ2dlckNoYW5nZUV2ZW50ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuaW5wdXQudmFsdWUgPSBcIlwiO1xuICAgICAgICBpZiAoc2VsZi5hbHRJbnB1dCAhPT0gdW5kZWZpbmVkKSBzZWxmLmFsdElucHV0LnZhbHVlID0gXCJcIjtcbiAgICAgICAgaWYgKHNlbGYubW9iaWxlSW5wdXQgIT09IHVuZGVmaW5lZCkgc2VsZi5tb2JpbGVJbnB1dC52YWx1ZSA9IFwiXCI7XG4gICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlcyA9IFtdO1xuICAgICAgICBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiA9IHVuZGVmaW5lZDtcbiAgICAgICAgc2VsZi5zaG93VGltZUlucHV0ID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLmVuYWJsZVRpbWUgPT09IHRydWUpIHtcbiAgICAgICAgICBpZiAoc2VsZi5jb25maWcubWluRGF0ZSAhPT0gdW5kZWZpbmVkKSBzZXRIb3Vyc0Zyb21EYXRlKHNlbGYuY29uZmlnLm1pbkRhdGUpO2Vsc2Ugc2V0SG91cnMoc2VsZi5jb25maWcuZGVmYXVsdEhvdXIsIHNlbGYuY29uZmlnLmRlZmF1bHRNaW51dGUsIHNlbGYuY29uZmlnLmRlZmF1bHRTZWNvbmRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYucmVkcmF3KCk7XG4gICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlRXZlbnQpIHRyaWdnZXJFdmVudChcIm9uQ2hhbmdlXCIpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICAgICAgc2VsZi5pc09wZW4gPSBmYWxzZTtcblxuICAgICAgICBpZiAoIXNlbGYuaXNNb2JpbGUpIHtcbiAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoXCJvcGVuXCIpO1xuXG4gICAgICAgICAgc2VsZi5faW5wdXQuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyaWdnZXJFdmVudChcIm9uQ2xvc2VcIik7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZyAhPT0gdW5kZWZpbmVkKSB0cmlnZ2VyRXZlbnQoXCJvbkRlc3Ryb3lcIik7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IHNlbGYuX2hhbmRsZXJzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgIHZhciBoID0gc2VsZi5faGFuZGxlcnNbaV07XG4gICAgICAgICAgaC5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoaC5ldmVudCwgaC5oYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuX2hhbmRsZXJzID0gW107XG5cbiAgICAgICAgaWYgKHNlbGYubW9iaWxlSW5wdXQpIHtcbiAgICAgICAgICBpZiAoc2VsZi5tb2JpbGVJbnB1dC5wYXJlbnROb2RlKSBzZWxmLm1vYmlsZUlucHV0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2VsZi5tb2JpbGVJbnB1dCk7XG4gICAgICAgICAgc2VsZi5tb2JpbGVJbnB1dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfSBlbHNlIGlmIChzZWxmLmNhbGVuZGFyQ29udGFpbmVyICYmIHNlbGYuY2FsZW5kYXJDb250YWluZXIucGFyZW50Tm9kZSkgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNlbGYuY2FsZW5kYXJDb250YWluZXIpO1xuXG4gICAgICAgIGlmIChzZWxmLmFsdElucHV0KSB7XG4gICAgICAgICAgc2VsZi5pbnB1dC50eXBlID0gXCJ0ZXh0XCI7XG4gICAgICAgICAgaWYgKHNlbGYuYWx0SW5wdXQucGFyZW50Tm9kZSkgc2VsZi5hbHRJbnB1dC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNlbGYuYWx0SW5wdXQpO1xuICAgICAgICAgIGRlbGV0ZSBzZWxmLmFsdElucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGYuaW5wdXQpIHtcbiAgICAgICAgICBzZWxmLmlucHV0LnR5cGUgPSBzZWxmLmlucHV0Ll90eXBlO1xuICAgICAgICAgIHNlbGYuaW5wdXQuY2xhc3NMaXN0LnJlbW92ZShcImZsYXRwaWNrci1pbnB1dFwiKTtcbiAgICAgICAgICBzZWxmLmlucHV0LnJlbW92ZUF0dHJpYnV0ZShcInJlYWRvbmx5XCIpO1xuICAgICAgICAgIHNlbGYuaW5wdXQudmFsdWUgPSBcIlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgW1wiX3Nob3dUaW1lSW5wdXRcIiwgXCJsYXRlc3RTZWxlY3RlZERhdGVPYmpcIiwgXCJfaGlkZU5leHRNb250aEFycm93XCIsIFwiX2hpZGVQcmV2TW9udGhBcnJvd1wiLCBcIl9faGlkZU5leHRNb250aEFycm93XCIsIFwiX19oaWRlUHJldk1vbnRoQXJyb3dcIiwgXCJpc01vYmlsZVwiLCBcImlzT3BlblwiLCBcInNlbGVjdGVkRGF0ZUVsZW1cIiwgXCJtaW5EYXRlSGFzVGltZVwiLCBcIm1heERhdGVIYXNUaW1lXCIsIFwiZGF5c1wiLCBcImRheXNDb250YWluZXJcIiwgXCJfaW5wdXRcIiwgXCJfcG9zaXRpb25FbGVtZW50XCIsIFwiaW5uZXJDb250YWluZXJcIiwgXCJyQ29udGFpbmVyXCIsIFwibW9udGhOYXZcIiwgXCJ0b2RheURhdGVFbGVtXCIsIFwiY2FsZW5kYXJDb250YWluZXJcIiwgXCJ3ZWVrZGF5Q29udGFpbmVyXCIsIFwicHJldk1vbnRoTmF2XCIsIFwibmV4dE1vbnRoTmF2XCIsIFwiY3VycmVudE1vbnRoRWxlbWVudFwiLCBcImN1cnJlbnRZZWFyRWxlbWVudFwiLCBcIm5hdmlnYXRpb25DdXJyZW50TW9udGhcIiwgXCJzZWxlY3RlZERhdGVFbGVtXCIsIFwiY29uZmlnXCJdLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGVsZXRlIHNlbGZba107XG4gICAgICAgICAgfSBjYXRjaCAoXykge31cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGlzQ2FsZW5kYXJFbGVtKGVsZW0pIHtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLmFwcGVuZFRvICYmIHNlbGYuY29uZmlnLmFwcGVuZFRvLmNvbnRhaW5zKGVsZW0pKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHNlbGYuY2FsZW5kYXJDb250YWluZXIuY29udGFpbnMoZWxlbSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGRvY3VtZW50Q2xpY2soZSkge1xuICAgICAgICBpZiAoc2VsZi5pc09wZW4gJiYgIXNlbGYuY29uZmlnLmlubGluZSkge1xuICAgICAgICAgIHZhciBpc0NhbGVuZGFyRWxlbWVudCA9IGlzQ2FsZW5kYXJFbGVtKGUudGFyZ2V0KTtcbiAgICAgICAgICB2YXIgaXNJbnB1dCA9IGUudGFyZ2V0ID09PSBzZWxmLmlucHV0IHx8IGUudGFyZ2V0ID09PSBzZWxmLmFsdElucHV0IHx8IHNlbGYuZWxlbWVudC5jb250YWlucyhlLnRhcmdldCkgfHwgZS5wYXRoICYmIGUucGF0aC5pbmRleE9mICYmICh+ZS5wYXRoLmluZGV4T2Yoc2VsZi5pbnB1dCkgfHwgfmUucGF0aC5pbmRleE9mKHNlbGYuYWx0SW5wdXQpKTtcbiAgICAgICAgICB2YXIgbG9zdEZvY3VzID0gZS50eXBlID09PSBcImJsdXJcIiA/IGlzSW5wdXQgJiYgZS5yZWxhdGVkVGFyZ2V0ICYmICFpc0NhbGVuZGFyRWxlbShlLnJlbGF0ZWRUYXJnZXQpIDogIWlzSW5wdXQgJiYgIWlzQ2FsZW5kYXJFbGVtZW50O1xuICAgICAgICAgIHZhciBpc0lnbm9yZWQgPSAhc2VsZi5jb25maWcuaWdub3JlZEZvY3VzRWxlbWVudHMuc29tZShmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW0uY29udGFpbnMoZS50YXJnZXQpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKGxvc3RGb2N1cyAmJiBpc0lnbm9yZWQpIHtcbiAgICAgICAgICAgIHNlbGYuY2xvc2UoKTtcblxuICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1vZGUgPT09IFwicmFuZ2VcIiAmJiBzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgIHNlbGYuY2xlYXIoZmFsc2UpO1xuICAgICAgICAgICAgICBzZWxmLnJlZHJhdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjaGFuZ2VZZWFyKG5ld1llYXIpIHtcbiAgICAgICAgaWYgKCFuZXdZZWFyIHx8IHNlbGYuY29uZmlnLm1pbkRhdGUgJiYgbmV3WWVhciA8IHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0RnVsbFllYXIoKSB8fCBzZWxmLmNvbmZpZy5tYXhEYXRlICYmIG5ld1llYXIgPiBzZWxmLmNvbmZpZy5tYXhEYXRlLmdldEZ1bGxZZWFyKCkpIHJldHVybjtcbiAgICAgICAgdmFyIG5ld1llYXJOdW0gPSBuZXdZZWFyLFxuICAgICAgICAgICAgaXNOZXdZZWFyID0gc2VsZi5jdXJyZW50WWVhciAhPT0gbmV3WWVhck51bTtcbiAgICAgICAgc2VsZi5jdXJyZW50WWVhciA9IG5ld1llYXJOdW0gfHwgc2VsZi5jdXJyZW50WWVhcjtcblxuICAgICAgICBpZiAoc2VsZi5jb25maWcubWF4RGF0ZSAmJiBzZWxmLmN1cnJlbnRZZWFyID09PSBzZWxmLmNvbmZpZy5tYXhEYXRlLmdldEZ1bGxZZWFyKCkpIHtcbiAgICAgICAgICBzZWxmLmN1cnJlbnRNb250aCA9IE1hdGgubWluKHNlbGYuY29uZmlnLm1heERhdGUuZ2V0TW9udGgoKSwgc2VsZi5jdXJyZW50TW9udGgpO1xuICAgICAgICB9IGVsc2UgaWYgKHNlbGYuY29uZmlnLm1pbkRhdGUgJiYgc2VsZi5jdXJyZW50WWVhciA9PT0gc2VsZi5jb25maWcubWluRGF0ZS5nZXRGdWxsWWVhcigpKSB7XG4gICAgICAgICAgc2VsZi5jdXJyZW50TW9udGggPSBNYXRoLm1heChzZWxmLmNvbmZpZy5taW5EYXRlLmdldE1vbnRoKCksIHNlbGYuY3VycmVudE1vbnRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc05ld1llYXIpIHtcbiAgICAgICAgICBzZWxmLnJlZHJhdygpO1xuICAgICAgICAgIHRyaWdnZXJFdmVudChcIm9uWWVhckNoYW5nZVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpc0VuYWJsZWQoZGF0ZSwgdGltZWxlc3MpIHtcbiAgICAgICAgaWYgKHRpbWVsZXNzID09PSB2b2lkIDApIHtcbiAgICAgICAgICB0aW1lbGVzcyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGF0ZVRvQ2hlY2sgPSBzZWxmLnBhcnNlRGF0ZShkYXRlLCB1bmRlZmluZWQsIHRpbWVsZXNzKTtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1pbkRhdGUgJiYgZGF0ZVRvQ2hlY2sgJiYgY29tcGFyZURhdGVzKGRhdGVUb0NoZWNrLCBzZWxmLmNvbmZpZy5taW5EYXRlLCB0aW1lbGVzcyAhPT0gdW5kZWZpbmVkID8gdGltZWxlc3MgOiAhc2VsZi5taW5EYXRlSGFzVGltZSkgPCAwIHx8IHNlbGYuY29uZmlnLm1heERhdGUgJiYgZGF0ZVRvQ2hlY2sgJiYgY29tcGFyZURhdGVzKGRhdGVUb0NoZWNrLCBzZWxmLmNvbmZpZy5tYXhEYXRlLCB0aW1lbGVzcyAhPT0gdW5kZWZpbmVkID8gdGltZWxlc3MgOiAhc2VsZi5tYXhEYXRlSGFzVGltZSkgPiAwKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5lbmFibGUubGVuZ3RoID09PSAwICYmIHNlbGYuY29uZmlnLmRpc2FibGUubGVuZ3RoID09PSAwKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKGRhdGVUb0NoZWNrID09PSB1bmRlZmluZWQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGJvb2wgPSBzZWxmLmNvbmZpZy5lbmFibGUubGVuZ3RoID4gMCxcbiAgICAgICAgICAgIGFycmF5ID0gYm9vbCA/IHNlbGYuY29uZmlnLmVuYWJsZSA6IHNlbGYuY29uZmlnLmRpc2FibGU7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGQ7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGQgPSBhcnJheVtpXTtcbiAgICAgICAgICBpZiAodHlwZW9mIGQgPT09IFwiZnVuY3Rpb25cIiAmJiBkKGRhdGVUb0NoZWNrKSkgcmV0dXJuIGJvb2w7ZWxzZSBpZiAoZCBpbnN0YW5jZW9mIERhdGUgJiYgZGF0ZVRvQ2hlY2sgIT09IHVuZGVmaW5lZCAmJiBkLmdldFRpbWUoKSA9PT0gZGF0ZVRvQ2hlY2suZ2V0VGltZSgpKSByZXR1cm4gYm9vbDtlbHNlIGlmICh0eXBlb2YgZCA9PT0gXCJzdHJpbmdcIiAmJiBkYXRlVG9DaGVjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgcGFyc2VkID0gc2VsZi5wYXJzZURhdGUoZCwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZWQgJiYgcGFyc2VkLmdldFRpbWUoKSA9PT0gZGF0ZVRvQ2hlY2suZ2V0VGltZSgpID8gYm9vbCA6ICFib29sO1xuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGQgPT09IFwib2JqZWN0XCIgJiYgZGF0ZVRvQ2hlY2sgIT09IHVuZGVmaW5lZCAmJiBkLmZyb20gJiYgZC50byAmJiBkYXRlVG9DaGVjay5nZXRUaW1lKCkgPj0gZC5mcm9tLmdldFRpbWUoKSAmJiBkYXRlVG9DaGVjay5nZXRUaW1lKCkgPD0gZC50by5nZXRUaW1lKCkpIHJldHVybiBib29sO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICFib29sO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBvbktleURvd24oZSkge1xuICAgICAgICB2YXIgaXNJbnB1dCA9IGUudGFyZ2V0ID09PSBzZWxmLl9pbnB1dDtcbiAgICAgICAgdmFyIGNhbGVuZGFyRWxlbSA9IGlzQ2FsZW5kYXJFbGVtKGUudGFyZ2V0KTtcbiAgICAgICAgdmFyIGFsbG93SW5wdXQgPSBzZWxmLmNvbmZpZy5hbGxvd0lucHV0O1xuICAgICAgICB2YXIgYWxsb3dLZXlkb3duID0gc2VsZi5pc09wZW4gJiYgKCFhbGxvd0lucHV0IHx8ICFpc0lucHV0KTtcbiAgICAgICAgdmFyIGFsbG93SW5saW5lS2V5ZG93biA9IHNlbGYuY29uZmlnLmlubGluZSAmJiBpc0lucHV0ICYmICFhbGxvd0lucHV0O1xuXG4gICAgICAgIGlmIChlLmtleUNvZGUgPT09IDEzICYmIGlzSW5wdXQpIHtcbiAgICAgICAgICBpZiAoYWxsb3dJbnB1dCkge1xuICAgICAgICAgICAgc2VsZi5zZXREYXRlKHNlbGYuX2lucHV0LnZhbHVlLCB0cnVlLCBlLnRhcmdldCA9PT0gc2VsZi5hbHRJbnB1dCA/IHNlbGYuY29uZmlnLmFsdEZvcm1hdCA6IHNlbGYuY29uZmlnLmRhdGVGb3JtYXQpO1xuICAgICAgICAgICAgcmV0dXJuIGUudGFyZ2V0LmJsdXIoKTtcbiAgICAgICAgICB9IGVsc2Ugc2VsZi5vcGVuKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2FsZW5kYXJFbGVtIHx8IGFsbG93S2V5ZG93biB8fCBhbGxvd0lubGluZUtleWRvd24pIHtcbiAgICAgICAgICB2YXIgaXNUaW1lT2JqID0gISFzZWxmLnRpbWVDb250YWluZXIgJiYgc2VsZi50aW1lQ29udGFpbmVyLmNvbnRhaW5zKGUudGFyZ2V0KTtcblxuICAgICAgICAgIHN3aXRjaCAoZS5rZXlDb2RlKSB7XG4gICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICBpZiAoaXNUaW1lT2JqKSB1cGRhdGVWYWx1ZSgpO2Vsc2Ugc2VsZWN0RGF0ZShlKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMjc6XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgZm9jdXNBbmRDbG9zZSgpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgY2FzZSA0NjpcbiAgICAgICAgICAgICAgaWYgKGlzSW5wdXQgJiYgIXNlbGYuY29uZmlnLmFsbG93SW5wdXQpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgc2VsZi5jbGVhcigpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzc6XG4gICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICBpZiAoIWlzVGltZU9iaikge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgIGlmIChzZWxmLmRheXNDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBfZGVsdGEgPSBpc0lucHV0ID8gMCA6IGUua2V5Q29kZSA9PT0gMzkgPyAxIDogLTE7XG5cbiAgICAgICAgICAgICAgICAgIGlmICghZS5jdHJsS2V5KSBmb2N1c09uRGF5KHVuZGVmaW5lZCwgX2RlbHRhKTtlbHNlIGNoYW5nZU1vbnRoKF9kZWx0YSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNlbGYuaG91ckVsZW1lbnQpIHNlbGYuaG91ckVsZW1lbnQuZm9jdXMoKTtcblxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAzODpcbiAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgdmFyIGRlbHRhID0gZS5rZXlDb2RlID09PSA0MCA/IDEgOiAtMTtcblxuICAgICAgICAgICAgICBpZiAoc2VsZi5kYXlzQ29udGFpbmVyICYmIGUudGFyZ2V0LiRpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5jdHJsS2V5KSB7XG4gICAgICAgICAgICAgICAgICBjaGFuZ2VZZWFyKHNlbGYuY3VycmVudFllYXIgLSBkZWx0YSk7XG4gICAgICAgICAgICAgICAgICBmb2N1c09uRGF5KGUudGFyZ2V0LiRpLCAwKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFpc1RpbWVPYmopIGZvY3VzT25EYXkoZS50YXJnZXQuJGksIGRlbHRhICogNyk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZi5jb25maWcuZW5hYmxlVGltZSkge1xuICAgICAgICAgICAgICAgIGlmICghaXNUaW1lT2JqICYmIHNlbGYuaG91ckVsZW1lbnQpIHNlbGYuaG91ckVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB1cGRhdGVUaW1lKGUpO1xuXG4gICAgICAgICAgICAgICAgc2VsZi5fZGVib3VuY2VkQ2hhbmdlKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IHNlbGYuaG91ckVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgc2VsZi5taW51dGVFbGVtZW50LnNlbGVjdCgpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUudGFyZ2V0ID09PSBzZWxmLm1pbnV0ZUVsZW1lbnQgJiYgKHNlbGYuc2Vjb25kRWxlbWVudCB8fCBzZWxmLmFtUE0pKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLnNlY29uZEVsZW1lbnQgIT09IHVuZGVmaW5lZCkgc2VsZi5zZWNvbmRFbGVtZW50LmZvY3VzKCk7ZWxzZSBpZiAoc2VsZi5hbVBNICE9PSB1bmRlZmluZWQpIHNlbGYuYW1QTS5mb2N1cygpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUudGFyZ2V0ID09PSBzZWxmLnNlY29uZEVsZW1lbnQgJiYgc2VsZi5hbVBNKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHNlbGYuYW1QTS5mb2N1cygpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHN3aXRjaCAoZS5rZXkpIHtcbiAgICAgICAgICAgIGNhc2Ugc2VsZi5sMTBuLmFtUE1bMF0uY2hhckF0KDApOlxuICAgICAgICAgICAgY2FzZSBzZWxmLmwxMG4uYW1QTVswXS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKTpcbiAgICAgICAgICAgICAgaWYgKHNlbGYuYW1QTSAhPT0gdW5kZWZpbmVkICYmIGUudGFyZ2V0ID09PSBzZWxmLmFtUE0pIHtcbiAgICAgICAgICAgICAgICBzZWxmLmFtUE0udGV4dENvbnRlbnQgPSBzZWxmLmwxMG4uYW1QTVswXTtcbiAgICAgICAgICAgICAgICBzZXRIb3Vyc0Zyb21JbnB1dHMoKTtcbiAgICAgICAgICAgICAgICB1cGRhdGVWYWx1ZSgpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2Ugc2VsZi5sMTBuLmFtUE1bMV0uY2hhckF0KDApOlxuICAgICAgICAgICAgY2FzZSBzZWxmLmwxMG4uYW1QTVsxXS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKTpcbiAgICAgICAgICAgICAgaWYgKHNlbGYuYW1QTSAhPT0gdW5kZWZpbmVkICYmIGUudGFyZ2V0ID09PSBzZWxmLmFtUE0pIHtcbiAgICAgICAgICAgICAgICBzZWxmLmFtUE0udGV4dENvbnRlbnQgPSBzZWxmLmwxMG4uYW1QTVsxXTtcbiAgICAgICAgICAgICAgICBzZXRIb3Vyc0Zyb21JbnB1dHMoKTtcbiAgICAgICAgICAgICAgICB1cGRhdGVWYWx1ZSgpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRyaWdnZXJFdmVudChcIm9uS2V5RG93blwiLCBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBvbk1vdXNlT3ZlcihlbGVtKSB7XG4gICAgICAgIGlmIChzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoICE9PSAxIHx8ICFlbGVtLmNsYXNzTGlzdC5jb250YWlucyhcImZsYXRwaWNrci1kYXlcIikgfHwgZWxlbS5jbGFzc0xpc3QuY29udGFpbnMoXCJkaXNhYmxlZFwiKSkgcmV0dXJuO1xuICAgICAgICB2YXIgaG92ZXJEYXRlID0gZWxlbS5kYXRlT2JqLmdldFRpbWUoKSxcbiAgICAgICAgICAgIGluaXRpYWxEYXRlID0gc2VsZi5wYXJzZURhdGUoc2VsZi5zZWxlY3RlZERhdGVzWzBdLCB1bmRlZmluZWQsIHRydWUpLmdldFRpbWUoKSxcbiAgICAgICAgICAgIHJhbmdlU3RhcnREYXRlID0gTWF0aC5taW4oaG92ZXJEYXRlLCBzZWxmLnNlbGVjdGVkRGF0ZXNbMF0uZ2V0VGltZSgpKSxcbiAgICAgICAgICAgIHJhbmdlRW5kRGF0ZSA9IE1hdGgubWF4KGhvdmVyRGF0ZSwgc2VsZi5zZWxlY3RlZERhdGVzWzBdLmdldFRpbWUoKSk7XG4gICAgICAgIHZhciBtb250aHMgPSBzZWxmLmRheXNDb250YWluZXIuY2hpbGRyZW4sXG4gICAgICAgICAgICBmaXJzdERheSA9IG1vbnRoc1swXS5jaGlsZHJlblswXS5kYXRlT2JqLmdldFRpbWUoKSxcbiAgICAgICAgICAgIGxhc3REYXkgPSBtb250aHNbbW9udGhzLmxlbmd0aCAtIDFdLmxhc3RDaGlsZC5kYXRlT2JqLmdldFRpbWUoKTtcbiAgICAgICAgdmFyIGNvbnRhaW5zRGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIG1pblJhbmdlID0gMCxcbiAgICAgICAgICAgIG1heFJhbmdlID0gMDtcblxuICAgICAgICBmb3IgKHZhciB0ID0gZmlyc3REYXk7IHQgPCBsYXN0RGF5OyB0ICs9IGR1cmF0aW9uLkRBWSkge1xuICAgICAgICAgIGlmICghaXNFbmFibGVkKG5ldyBEYXRlKHQpLCB0cnVlKSkge1xuICAgICAgICAgICAgY29udGFpbnNEaXNhYmxlZCA9IGNvbnRhaW5zRGlzYWJsZWQgfHwgdCA+IHJhbmdlU3RhcnREYXRlICYmIHQgPCByYW5nZUVuZERhdGU7XG4gICAgICAgICAgICBpZiAodCA8IGluaXRpYWxEYXRlICYmICghbWluUmFuZ2UgfHwgdCA+IG1pblJhbmdlKSkgbWluUmFuZ2UgPSB0O2Vsc2UgaWYgKHQgPiBpbml0aWFsRGF0ZSAmJiAoIW1heFJhbmdlIHx8IHQgPCBtYXhSYW5nZSkpIG1heFJhbmdlID0gdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBtID0gMDsgbSA8IHNlbGYuY29uZmlnLnNob3dNb250aHM7IG0rKykge1xuICAgICAgICAgIHZhciBtb250aCA9IHNlbGYuZGF5c0NvbnRhaW5lci5jaGlsZHJlblttXTtcbiAgICAgICAgICB2YXIgcHJldk1vbnRoID0gc2VsZi5kYXlzQ29udGFpbmVyLmNoaWxkcmVuW20gLSAxXTtcblxuICAgICAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGksIGwpIHtcbiAgICAgICAgICAgIHZhciBkYXlFbGVtID0gbW9udGguY2hpbGRyZW5baV0sXG4gICAgICAgICAgICAgICAgZGF0ZSA9IGRheUVsZW0uZGF0ZU9iajtcbiAgICAgICAgICAgIHZhciB0aW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgICAgICAgICAgIHZhciBvdXRPZlJhbmdlID0gbWluUmFuZ2UgPiAwICYmIHRpbWVzdGFtcCA8IG1pblJhbmdlIHx8IG1heFJhbmdlID4gMCAmJiB0aW1lc3RhbXAgPiBtYXhSYW5nZTtcblxuICAgICAgICAgICAgaWYgKG91dE9mUmFuZ2UpIHtcbiAgICAgICAgICAgICAgZGF5RWxlbS5jbGFzc0xpc3QuYWRkKFwibm90QWxsb3dlZFwiKTtcbiAgICAgICAgICAgICAgW1wiaW5SYW5nZVwiLCBcInN0YXJ0UmFuZ2VcIiwgXCJlbmRSYW5nZVwiXS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAgICAgZGF5RWxlbS5jbGFzc0xpc3QucmVtb3ZlKGMpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udGFpbnNEaXNhYmxlZCAmJiAhb3V0T2ZSYW5nZSkgcmV0dXJuIFwiY29udGludWVcIjtcblxuICAgICAgICAgICAgW1wic3RhcnRSYW5nZVwiLCBcImluUmFuZ2VcIiwgXCJlbmRSYW5nZVwiLCBcIm5vdEFsbG93ZWRcIl0uZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICBkYXlFbGVtLmNsYXNzTGlzdC5yZW1vdmUoYyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZChob3ZlckRhdGUgPCBzZWxmLnNlbGVjdGVkRGF0ZXNbMF0uZ2V0VGltZSgpID8gXCJzdGFydFJhbmdlXCIgOiBcImVuZFJhbmdlXCIpO1xuXG4gICAgICAgICAgICBpZiAobW9udGguY29udGFpbnMoZWxlbSkgfHwgIShtID4gMCAmJiBwcmV2TW9udGggJiYgcHJldk1vbnRoLmxhc3RDaGlsZC5kYXRlT2JqLmdldFRpbWUoKSA+PSB0aW1lc3RhbXApKSB7XG4gICAgICAgICAgICAgIGlmIChpbml0aWFsRGF0ZSA8IGhvdmVyRGF0ZSAmJiB0aW1lc3RhbXAgPT09IGluaXRpYWxEYXRlKSBkYXlFbGVtLmNsYXNzTGlzdC5hZGQoXCJzdGFydFJhbmdlXCIpO2Vsc2UgaWYgKGluaXRpYWxEYXRlID4gaG92ZXJEYXRlICYmIHRpbWVzdGFtcCA9PT0gaW5pdGlhbERhdGUpIGRheUVsZW0uY2xhc3NMaXN0LmFkZChcImVuZFJhbmdlXCIpO1xuICAgICAgICAgICAgICBpZiAodGltZXN0YW1wID49IG1pblJhbmdlICYmIChtYXhSYW5nZSA9PT0gMCB8fCB0aW1lc3RhbXAgPD0gbWF4UmFuZ2UpICYmIGlzQmV0d2Vlbih0aW1lc3RhbXAsIGluaXRpYWxEYXRlLCBob3ZlckRhdGUpKSBkYXlFbGVtLmNsYXNzTGlzdC5hZGQoXCJpblJhbmdlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG1vbnRoLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdmFyIF9yZXQgPSBfbG9vcChpLCBsKTtcblxuICAgICAgICAgICAgaWYgKF9yZXQgPT09IFwiY29udGludWVcIikgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG9uUmVzaXplKCkge1xuICAgICAgICBpZiAoc2VsZi5pc09wZW4gJiYgIXNlbGYuY29uZmlnLnN0YXRpYyAmJiAhc2VsZi5jb25maWcuaW5saW5lKSBwb3NpdGlvbkNhbGVuZGFyKCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG9wZW4oZSwgcG9zaXRpb25FbGVtZW50KSB7XG4gICAgICAgIGlmIChwb3NpdGlvbkVsZW1lbnQgPT09IHZvaWQgMCkge1xuICAgICAgICAgIHBvc2l0aW9uRWxlbWVudCA9IHNlbGYuX2lucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGYuaXNNb2JpbGUgPT09IHRydWUpIHtcbiAgICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZS50YXJnZXQgJiYgZS50YXJnZXQuYmx1cigpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5tb2JpbGVJbnB1dCAhPT0gdW5kZWZpbmVkICYmIHNlbGYubW9iaWxlSW5wdXQuY2xpY2soKTtcbiAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvbk9wZW5cIik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGYuX2lucHV0LmRpc2FibGVkIHx8IHNlbGYuY29uZmlnLmlubGluZSkgcmV0dXJuO1xuICAgICAgICB2YXIgd2FzT3BlbiA9IHNlbGYuaXNPcGVuO1xuICAgICAgICBzZWxmLmlzT3BlbiA9IHRydWU7XG5cbiAgICAgICAgaWYgKCF3YXNPcGVuKSB7XG4gICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwib3BlblwiKTtcblxuICAgICAgICAgIHNlbGYuX2lucHV0LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XG5cbiAgICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvbk9wZW5cIik7XG4gICAgICAgICAgcG9zaXRpb25DYWxlbmRhcihwb3NpdGlvbkVsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLmVuYWJsZVRpbWUgPT09IHRydWUgJiYgc2VsZi5jb25maWcubm9DYWxlbmRhciA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGlmIChzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBzZWxmLnNldERhdGUoc2VsZi5jb25maWcubWluRGF0ZSAhPT0gdW5kZWZpbmVkID8gbmV3IERhdGUoc2VsZi5jb25maWcubWluRGF0ZS5nZXRUaW1lKCkpIDogbmV3IERhdGUoKS5zZXRIb3VycyhzZWxmLmNvbmZpZy5kZWZhdWx0SG91ciwgc2VsZi5jb25maWcuZGVmYXVsdE1pbnV0ZSwgc2VsZi5jb25maWcuZGVmYXVsdFNlY29uZHMsIDApLCBmYWxzZSk7XG4gICAgICAgICAgICBzZXRIb3Vyc0Zyb21JbnB1dHMoKTtcbiAgICAgICAgICAgIHVwZGF0ZVZhbHVlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi5ob3VyRWxlbWVudC5zZWxlY3QoKTtcbiAgICAgICAgICB9LCA1MCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbWluTWF4RGF0ZVNldHRlcih0eXBlKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgICAgIHZhciBkYXRlT2JqID0gc2VsZi5jb25maWdbXCJfXCIgKyB0eXBlICsgXCJEYXRlXCJdID0gc2VsZi5wYXJzZURhdGUoZGF0ZSwgc2VsZi5jb25maWcuZGF0ZUZvcm1hdCk7XG4gICAgICAgICAgdmFyIGludmVyc2VEYXRlT2JqID0gc2VsZi5jb25maWdbXCJfXCIgKyAodHlwZSA9PT0gXCJtaW5cIiA/IFwibWF4XCIgOiBcIm1pblwiKSArIFwiRGF0ZVwiXTtcblxuICAgICAgICAgIGlmIChkYXRlT2JqICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNlbGZbdHlwZSA9PT0gXCJtaW5cIiA/IFwibWluRGF0ZUhhc1RpbWVcIiA6IFwibWF4RGF0ZUhhc1RpbWVcIl0gPSBkYXRlT2JqLmdldEhvdXJzKCkgPiAwIHx8IGRhdGVPYmouZ2V0TWludXRlcygpID4gMCB8fCBkYXRlT2JqLmdldFNlY29uZHMoKSA+IDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlbGYuc2VsZWN0ZWREYXRlcykge1xuICAgICAgICAgICAgc2VsZi5zZWxlY3RlZERhdGVzID0gc2VsZi5zZWxlY3RlZERhdGVzLmZpbHRlcihmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICByZXR1cm4gaXNFbmFibGVkKGQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIXNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggJiYgdHlwZSA9PT0gXCJtaW5cIikgc2V0SG91cnNGcm9tRGF0ZShkYXRlT2JqKTtcbiAgICAgICAgICAgIHVwZGF0ZVZhbHVlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlbGYuZGF5c0NvbnRhaW5lcikge1xuICAgICAgICAgICAgcmVkcmF3KCk7XG4gICAgICAgICAgICBpZiAoZGF0ZU9iaiAhPT0gdW5kZWZpbmVkKSBzZWxmLmN1cnJlbnRZZWFyRWxlbWVudFt0eXBlXSA9IGRhdGVPYmouZ2V0RnVsbFllYXIoKS50b1N0cmluZygpO2Vsc2Ugc2VsZi5jdXJyZW50WWVhckVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHR5cGUpO1xuICAgICAgICAgICAgc2VsZi5jdXJyZW50WWVhckVsZW1lbnQuZGlzYWJsZWQgPSAhIWludmVyc2VEYXRlT2JqICYmIGRhdGVPYmogIT09IHVuZGVmaW5lZCAmJiBpbnZlcnNlRGF0ZU9iai5nZXRGdWxsWWVhcigpID09PSBkYXRlT2JqLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwYXJzZUNvbmZpZygpIHtcbiAgICAgICAgdmFyIGJvb2xPcHRzID0gW1wid3JhcFwiLCBcIndlZWtOdW1iZXJzXCIsIFwiYWxsb3dJbnB1dFwiLCBcImNsaWNrT3BlbnNcIiwgXCJ0aW1lXzI0aHJcIiwgXCJlbmFibGVUaW1lXCIsIFwibm9DYWxlbmRhclwiLCBcImFsdElucHV0XCIsIFwic2hvcnRoYW5kQ3VycmVudE1vbnRoXCIsIFwiaW5saW5lXCIsIFwic3RhdGljXCIsIFwiZW5hYmxlU2Vjb25kc1wiLCBcImRpc2FibGVNb2JpbGVcIl07XG4gICAgICAgIHZhciBob29rcyA9IFtcIm9uQ2hhbmdlXCIsIFwib25DbG9zZVwiLCBcIm9uRGF5Q3JlYXRlXCIsIFwib25EZXN0cm95XCIsIFwib25LZXlEb3duXCIsIFwib25Nb250aENoYW5nZVwiLCBcIm9uT3BlblwiLCBcIm9uUGFyc2VDb25maWdcIiwgXCJvblJlYWR5XCIsIFwib25WYWx1ZVVwZGF0ZVwiLCBcIm9uWWVhckNoYW5nZVwiLCBcIm9uUHJlQ2FsZW5kYXJQb3NpdGlvblwiXTtcbiAgICAgICAgdmFyIHVzZXJDb25maWcgPSBPYmplY3QuYXNzaWduKHt9LCBpbnN0YW5jZUNvbmZpZywgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShlbGVtZW50LmRhdGFzZXQgfHwge30pKSk7XG4gICAgICAgIHZhciBmb3JtYXRzJCQxID0ge307XG4gICAgICAgIHNlbGYuY29uZmlnLnBhcnNlRGF0ZSA9IHVzZXJDb25maWcucGFyc2VEYXRlO1xuICAgICAgICBzZWxmLmNvbmZpZy5mb3JtYXREYXRlID0gdXNlckNvbmZpZy5mb3JtYXREYXRlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZi5jb25maWcsIFwiZW5hYmxlXCIsIHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLmNvbmZpZy5fZW5hYmxlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoZGF0ZXMpIHtcbiAgICAgICAgICAgIHNlbGYuY29uZmlnLl9lbmFibGUgPSBwYXJzZURhdGVSdWxlcyhkYXRlcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNlbGYuY29uZmlnLCBcImRpc2FibGVcIiwge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuY29uZmlnLl9kaXNhYmxlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoZGF0ZXMpIHtcbiAgICAgICAgICAgIHNlbGYuY29uZmlnLl9kaXNhYmxlID0gcGFyc2VEYXRlUnVsZXMoZGF0ZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCF1c2VyQ29uZmlnLmRhdGVGb3JtYXQgJiYgdXNlckNvbmZpZy5lbmFibGVUaW1lKSB7XG4gICAgICAgICAgZm9ybWF0cyQkMS5kYXRlRm9ybWF0ID0gdXNlckNvbmZpZy5ub0NhbGVuZGFyID8gXCJIOmlcIiArICh1c2VyQ29uZmlnLmVuYWJsZVNlY29uZHMgPyBcIjpTXCIgOiBcIlwiKSA6IGZsYXRwaWNrci5kZWZhdWx0Q29uZmlnLmRhdGVGb3JtYXQgKyBcIiBIOmlcIiArICh1c2VyQ29uZmlnLmVuYWJsZVNlY29uZHMgPyBcIjpTXCIgOiBcIlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1c2VyQ29uZmlnLmFsdElucHV0ICYmIHVzZXJDb25maWcuZW5hYmxlVGltZSAmJiAhdXNlckNvbmZpZy5hbHRGb3JtYXQpIHtcbiAgICAgICAgICBmb3JtYXRzJCQxLmFsdEZvcm1hdCA9IHVzZXJDb25maWcubm9DYWxlbmRhciA/IFwiaDppXCIgKyAodXNlckNvbmZpZy5lbmFibGVTZWNvbmRzID8gXCI6UyBLXCIgOiBcIiBLXCIpIDogZmxhdHBpY2tyLmRlZmF1bHRDb25maWcuYWx0Rm9ybWF0ICsgKFwiIGg6aVwiICsgKHVzZXJDb25maWcuZW5hYmxlU2Vjb25kcyA/IFwiOlNcIiA6IFwiXCIpICsgXCIgS1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLmNvbmZpZywgXCJtaW5EYXRlXCIsIHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLmNvbmZpZy5fbWluRGF0ZTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogbWluTWF4RGF0ZVNldHRlcihcIm1pblwiKVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNlbGYuY29uZmlnLCBcIm1heERhdGVcIiwge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuY29uZmlnLl9tYXhEYXRlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBtaW5NYXhEYXRlU2V0dGVyKFwibWF4XCIpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBtaW5NYXhUaW1lU2V0dGVyID0gZnVuY3Rpb24gbWluTWF4VGltZVNldHRlcih0eXBlKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIHNlbGYuY29uZmlnW3R5cGUgPT09IFwibWluXCIgPyBcIl9taW5UaW1lXCIgOiBcIl9tYXhUaW1lXCJdID0gc2VsZi5wYXJzZURhdGUodmFsLCBcIkg6aVwiKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLmNvbmZpZywgXCJtaW5UaW1lXCIsIHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLmNvbmZpZy5fbWluVGltZTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogbWluTWF4VGltZVNldHRlcihcIm1pblwiKVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNlbGYuY29uZmlnLCBcIm1heFRpbWVcIiwge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuY29uZmlnLl9tYXhUaW1lO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBtaW5NYXhUaW1lU2V0dGVyKFwibWF4XCIpXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuYXNzaWduKHNlbGYuY29uZmlnLCBmb3JtYXRzJCQxLCB1c2VyQ29uZmlnKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvb2xPcHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgc2VsZi5jb25maWdbYm9vbE9wdHNbaV1dID0gc2VsZi5jb25maWdbYm9vbE9wdHNbaV1dID09PSB0cnVlIHx8IHNlbGYuY29uZmlnW2Jvb2xPcHRzW2ldXSA9PT0gXCJ0cnVlXCI7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBfaSA9IGhvb2tzLmxlbmd0aDsgX2ktLTspIHtcbiAgICAgICAgICBpZiAoc2VsZi5jb25maWdbaG9va3NbX2ldXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzZWxmLmNvbmZpZ1tob29rc1tfaV1dID0gYXJyYXlpZnkoc2VsZi5jb25maWdbaG9va3NbX2ldXSB8fCBbXSkubWFwKGJpbmRUb0luc3RhbmNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VsZi5jb25maWcubW9kZSA9PT0gXCJ0aW1lXCIpIHtcbiAgICAgICAgICBzZWxmLmNvbmZpZy5ub0NhbGVuZGFyID0gdHJ1ZTtcbiAgICAgICAgICBzZWxmLmNvbmZpZy5lbmFibGVUaW1lID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IHNlbGYuY29uZmlnLnBsdWdpbnMubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICAgIHZhciBwbHVnaW5Db25mID0gc2VsZi5jb25maWcucGx1Z2luc1tfaTJdKHNlbGYpIHx8IHt9O1xuXG4gICAgICAgICAgZm9yICh2YXIga2V5IGluIHBsdWdpbkNvbmYpIHtcbiAgICAgICAgICAgIGlmICh+aG9va3MuaW5kZXhPZihrZXkpKSB7XG4gICAgICAgICAgICAgIHNlbGYuY29uZmlnW2tleV0gPSBhcnJheWlmeShwbHVnaW5Db25mW2tleV0pLm1hcChiaW5kVG9JbnN0YW5jZSkuY29uY2F0KHNlbGYuY29uZmlnW2tleV0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdXNlckNvbmZpZ1trZXldID09PSBcInVuZGVmaW5lZFwiKSBzZWxmLmNvbmZpZ1trZXldID0gcGx1Z2luQ29uZltrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuaXNNb2JpbGUgPSAhc2VsZi5jb25maWcuZGlzYWJsZU1vYmlsZSAmJiAhc2VsZi5jb25maWcuaW5saW5lICYmIHNlbGYuY29uZmlnLm1vZGUgPT09IFwic2luZ2xlXCIgJiYgIXNlbGYuY29uZmlnLmRpc2FibGUubGVuZ3RoICYmICFzZWxmLmNvbmZpZy5lbmFibGUubGVuZ3RoICYmICFzZWxmLmNvbmZpZy53ZWVrTnVtYmVycyAmJiAvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICAgIHRyaWdnZXJFdmVudChcIm9uUGFyc2VDb25maWdcIik7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNldHVwTG9jYWxlKCkge1xuICAgICAgICBpZiAodHlwZW9mIHNlbGYuY29uZmlnLmxvY2FsZSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgZmxhdHBpY2tyLmwxMG5zW3NlbGYuY29uZmlnLmxvY2FsZV0gPT09IFwidW5kZWZpbmVkXCIpIHNlbGYuY29uZmlnLmVycm9ySGFuZGxlcihuZXcgRXJyb3IoXCJmbGF0cGlja3I6IGludmFsaWQgbG9jYWxlIFwiICsgc2VsZi5jb25maWcubG9jYWxlKSk7XG4gICAgICAgIHNlbGYubDEwbiA9IE9iamVjdC5hc3NpZ24oe30sIGZsYXRwaWNrci5sMTBucy5kZWZhdWx0LCB0eXBlb2Ygc2VsZi5jb25maWcubG9jYWxlID09PSBcIm9iamVjdFwiID8gc2VsZi5jb25maWcubG9jYWxlIDogc2VsZi5jb25maWcubG9jYWxlICE9PSBcImRlZmF1bHRcIiA/IGZsYXRwaWNrci5sMTBuc1tzZWxmLmNvbmZpZy5sb2NhbGVdIDogdW5kZWZpbmVkKTtcbiAgICAgICAgdG9rZW5SZWdleC5LID0gXCIoXCIgKyBzZWxmLmwxMG4uYW1QTVswXSArIFwifFwiICsgc2VsZi5sMTBuLmFtUE1bMV0gKyBcInxcIiArIHNlbGYubDEwbi5hbVBNWzBdLnRvTG93ZXJDYXNlKCkgKyBcInxcIiArIHNlbGYubDEwbi5hbVBNWzFdLnRvTG93ZXJDYXNlKCkgKyBcIilcIjtcbiAgICAgICAgc2VsZi5mb3JtYXREYXRlID0gY3JlYXRlRGF0ZUZvcm1hdHRlcihzZWxmKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcG9zaXRpb25DYWxlbmRhcihjdXN0b21Qb3NpdGlvbkVsZW1lbnQpIHtcbiAgICAgICAgaWYgKHNlbGYuY2FsZW5kYXJDb250YWluZXIgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvblByZUNhbGVuZGFyUG9zaXRpb25cIik7XG4gICAgICAgIHZhciBwb3NpdGlvbkVsZW1lbnQgPSBjdXN0b21Qb3NpdGlvbkVsZW1lbnQgfHwgc2VsZi5fcG9zaXRpb25FbGVtZW50O1xuICAgICAgICB2YXIgY2FsZW5kYXJIZWlnaHQgPSBBcnJheS5wcm90b3R5cGUucmVkdWNlLmNhbGwoc2VsZi5jYWxlbmRhckNvbnRhaW5lci5jaGlsZHJlbiwgZnVuY3Rpb24gKGFjYywgY2hpbGQpIHtcbiAgICAgICAgICByZXR1cm4gYWNjICsgY2hpbGQub2Zmc2V0SGVpZ2h0O1xuICAgICAgICB9LCAwKSxcbiAgICAgICAgICAgIGNhbGVuZGFyV2lkdGggPSBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLm9mZnNldFdpZHRoLFxuICAgICAgICAgICAgY29uZmlnUG9zID0gc2VsZi5jb25maWcucG9zaXRpb24sXG4gICAgICAgICAgICBpbnB1dEJvdW5kcyA9IHBvc2l0aW9uRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICAgIGRpc3RhbmNlRnJvbUJvdHRvbSA9IHdpbmRvdy5pbm5lckhlaWdodCAtIGlucHV0Qm91bmRzLmJvdHRvbSxcbiAgICAgICAgICAgIHNob3dPblRvcCA9IGNvbmZpZ1BvcyA9PT0gXCJhYm92ZVwiIHx8IGNvbmZpZ1BvcyAhPT0gXCJiZWxvd1wiICYmIGRpc3RhbmNlRnJvbUJvdHRvbSA8IGNhbGVuZGFySGVpZ2h0ICYmIGlucHV0Qm91bmRzLnRvcCA+IGNhbGVuZGFySGVpZ2h0O1xuICAgICAgICB2YXIgdG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0ICsgaW5wdXRCb3VuZHMudG9wICsgKCFzaG93T25Ub3AgPyBwb3NpdGlvbkVsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgMiA6IC1jYWxlbmRhckhlaWdodCAtIDIpO1xuICAgICAgICB0b2dnbGVDbGFzcyhzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCBcImFycm93VG9wXCIsICFzaG93T25Ub3ApO1xuICAgICAgICB0b2dnbGVDbGFzcyhzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCBcImFycm93Qm90dG9tXCIsIHNob3dPblRvcCk7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5pbmxpbmUpIHJldHVybjtcbiAgICAgICAgdmFyIGxlZnQgPSB3aW5kb3cucGFnZVhPZmZzZXQgKyBpbnB1dEJvdW5kcy5sZWZ0O1xuICAgICAgICB2YXIgcmlnaHQgPSB3aW5kb3cuZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCAtIGlucHV0Qm91bmRzLnJpZ2h0O1xuICAgICAgICB2YXIgcmlnaHRNb3N0ID0gbGVmdCArIGNhbGVuZGFyV2lkdGggPiB3aW5kb3cuZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aDtcbiAgICAgICAgdG9nZ2xlQ2xhc3Moc2VsZi5jYWxlbmRhckNvbnRhaW5lciwgXCJyaWdodE1vc3RcIiwgcmlnaHRNb3N0KTtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLnN0YXRpYykgcmV0dXJuO1xuICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnN0eWxlLnRvcCA9IHRvcCArIFwicHhcIjtcblxuICAgICAgICBpZiAoIXJpZ2h0TW9zdCkge1xuICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuc3R5bGUubGVmdCA9IGxlZnQgKyBcInB4XCI7XG4gICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS5yaWdodCA9IFwiYXV0b1wiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuc3R5bGUubGVmdCA9IFwiYXV0b1wiO1xuICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuc3R5bGUucmlnaHQgPSByaWdodCArIFwicHhcIjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZWRyYXcoKSB7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5ub0NhbGVuZGFyIHx8IHNlbGYuaXNNb2JpbGUpIHJldHVybjtcbiAgICAgICAgdXBkYXRlV2Vla2RheXMoKTtcbiAgICAgICAgdXBkYXRlTmF2aWdhdGlvbkN1cnJlbnRNb250aCgpO1xuICAgICAgICBidWlsZERheXMoKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZm9jdXNBbmRDbG9zZSgpIHtcbiAgICAgICAgc2VsZi5faW5wdXQuZm9jdXMoKTtcblxuICAgICAgICBpZiAod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIk1TSUVcIikgIT09IC0xIHx8IG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KHNlbGYuY2xvc2UsIDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYuY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzZWxlY3REYXRlKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIHZhciBpc1NlbGVjdGFibGUgPSBmdW5jdGlvbiBpc1NlbGVjdGFibGUoZGF5KSB7XG4gICAgICAgICAgcmV0dXJuIGRheS5jbGFzc0xpc3QgJiYgZGF5LmNsYXNzTGlzdC5jb250YWlucyhcImZsYXRwaWNrci1kYXlcIikgJiYgIWRheS5jbGFzc0xpc3QuY29udGFpbnMoXCJkaXNhYmxlZFwiKSAmJiAhZGF5LmNsYXNzTGlzdC5jb250YWlucyhcIm5vdEFsbG93ZWRcIik7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHQgPSBmaW5kUGFyZW50KGUudGFyZ2V0LCBpc1NlbGVjdGFibGUpO1xuICAgICAgICBpZiAodCA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgICAgIHZhciB0YXJnZXQgPSB0O1xuICAgICAgICB2YXIgc2VsZWN0ZWREYXRlID0gc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogPSBuZXcgRGF0ZSh0YXJnZXQuZGF0ZU9iai5nZXRUaW1lKCkpO1xuICAgICAgICB2YXIgc2hvdWxkQ2hhbmdlTW9udGggPSAoc2VsZWN0ZWREYXRlLmdldE1vbnRoKCkgPCBzZWxmLmN1cnJlbnRNb250aCB8fCBzZWxlY3RlZERhdGUuZ2V0TW9udGgoKSA+IHNlbGYuY3VycmVudE1vbnRoICsgc2VsZi5jb25maWcuc2hvd01vbnRocyAtIDEpICYmIHNlbGYuY29uZmlnLm1vZGUgIT09IFwicmFuZ2VcIjtcbiAgICAgICAgc2VsZi5zZWxlY3RlZERhdGVFbGVtID0gdGFyZ2V0O1xuICAgICAgICBpZiAoc2VsZi5jb25maWcubW9kZSA9PT0gXCJzaW5nbGVcIikgc2VsZi5zZWxlY3RlZERhdGVzID0gW3NlbGVjdGVkRGF0ZV07ZWxzZSBpZiAoc2VsZi5jb25maWcubW9kZSA9PT0gXCJtdWx0aXBsZVwiKSB7XG4gICAgICAgICAgdmFyIHNlbGVjdGVkSW5kZXggPSBpc0RhdGVTZWxlY3RlZChzZWxlY3RlZERhdGUpO1xuICAgICAgICAgIGlmIChzZWxlY3RlZEluZGV4KSBzZWxmLnNlbGVjdGVkRGF0ZXMuc3BsaWNlKHBhcnNlSW50KHNlbGVjdGVkSW5kZXgpLCAxKTtlbHNlIHNlbGYuc2VsZWN0ZWREYXRlcy5wdXNoKHNlbGVjdGVkRGF0ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZi5jb25maWcubW9kZSA9PT0gXCJyYW5nZVwiKSB7XG4gICAgICAgICAgaWYgKHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggPT09IDIpIHNlbGYuY2xlYXIoZmFsc2UpO1xuICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlcy5wdXNoKHNlbGVjdGVkRGF0ZSk7XG4gICAgICAgICAgaWYgKGNvbXBhcmVEYXRlcyhzZWxlY3RlZERhdGUsIHNlbGYuc2VsZWN0ZWREYXRlc1swXSwgdHJ1ZSkgIT09IDApIHNlbGYuc2VsZWN0ZWREYXRlcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5nZXRUaW1lKCkgLSBiLmdldFRpbWUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBzZXRIb3Vyc0Zyb21JbnB1dHMoKTtcblxuICAgICAgICBpZiAoc2hvdWxkQ2hhbmdlTW9udGgpIHtcbiAgICAgICAgICB2YXIgaXNOZXdZZWFyID0gc2VsZi5jdXJyZW50WWVhciAhPT0gc2VsZWN0ZWREYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgc2VsZi5jdXJyZW50WWVhciA9IHNlbGVjdGVkRGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgICAgIHNlbGYuY3VycmVudE1vbnRoID0gc2VsZWN0ZWREYXRlLmdldE1vbnRoKCk7XG4gICAgICAgICAgaWYgKGlzTmV3WWVhcikgdHJpZ2dlckV2ZW50KFwib25ZZWFyQ2hhbmdlXCIpO1xuICAgICAgICAgIHRyaWdnZXJFdmVudChcIm9uTW9udGhDaGFuZ2VcIik7XG4gICAgICAgIH1cblxuICAgICAgICB1cGRhdGVOYXZpZ2F0aW9uQ3VycmVudE1vbnRoKCk7XG4gICAgICAgIGJ1aWxkRGF5cygpO1xuICAgICAgICBpZiAoc2VsZi5jb25maWcubWluRGF0ZSAmJiBzZWxmLm1pbkRhdGVIYXNUaW1lICYmIHNlbGYuY29uZmlnLmVuYWJsZVRpbWUgJiYgY29tcGFyZURhdGVzKHNlbGVjdGVkRGF0ZSwgc2VsZi5jb25maWcubWluRGF0ZSkgPT09IDApIHNldEhvdXJzRnJvbURhdGUoc2VsZi5jb25maWcubWluRGF0ZSk7XG4gICAgICAgIHVwZGF0ZVZhbHVlKCk7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5lbmFibGVUaW1lKSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gc2VsZi5zaG93VGltZUlucHV0ID0gdHJ1ZTtcbiAgICAgICAgfSwgNTApO1xuXG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInJhbmdlXCIpIHtcbiAgICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgb25Nb3VzZU92ZXIodGFyZ2V0KTtcbiAgICAgICAgICB9IGVsc2UgdXBkYXRlTmF2aWdhdGlvbkN1cnJlbnRNb250aCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzaG91bGRDaGFuZ2VNb250aCAmJiBzZWxmLmNvbmZpZy5tb2RlICE9PSBcInJhbmdlXCIgJiYgc2VsZi5jb25maWcuc2hvd01vbnRocyA9PT0gMSkgZm9jdXNPbkRheSh0YXJnZXQuJGksIDApO2Vsc2Ugc2VsZi5zZWxlY3RlZERhdGVFbGVtICYmIHNlbGYuc2VsZWN0ZWREYXRlRWxlbS5mb2N1cygpO1xuICAgICAgICBpZiAoc2VsZi5ob3VyRWxlbWVudCAhPT0gdW5kZWZpbmVkKSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gc2VsZi5ob3VyRWxlbWVudCAhPT0gdW5kZWZpbmVkICYmIHNlbGYuaG91ckVsZW1lbnQuc2VsZWN0KCk7XG4gICAgICAgIH0sIDQ1MSk7XG5cbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLmNsb3NlT25TZWxlY3QpIHtcbiAgICAgICAgICB2YXIgc2luZ2xlID0gc2VsZi5jb25maWcubW9kZSA9PT0gXCJzaW5nbGVcIiAmJiAhc2VsZi5jb25maWcuZW5hYmxlVGltZTtcbiAgICAgICAgICB2YXIgcmFuZ2UgPSBzZWxmLmNvbmZpZy5tb2RlID09PSBcInJhbmdlXCIgJiYgc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCA9PT0gMiAmJiAhc2VsZi5jb25maWcuZW5hYmxlVGltZTtcblxuICAgICAgICAgIGlmIChzaW5nbGUgfHwgcmFuZ2UpIHtcbiAgICAgICAgICAgIGZvY3VzQW5kQ2xvc2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0cmlnZ2VyQ2hhbmdlKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBDQUxMQkFDS1MgPSB7XG4gICAgICAgIGxvY2FsZTogW3NldHVwTG9jYWxlXVxuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gc2V0KG9wdGlvbiwgdmFsdWUpIHtcbiAgICAgICAgaWYgKG9wdGlvbiAhPT0gbnVsbCAmJiB0eXBlb2Ygb3B0aW9uID09PSBcIm9iamVjdFwiKSBPYmplY3QuYXNzaWduKHNlbGYuY29uZmlnLCBvcHRpb24pO2Vsc2Uge1xuICAgICAgICAgIHNlbGYuY29uZmlnW29wdGlvbl0gPSB2YWx1ZTtcbiAgICAgICAgICBpZiAoQ0FMTEJBQ0tTW29wdGlvbl0gIT09IHVuZGVmaW5lZCkgQ0FMTEJBQ0tTW29wdGlvbl0uZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgcmV0dXJuIHgoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLnJlZHJhdygpO1xuICAgICAgICBqdW1wVG9EYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNldFNlbGVjdGVkRGF0ZShpbnB1dERhdGUsIGZvcm1hdCkge1xuICAgICAgICB2YXIgZGF0ZXMgPSBbXTtcbiAgICAgICAgaWYgKGlucHV0RGF0ZSBpbnN0YW5jZW9mIEFycmF5KSBkYXRlcyA9IGlucHV0RGF0ZS5tYXAoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICByZXR1cm4gc2VsZi5wYXJzZURhdGUoZCwgZm9ybWF0KTtcbiAgICAgICAgfSk7ZWxzZSBpZiAoaW5wdXREYXRlIGluc3RhbmNlb2YgRGF0ZSB8fCB0eXBlb2YgaW5wdXREYXRlID09PSBcIm51bWJlclwiKSBkYXRlcyA9IFtzZWxmLnBhcnNlRGF0ZShpbnB1dERhdGUsIGZvcm1hdCldO2Vsc2UgaWYgKHR5cGVvZiBpbnB1dERhdGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICBzd2l0Y2ggKHNlbGYuY29uZmlnLm1vZGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJzaW5nbGVcIjpcbiAgICAgICAgICAgICAgZGF0ZXMgPSBbc2VsZi5wYXJzZURhdGUoaW5wdXREYXRlLCBmb3JtYXQpXTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJtdWx0aXBsZVwiOlxuICAgICAgICAgICAgICBkYXRlcyA9IGlucHV0RGF0ZS5zcGxpdChzZWxmLmNvbmZpZy5jb25qdW5jdGlvbikubWFwKGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYucGFyc2VEYXRlKGRhdGUsIGZvcm1hdCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcInJhbmdlXCI6XG4gICAgICAgICAgICAgIGRhdGVzID0gaW5wdXREYXRlLnNwbGl0KHNlbGYubDEwbi5yYW5nZVNlcGFyYXRvcikubWFwKGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYucGFyc2VEYXRlKGRhdGUsIGZvcm1hdCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Ugc2VsZi5jb25maWcuZXJyb3JIYW5kbGVyKG5ldyBFcnJvcihcIkludmFsaWQgZGF0ZSBzdXBwbGllZDogXCIgKyBKU09OLnN0cmluZ2lmeShpbnB1dERhdGUpKSk7XG4gICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlcyA9IGRhdGVzLmZpbHRlcihmdW5jdGlvbiAoZCkge1xuICAgICAgICAgIHJldHVybiBkIGluc3RhbmNlb2YgRGF0ZSAmJiBpc0VuYWJsZWQoZCwgZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1vZGUgPT09IFwicmFuZ2VcIikgc2VsZi5zZWxlY3RlZERhdGVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICByZXR1cm4gYS5nZXRUaW1lKCkgLSBiLmdldFRpbWUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNldERhdGUoZGF0ZSwgdHJpZ2dlckNoYW5nZSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlID09PSB2b2lkIDApIHtcbiAgICAgICAgICB0cmlnZ2VyQ2hhbmdlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZm9ybWF0ID09PSB2b2lkIDApIHtcbiAgICAgICAgICBmb3JtYXQgPSBzZWxmLmNvbmZpZy5kYXRlRm9ybWF0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRhdGUgIT09IDAgJiYgIWRhdGUpIHJldHVybiBzZWxmLmNsZWFyKHRyaWdnZXJDaGFuZ2UpO1xuICAgICAgICBzZXRTZWxlY3RlZERhdGUoZGF0ZSwgZm9ybWF0KTtcbiAgICAgICAgc2VsZi5zaG93VGltZUlucHV0ID0gc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCA+IDA7XG4gICAgICAgIHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqID0gc2VsZi5zZWxlY3RlZERhdGVzWzBdO1xuICAgICAgICBzZWxmLnJlZHJhdygpO1xuICAgICAgICBqdW1wVG9EYXRlKCk7XG4gICAgICAgIHNldEhvdXJzRnJvbURhdGUoKTtcbiAgICAgICAgdXBkYXRlVmFsdWUodHJpZ2dlckNoYW5nZSk7XG4gICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlKSB0cmlnZ2VyRXZlbnQoXCJvbkNoYW5nZVwiKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcGFyc2VEYXRlUnVsZXMoYXJyKSB7XG4gICAgICAgIHJldHVybiBhcnIubWFwKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBydWxlID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBydWxlID09PSBcIm51bWJlclwiIHx8IHJ1bGUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi5wYXJzZURhdGUocnVsZSwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJ1bGUgJiYgdHlwZW9mIHJ1bGUgPT09IFwib2JqZWN0XCIgJiYgcnVsZS5mcm9tICYmIHJ1bGUudG8pIHJldHVybiB7XG4gICAgICAgICAgICBmcm9tOiBzZWxmLnBhcnNlRGF0ZShydWxlLmZyb20sIHVuZGVmaW5lZCksXG4gICAgICAgICAgICB0bzogc2VsZi5wYXJzZURhdGUocnVsZS50bywgdW5kZWZpbmVkKVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICByZXR1cm4gcnVsZTtcbiAgICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzZXR1cERhdGVzKCkge1xuICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZXMgPSBbXTtcbiAgICAgICAgc2VsZi5ub3cgPSBzZWxmLnBhcnNlRGF0ZShzZWxmLmNvbmZpZy5ub3cpIHx8IG5ldyBEYXRlKCk7XG4gICAgICAgIHZhciBwcmVsb2FkZWREYXRlID0gc2VsZi5jb25maWcuZGVmYXVsdERhdGUgfHwgc2VsZi5pbnB1dC52YWx1ZTtcbiAgICAgICAgaWYgKHByZWxvYWRlZERhdGUpIHNldFNlbGVjdGVkRGF0ZShwcmVsb2FkZWREYXRlLCBzZWxmLmNvbmZpZy5kYXRlRm9ybWF0KTtcbiAgICAgICAgdmFyIGluaXRpYWxEYXRlID0gc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCA+IDAgPyBzZWxmLnNlbGVjdGVkRGF0ZXNbMF0gOiBzZWxmLmNvbmZpZy5taW5EYXRlICYmIHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0VGltZSgpID4gc2VsZi5ub3cuZ2V0VGltZSgpID8gc2VsZi5jb25maWcubWluRGF0ZSA6IHNlbGYuY29uZmlnLm1heERhdGUgJiYgc2VsZi5jb25maWcubWF4RGF0ZS5nZXRUaW1lKCkgPCBzZWxmLm5vdy5nZXRUaW1lKCkgPyBzZWxmLmNvbmZpZy5tYXhEYXRlIDogc2VsZi5ub3c7XG4gICAgICAgIHNlbGYuY3VycmVudFllYXIgPSBpbml0aWFsRGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgICBzZWxmLmN1cnJlbnRNb250aCA9IGluaXRpYWxEYXRlLmdldE1vbnRoKCk7XG4gICAgICAgIGlmIChzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID4gMCkgc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogPSBzZWxmLnNlbGVjdGVkRGF0ZXNbMF07XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5taW5UaW1lICE9PSB1bmRlZmluZWQpIHNlbGYuY29uZmlnLm1pblRpbWUgPSBzZWxmLnBhcnNlRGF0ZShzZWxmLmNvbmZpZy5taW5UaW1lLCBcIkg6aVwiKTtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1heFRpbWUgIT09IHVuZGVmaW5lZCkgc2VsZi5jb25maWcubWF4VGltZSA9IHNlbGYucGFyc2VEYXRlKHNlbGYuY29uZmlnLm1heFRpbWUsIFwiSDppXCIpO1xuICAgICAgICBzZWxmLm1pbkRhdGVIYXNUaW1lID0gISFzZWxmLmNvbmZpZy5taW5EYXRlICYmIChzZWxmLmNvbmZpZy5taW5EYXRlLmdldEhvdXJzKCkgPiAwIHx8IHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0TWludXRlcygpID4gMCB8fCBzZWxmLmNvbmZpZy5taW5EYXRlLmdldFNlY29uZHMoKSA+IDApO1xuICAgICAgICBzZWxmLm1heERhdGVIYXNUaW1lID0gISFzZWxmLmNvbmZpZy5tYXhEYXRlICYmIChzZWxmLmNvbmZpZy5tYXhEYXRlLmdldEhvdXJzKCkgPiAwIHx8IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0TWludXRlcygpID4gMCB8fCBzZWxmLmNvbmZpZy5tYXhEYXRlLmdldFNlY29uZHMoKSA+IDApO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZiwgXCJzaG93VGltZUlucHV0XCIsIHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLl9zaG93VGltZUlucHV0O1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoYm9vbCkge1xuICAgICAgICAgICAgc2VsZi5fc2hvd1RpbWVJbnB1dCA9IGJvb2w7XG4gICAgICAgICAgICBpZiAoc2VsZi5jYWxlbmRhckNvbnRhaW5lcikgdG9nZ2xlQ2xhc3Moc2VsZi5jYWxlbmRhckNvbnRhaW5lciwgXCJzaG93VGltZUlucHV0XCIsIGJvb2wpO1xuICAgICAgICAgICAgc2VsZi5pc09wZW4gJiYgcG9zaXRpb25DYWxlbmRhcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNldHVwSW5wdXRzKCkge1xuICAgICAgICBzZWxmLmlucHV0ID0gc2VsZi5jb25maWcud3JhcCA/IGVsZW1lbnQucXVlcnlTZWxlY3RvcihcIltkYXRhLWlucHV0XVwiKSA6IGVsZW1lbnQ7XG5cbiAgICAgICAgaWYgKCFzZWxmLmlucHV0KSB7XG4gICAgICAgICAgc2VsZi5jb25maWcuZXJyb3JIYW5kbGVyKG5ldyBFcnJvcihcIkludmFsaWQgaW5wdXQgZWxlbWVudCBzcGVjaWZpZWRcIikpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuaW5wdXQuX3R5cGUgPSBzZWxmLmlucHV0LnR5cGU7XG4gICAgICAgIHNlbGYuaW5wdXQudHlwZSA9IFwidGV4dFwiO1xuICAgICAgICBzZWxmLmlucHV0LmNsYXNzTGlzdC5hZGQoXCJmbGF0cGlja3ItaW5wdXRcIik7XG4gICAgICAgIHNlbGYuX2lucHV0ID0gc2VsZi5pbnB1dDtcblxuICAgICAgICBpZiAoc2VsZi5jb25maWcuYWx0SW5wdXQpIHtcbiAgICAgICAgICBzZWxmLmFsdElucHV0ID0gY3JlYXRlRWxlbWVudChzZWxmLmlucHV0Lm5vZGVOYW1lLCBzZWxmLmlucHV0LmNsYXNzTmFtZSArIFwiIFwiICsgc2VsZi5jb25maWcuYWx0SW5wdXRDbGFzcyk7XG4gICAgICAgICAgc2VsZi5faW5wdXQgPSBzZWxmLmFsdElucHV0O1xuICAgICAgICAgIHNlbGYuYWx0SW5wdXQucGxhY2Vob2xkZXIgPSBzZWxmLmlucHV0LnBsYWNlaG9sZGVyO1xuICAgICAgICAgIHNlbGYuYWx0SW5wdXQuZGlzYWJsZWQgPSBzZWxmLmlucHV0LmRpc2FibGVkO1xuICAgICAgICAgIHNlbGYuYWx0SW5wdXQucmVxdWlyZWQgPSBzZWxmLmlucHV0LnJlcXVpcmVkO1xuICAgICAgICAgIHNlbGYuYWx0SW5wdXQudGFiSW5kZXggPSBzZWxmLmlucHV0LnRhYkluZGV4O1xuICAgICAgICAgIHNlbGYuYWx0SW5wdXQudHlwZSA9IFwidGV4dFwiO1xuICAgICAgICAgIHNlbGYuaW5wdXQudHlwZSA9IFwiaGlkZGVuXCI7XG4gICAgICAgICAgaWYgKCFzZWxmLmNvbmZpZy5zdGF0aWMgJiYgc2VsZi5pbnB1dC5wYXJlbnROb2RlKSBzZWxmLmlucHV0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNlbGYuYWx0SW5wdXQsIHNlbGYuaW5wdXQubmV4dFNpYmxpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzZWxmLmNvbmZpZy5hbGxvd0lucHV0KSBzZWxmLl9pbnB1dC5zZXRBdHRyaWJ1dGUoXCJyZWFkb25seVwiLCBcInJlYWRvbmx5XCIpO1xuICAgICAgICBzZWxmLl9wb3NpdGlvbkVsZW1lbnQgPSBzZWxmLmNvbmZpZy5wb3NpdGlvbkVsZW1lbnQgfHwgc2VsZi5faW5wdXQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNldHVwTW9iaWxlKCkge1xuICAgICAgICB2YXIgaW5wdXRUeXBlID0gc2VsZi5jb25maWcuZW5hYmxlVGltZSA/IHNlbGYuY29uZmlnLm5vQ2FsZW5kYXIgPyBcInRpbWVcIiA6IFwiZGF0ZXRpbWUtbG9jYWxcIiA6IFwiZGF0ZVwiO1xuICAgICAgICBzZWxmLm1vYmlsZUlucHV0ID0gY3JlYXRlRWxlbWVudChcImlucHV0XCIsIHNlbGYuaW5wdXQuY2xhc3NOYW1lICsgXCIgZmxhdHBpY2tyLW1vYmlsZVwiKTtcbiAgICAgICAgc2VsZi5tb2JpbGVJbnB1dC5zdGVwID0gc2VsZi5pbnB1dC5nZXRBdHRyaWJ1dGUoXCJzdGVwXCIpIHx8IFwiYW55XCI7XG4gICAgICAgIHNlbGYubW9iaWxlSW5wdXQudGFiSW5kZXggPSAxO1xuICAgICAgICBzZWxmLm1vYmlsZUlucHV0LnR5cGUgPSBpbnB1dFR5cGU7XG4gICAgICAgIHNlbGYubW9iaWxlSW5wdXQuZGlzYWJsZWQgPSBzZWxmLmlucHV0LmRpc2FibGVkO1xuICAgICAgICBzZWxmLm1vYmlsZUlucHV0LnJlcXVpcmVkID0gc2VsZi5pbnB1dC5yZXF1aXJlZDtcbiAgICAgICAgc2VsZi5tb2JpbGVJbnB1dC5wbGFjZWhvbGRlciA9IHNlbGYuaW5wdXQucGxhY2Vob2xkZXI7XG4gICAgICAgIHNlbGYubW9iaWxlRm9ybWF0U3RyID0gaW5wdXRUeXBlID09PSBcImRhdGV0aW1lLWxvY2FsXCIgPyBcIlktbS1kXFxcXFRIOmk6U1wiIDogaW5wdXRUeXBlID09PSBcImRhdGVcIiA/IFwiWS1tLWRcIiA6IFwiSDppOlNcIjtcblxuICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBzZWxmLm1vYmlsZUlucHV0LmRlZmF1bHRWYWx1ZSA9IHNlbGYubW9iaWxlSW5wdXQudmFsdWUgPSBzZWxmLmZvcm1hdERhdGUoc2VsZi5zZWxlY3RlZERhdGVzWzBdLCBzZWxmLm1vYmlsZUZvcm1hdFN0cik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VsZi5jb25maWcubWluRGF0ZSkgc2VsZi5tb2JpbGVJbnB1dC5taW4gPSBzZWxmLmZvcm1hdERhdGUoc2VsZi5jb25maWcubWluRGF0ZSwgXCJZLW0tZFwiKTtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1heERhdGUpIHNlbGYubW9iaWxlSW5wdXQubWF4ID0gc2VsZi5mb3JtYXREYXRlKHNlbGYuY29uZmlnLm1heERhdGUsIFwiWS1tLWRcIik7XG4gICAgICAgIHNlbGYuaW5wdXQudHlwZSA9IFwiaGlkZGVuXCI7XG4gICAgICAgIGlmIChzZWxmLmFsdElucHV0ICE9PSB1bmRlZmluZWQpIHNlbGYuYWx0SW5wdXQudHlwZSA9IFwiaGlkZGVuXCI7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoc2VsZi5pbnB1dC5wYXJlbnROb2RlKSBzZWxmLmlucHV0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNlbGYubW9iaWxlSW5wdXQsIHNlbGYuaW5wdXQubmV4dFNpYmxpbmcpO1xuICAgICAgICB9IGNhdGNoIChfYSkge31cblxuICAgICAgICBiaW5kKHNlbGYubW9iaWxlSW5wdXQsIFwiY2hhbmdlXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgc2VsZi5zZXREYXRlKGUudGFyZ2V0LnZhbHVlLCBmYWxzZSwgc2VsZi5tb2JpbGVGb3JtYXRTdHIpO1xuICAgICAgICAgIHRyaWdnZXJFdmVudChcIm9uQ2hhbmdlXCIpO1xuICAgICAgICAgIHRyaWdnZXJFdmVudChcIm9uQ2xvc2VcIik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICAgIGlmIChzZWxmLmlzT3BlbikgcmV0dXJuIHNlbGYuY2xvc2UoKTtcbiAgICAgICAgc2VsZi5vcGVuKCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRyaWdnZXJFdmVudChldmVudCwgZGF0YSkge1xuICAgICAgICB2YXIgaG9va3MgPSBzZWxmLmNvbmZpZ1tldmVudF07XG5cbiAgICAgICAgaWYgKGhvb2tzICE9PSB1bmRlZmluZWQgJiYgaG9va3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBob29rc1tpXSAmJiBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGhvb2tzW2ldKHNlbGYuc2VsZWN0ZWREYXRlcywgc2VsZi5pbnB1dC52YWx1ZSwgc2VsZiwgZGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50ID09PSBcIm9uQ2hhbmdlXCIpIHtcbiAgICAgICAgICBzZWxmLmlucHV0LmRpc3BhdGNoRXZlbnQoY3JlYXRlRXZlbnQoXCJjaGFuZ2VcIikpO1xuICAgICAgICAgIHNlbGYuaW5wdXQuZGlzcGF0Y2hFdmVudChjcmVhdGVFdmVudChcImlucHV0XCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjcmVhdGVFdmVudChuYW1lKSB7XG4gICAgICAgIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcbiAgICAgICAgZS5pbml0RXZlbnQobmFtZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBlO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpc0RhdGVTZWxlY3RlZChkYXRlKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGNvbXBhcmVEYXRlcyhzZWxmLnNlbGVjdGVkRGF0ZXNbaV0sIGRhdGUpID09PSAwKSByZXR1cm4gXCJcIiArIGk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGlzRGF0ZUluUmFuZ2UoZGF0ZSkge1xuICAgICAgICBpZiAoc2VsZi5jb25maWcubW9kZSAhPT0gXCJyYW5nZVwiIHx8IHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggPCAyKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiBjb21wYXJlRGF0ZXMoZGF0ZSwgc2VsZi5zZWxlY3RlZERhdGVzWzBdKSA+PSAwICYmIGNvbXBhcmVEYXRlcyhkYXRlLCBzZWxmLnNlbGVjdGVkRGF0ZXNbMV0pIDw9IDA7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZU5hdmlnYXRpb25DdXJyZW50TW9udGgoKSB7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5ub0NhbGVuZGFyIHx8IHNlbGYuaXNNb2JpbGUgfHwgIXNlbGYubW9udGhOYXYpIHJldHVybjtcbiAgICAgICAgc2VsZi55ZWFyRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoeWVhckVsZW1lbnQsIGkpIHtcbiAgICAgICAgICB2YXIgZCA9IG5ldyBEYXRlKHNlbGYuY3VycmVudFllYXIsIHNlbGYuY3VycmVudE1vbnRoLCAxKTtcbiAgICAgICAgICBkLnNldE1vbnRoKHNlbGYuY3VycmVudE1vbnRoICsgaSk7XG4gICAgICAgICAgc2VsZi5tb250aEVsZW1lbnRzW2ldLnRleHRDb250ZW50ID0gbW9udGhUb1N0cihkLmdldE1vbnRoKCksIHNlbGYuY29uZmlnLnNob3J0aGFuZEN1cnJlbnRNb250aCwgc2VsZi5sMTBuKSArIFwiIFwiO1xuICAgICAgICAgIHllYXJFbGVtZW50LnZhbHVlID0gZC5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBzZWxmLl9oaWRlUHJldk1vbnRoQXJyb3cgPSBzZWxmLmNvbmZpZy5taW5EYXRlICE9PSB1bmRlZmluZWQgJiYgKHNlbGYuY3VycmVudFllYXIgPT09IHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0RnVsbFllYXIoKSA/IHNlbGYuY3VycmVudE1vbnRoIDw9IHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0TW9udGgoKSA6IHNlbGYuY3VycmVudFllYXIgPCBzZWxmLmNvbmZpZy5taW5EYXRlLmdldEZ1bGxZZWFyKCkpO1xuICAgICAgICBzZWxmLl9oaWRlTmV4dE1vbnRoQXJyb3cgPSBzZWxmLmNvbmZpZy5tYXhEYXRlICE9PSB1bmRlZmluZWQgJiYgKHNlbGYuY3VycmVudFllYXIgPT09IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0RnVsbFllYXIoKSA/IHNlbGYuY3VycmVudE1vbnRoICsgMSA+IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0TW9udGgoKSA6IHNlbGYuY3VycmVudFllYXIgPiBzZWxmLmNvbmZpZy5tYXhEYXRlLmdldEZ1bGxZZWFyKCkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB1cGRhdGVWYWx1ZSh0cmlnZ2VyQ2hhbmdlKSB7XG4gICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlID09PSB2b2lkIDApIHtcbiAgICAgICAgICB0cmlnZ2VyQ2hhbmdlID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09PSAwKSByZXR1cm4gc2VsZi5jbGVhcih0cmlnZ2VyQ2hhbmdlKTtcblxuICAgICAgICBpZiAoc2VsZi5tb2JpbGVJbnB1dCAhPT0gdW5kZWZpbmVkICYmIHNlbGYubW9iaWxlRm9ybWF0U3RyKSB7XG4gICAgICAgICAgc2VsZi5tb2JpbGVJbnB1dC52YWx1ZSA9IHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqICE9PSB1bmRlZmluZWQgPyBzZWxmLmZvcm1hdERhdGUoc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmosIHNlbGYubW9iaWxlRm9ybWF0U3RyKSA6IFwiXCI7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgam9pbkNoYXIgPSBzZWxmLmNvbmZpZy5tb2RlICE9PSBcInJhbmdlXCIgPyBzZWxmLmNvbmZpZy5jb25qdW5jdGlvbiA6IHNlbGYubDEwbi5yYW5nZVNlcGFyYXRvcjtcbiAgICAgICAgc2VsZi5pbnB1dC52YWx1ZSA9IHNlbGYuc2VsZWN0ZWREYXRlcy5tYXAoZnVuY3Rpb24gKGRPYmopIHtcbiAgICAgICAgICByZXR1cm4gc2VsZi5mb3JtYXREYXRlKGRPYmosIHNlbGYuY29uZmlnLmRhdGVGb3JtYXQpO1xuICAgICAgICB9KS5qb2luKGpvaW5DaGFyKTtcblxuICAgICAgICBpZiAoc2VsZi5hbHRJbnB1dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc2VsZi5hbHRJbnB1dC52YWx1ZSA9IHNlbGYuc2VsZWN0ZWREYXRlcy5tYXAoZnVuY3Rpb24gKGRPYmopIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLmZvcm1hdERhdGUoZE9iaiwgc2VsZi5jb25maWcuYWx0Rm9ybWF0KTtcbiAgICAgICAgICB9KS5qb2luKGpvaW5DaGFyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlICE9PSBmYWxzZSkgdHJpZ2dlckV2ZW50KFwib25WYWx1ZVVwZGF0ZVwiKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gb25Nb250aE5hdkNsaWNrKGUpIHtcbiAgICAgICAgdmFyIGlzUHJldk1vbnRoID0gc2VsZi5wcmV2TW9udGhOYXYuY29udGFpbnMoZS50YXJnZXQpO1xuICAgICAgICB2YXIgaXNOZXh0TW9udGggPSBzZWxmLm5leHRNb250aE5hdi5jb250YWlucyhlLnRhcmdldCk7XG5cbiAgICAgICAgaWYgKGlzUHJldk1vbnRoIHx8IGlzTmV4dE1vbnRoKSB7XG4gICAgICAgICAgY2hhbmdlTW9udGgoaXNQcmV2TW9udGggPyAtMSA6IDEpO1xuICAgICAgICB9IGVsc2UgaWYgKHNlbGYueWVhckVsZW1lbnRzLmluZGV4T2YoZS50YXJnZXQpID49IDApIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgZS50YXJnZXQuc2VsZWN0KCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiYXJyb3dVcFwiKSkge1xuICAgICAgICAgIHNlbGYuY2hhbmdlWWVhcihzZWxmLmN1cnJlbnRZZWFyICsgMSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiYXJyb3dEb3duXCIpKSB7XG4gICAgICAgICAgc2VsZi5jaGFuZ2VZZWFyKHNlbGYuY3VycmVudFllYXIgLSAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0aW1lV3JhcHBlcihlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIGlzS2V5RG93biA9IGUudHlwZSA9PT0gXCJrZXlkb3duXCIsXG4gICAgICAgICAgICBpbnB1dCA9IGUudGFyZ2V0O1xuXG4gICAgICAgIGlmIChzZWxmLmFtUE0gIT09IHVuZGVmaW5lZCAmJiBlLnRhcmdldCA9PT0gc2VsZi5hbVBNKSB7XG4gICAgICAgICAgc2VsZi5hbVBNLnRleHRDb250ZW50ID0gc2VsZi5sMTBuLmFtUE1baW50KHNlbGYuYW1QTS50ZXh0Q29udGVudCA9PT0gc2VsZi5sMTBuLmFtUE1bMF0pXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtaW4gPSBwYXJzZUZsb2F0KGlucHV0LmdldEF0dHJpYnV0ZShcImRhdGEtbWluXCIpKSxcbiAgICAgICAgICAgIG1heCA9IHBhcnNlRmxvYXQoaW5wdXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1tYXhcIikpLFxuICAgICAgICAgICAgc3RlcCA9IHBhcnNlRmxvYXQoaW5wdXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdGVwXCIpKSxcbiAgICAgICAgICAgIGN1clZhbHVlID0gcGFyc2VJbnQoaW5wdXQudmFsdWUsIDEwKSxcbiAgICAgICAgICAgIGRlbHRhID0gZS5kZWx0YSB8fCAoaXNLZXlEb3duID8gZS53aGljaCA9PT0gMzggPyAxIDogLTEgOiAwKTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gY3VyVmFsdWUgKyBzdGVwICogZGVsdGE7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dC52YWx1ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpbnB1dC52YWx1ZS5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICB2YXIgaXNIb3VyRWxlbSA9IGlucHV0ID09PSBzZWxmLmhvdXJFbGVtZW50LFxuICAgICAgICAgICAgICBpc01pbnV0ZUVsZW0gPSBpbnB1dCA9PT0gc2VsZi5taW51dGVFbGVtZW50O1xuXG4gICAgICAgICAgaWYgKG5ld1ZhbHVlIDwgbWluKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IG1heCArIG5ld1ZhbHVlICsgaW50KCFpc0hvdXJFbGVtKSArIChpbnQoaXNIb3VyRWxlbSkgJiYgaW50KCFzZWxmLmFtUE0pKTtcbiAgICAgICAgICAgIGlmIChpc01pbnV0ZUVsZW0pIGluY3JlbWVudE51bUlucHV0KHVuZGVmaW5lZCwgLTEsIHNlbGYuaG91ckVsZW1lbnQpO1xuICAgICAgICAgIH0gZWxzZSBpZiAobmV3VmFsdWUgPiBtYXgpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaW5wdXQgPT09IHNlbGYuaG91ckVsZW1lbnQgPyBuZXdWYWx1ZSAtIG1heCAtIGludCghc2VsZi5hbVBNKSA6IG1pbjtcbiAgICAgICAgICAgIGlmIChpc01pbnV0ZUVsZW0pIGluY3JlbWVudE51bUlucHV0KHVuZGVmaW5lZCwgMSwgc2VsZi5ob3VyRWxlbWVudCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlbGYuYW1QTSAmJiBpc0hvdXJFbGVtICYmIChzdGVwID09PSAxID8gbmV3VmFsdWUgKyBjdXJWYWx1ZSA9PT0gMjMgOiBNYXRoLmFicyhuZXdWYWx1ZSAtIGN1clZhbHVlKSA+IHN0ZXApKSB7XG4gICAgICAgICAgICBzZWxmLmFtUE0udGV4dENvbnRlbnQgPSBzZWxmLmwxMG4uYW1QTVtpbnQoc2VsZi5hbVBNLnRleHRDb250ZW50ID09PSBzZWxmLmwxMG4uYW1QTVswXSldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlucHV0LnZhbHVlID0gcGFkKG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpbml0KCk7XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfZmxhdHBpY2tyKG5vZGVMaXN0LCBjb25maWcpIHtcbiAgICAgIHZhciBub2RlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG5vZGVMaXN0KTtcbiAgICAgIHZhciBpbnN0YW5jZXMgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKG5vZGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1mcC1vbWl0XCIpICE9PSBudWxsKSBjb250aW51ZTtcblxuICAgICAgICAgIGlmIChub2RlLl9mbGF0cGlja3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbm9kZS5fZmxhdHBpY2tyLmRlc3Ryb3koKTtcblxuICAgICAgICAgICAgbm9kZS5fZmxhdHBpY2tyID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG5vZGUuX2ZsYXRwaWNrciA9IEZsYXRwaWNrckluc3RhbmNlKG5vZGUsIGNvbmZpZyB8fCB7fSk7XG4gICAgICAgICAgaW5zdGFuY2VzLnB1c2gobm9kZS5fZmxhdHBpY2tyKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGluc3RhbmNlcy5sZW5ndGggPT09IDEgPyBpbnN0YW5jZXNbMF0gOiBpbnN0YW5jZXM7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBIVE1MRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgSFRNTENvbGxlY3Rpb24ucHJvdG90eXBlLmZsYXRwaWNrciA9IE5vZGVMaXN0LnByb3RvdHlwZS5mbGF0cGlja3IgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgIHJldHVybiBfZmxhdHBpY2tyKHRoaXMsIGNvbmZpZyk7XG4gICAgICB9O1xuXG4gICAgICBIVE1MRWxlbWVudC5wcm90b3R5cGUuZmxhdHBpY2tyID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICByZXR1cm4gX2ZsYXRwaWNrcihbdGhpc10sIGNvbmZpZyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBmbGF0cGlja3IgPSBmdW5jdGlvbiBmbGF0cGlja3Ioc2VsZWN0b3IsIGNvbmZpZykge1xuICAgICAgaWYgKHNlbGVjdG9yIGluc3RhbmNlb2YgTm9kZUxpc3QpIHJldHVybiBfZmxhdHBpY2tyKHNlbGVjdG9yLCBjb25maWcpO2Vsc2UgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9mbGF0cGlja3Iod2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpLCBjb25maWcpO1xuICAgICAgcmV0dXJuIF9mbGF0cGlja3IoW3NlbGVjdG9yXSwgY29uZmlnKTtcbiAgICB9O1xuXG4gICAgZmxhdHBpY2tyLmRlZmF1bHRDb25maWcgPSBkZWZhdWx0cztcbiAgICBmbGF0cGlja3IubDEwbnMgPSB7XG4gICAgICBlbjogT2JqZWN0LmFzc2lnbih7fSwgZW5nbGlzaCksXG4gICAgICBkZWZhdWx0OiBPYmplY3QuYXNzaWduKHt9LCBlbmdsaXNoKVxuICAgIH07XG5cbiAgICBmbGF0cGlja3IubG9jYWxpemUgPSBmdW5jdGlvbiAobDEwbikge1xuICAgICAgZmxhdHBpY2tyLmwxMG5zLmRlZmF1bHQgPSBPYmplY3QuYXNzaWduKHt9LCBmbGF0cGlja3IubDEwbnMuZGVmYXVsdCwgbDEwbik7XG4gICAgfTtcblxuICAgIGZsYXRwaWNrci5zZXREZWZhdWx0cyA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgIGZsYXRwaWNrci5kZWZhdWx0Q29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgZmxhdHBpY2tyLmRlZmF1bHRDb25maWcsIGNvbmZpZyk7XG4gICAgfTtcblxuICAgIGZsYXRwaWNrci5wYXJzZURhdGUgPSBjcmVhdGVEYXRlUGFyc2VyKHt9KTtcbiAgICBmbGF0cGlja3IuZm9ybWF0RGF0ZSA9IGNyZWF0ZURhdGVGb3JtYXR0ZXIoe30pO1xuICAgIGZsYXRwaWNrci5jb21wYXJlRGF0ZXMgPSBjb21wYXJlRGF0ZXM7XG5cbiAgICBpZiAodHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgalF1ZXJ5LmZuLmZsYXRwaWNrciA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIF9mbGF0cGlja3IodGhpcywgY29uZmlnKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgRGF0ZS5wcm90b3R5cGUuZnBfaW5jciA9IGZ1bmN0aW9uIChkYXlzKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUodGhpcy5nZXRGdWxsWWVhcigpLCB0aGlzLmdldE1vbnRoKCksIHRoaXMuZ2V0RGF0ZSgpICsgKHR5cGVvZiBkYXlzID09PSBcInN0cmluZ1wiID8gcGFyc2VJbnQoZGF5cywgMTApIDogZGF5cykpO1xuICAgIH07XG5cbiAgICByZXR1cm4gZmxhdHBpY2tyO1xuXG59KSkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL1VzZXJzL2JvYmJ5L1dvcmsvYXJjaHN5c3RlbXMvd2ViL2FwcC9wbHVnaW5zL29tZy1maWVsZHMvbm9kZV9tb2R1bGVzL2ZsYXRwaWNrci9kaXN0L2ZsYXRwaWNrci5qc1xuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IGxpc3QgZnJvbSAnLi9saXN0JztcbmltcG9ydCBoaWRkZW4gZnJvbSAnLi9zZXJpYWxpemVkLWlucHV0JztcbmltcG9ydCB7XG4gIHJlbW92ZUl0ZW1zLFxuICBkcmFnSXRlbXMsXG4gIG9uRHJhZ0ltYWdlLFxuICBvblJlbW92ZUltYWdlLFxufSBmcm9tICcuL3V0aWxpdGllcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICBjb25zdCBnYWxsZXJ5U2VjdGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZ2FsbGVyeS13cmFwcGVyJyk7XG5cbiAgaWYgKCFnYWxsZXJ5U2VjdGlvbnMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBbXS5mb3JFYWNoLmNhbGwoZ2FsbGVyeVNlY3Rpb25zLCBnYWxsZXJ5ID0+IHtcbiAgICBjb25zdCBhZGRJbWFnZSA9IGdhbGxlcnkucXVlcnlTZWxlY3RvcignLmFkZC1nYWxsZXJ5LWltYWdlcycpO1xuICAgIGNvbnN0IEhpZGRlbiA9IGhpZGRlbihnYWxsZXJ5LCAnLmltYWdlLWdhbGxlcnktaGlkZGVuJyk7XG5cbiAgICBjb25zdCByZW1vdmUgPSByZW1vdmVJdGVtcyhIaWRkZW4sIG9uUmVtb3ZlSW1hZ2UpO1xuICAgIGNvbnN0IGRyYWcgPSBkcmFnSXRlbXMoSGlkZGVuLCBvbkRyYWdJbWFnZSk7XG4gICAgY29uc3QgTGlzdCA9IGxpc3QoZ2FsbGVyeSwge1xuICAgICAgbGlzdDogJy5nYWxsZXJ5LWltYWdlcycsXG4gICAgICBvbkRyYWc6IGRyYWcsXG4gICAgICBvblJlbW92ZTogcmVtb3ZlLFxuICAgICAgbGlzdFRlbXBsYXRlOiBpbWFnZUl0ZW0sXG4gICAgfSk7XG5cbiAgICBjb25zdCBtZWRpYUZyYW1lID0gd3AubWVkaWEoe1xuICAgICAgdGl0bGU6ICdDaG9vc2UgTWVkaWEnLFxuICAgICAgYnV0dG9uOiB7XG4gICAgICAgIHRleHQ6ICdVc2UgU2VsZWN0ZWQgTWVkaWEnLFxuICAgICAgfSxcbiAgICAgIG11bHRpcGxlOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgYWRkSW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgbWVkaWFGcmFtZS5vcGVuKCk7XG4gICAgfSk7XG5cbiAgICBtZWRpYUZyYW1lLm9uKCdzZWxlY3QnLCBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnN0IGF0dGFjaG1lbnRzID0gbWVkaWFGcmFtZVxuICAgICAgICAuc3RhdGUoKVxuICAgICAgICAuZ2V0KCdzZWxlY3Rpb24nKVxuICAgICAgICAudG9KU09OKCk7XG5cbiAgICAgIGF0dGFjaG1lbnRzLmZvckVhY2goYXR0YWNobWVudCA9PiB7XG4gICAgICAgIExpc3QuYWRkKGF0dGFjaG1lbnQpO1xuICAgICAgICBIaWRkZW4uYWRkKGF0dGFjaG1lbnQuaWQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5jb25zdCBpbWFnZUl0ZW0gPSBpbWFnZSA9PiB7XG4gIHJldHVybiBgPGxpIGNsYXNzPVwiZ2FsbGVyeS1pbWFnZS1pdGVtXCI+PHNwYW4gY2xhc3M9XCJnYWxsZXJ5LWlhbWdlLWlkXCI+JHtcbiAgICBpbWFnZS5pZFxuICB9PC9zcGFuPjxpbWcgc3JjPVwiJHtcbiAgICBpbWFnZS51cmxcbiAgfVwiIGNsYXNzPVwiZ2FsbGVyeS1pbWFnZVwiLz48c3Bhbj48c3ZnIGNsYXNzPVwicmVtb3ZlLWdhbGxlcnktaW1hZ2VcIiB2aWV3Qm94PVwiMCAwIDIwIDIwXCI+XG4gIDxwYXRoIGQ9XCJNMTAgMmM0LjQyIDAgOCAzLjU4IDggOHMtMy41OCA4LTggOC04LTMuNTgtOC04IDMuNTgtOCA4LTh6TTE1IDEzbC0zLTMgMy0zLTItMi0zIDMtMy0zLTIgMiAzIDMtMyAzIDIgMiAzLTMgMyAzelwiPjwvcGF0aD5cbjwvc3ZnPjwvc3Bhbj48L2xpPmA7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZ2FsbGVyeS5qcyIsImltcG9ydCBsaXN0IGZyb20gJy4vbGlzdCc7XG5pbXBvcnQgaGlkZGVuIGZyb20gJy4vc2VyaWFsaXplZC1pbnB1dCc7XG5pbXBvcnQge1xuICByZW1vdmVJdGVtcyxcbiAgZHJhZ0l0ZW1zLFxuICBvbkRyYWdUYWJsZSxcbiAgb25SZW1vdmVUYWJsZSxcbn0gZnJvbSAnLi91dGlsaXRpZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgY29uc3QgdGFibGVMaXN0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50YWJsZS1saXN0Jyk7XG5cbiAgaWYgKCF0YWJsZUxpc3RzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgW10uZm9yRWFjaC5jYWxsKHRhYmxlTGlzdHMsIHRhYmxlTGlzdCA9PiB7XG4gICAgY29uc3QgYWRkUm93ID0gdGFibGVMaXN0LnF1ZXJ5U2VsZWN0b3IoJy50YWJsZS1saXN0LWFkZCcpO1xuICAgIGNvbnN0IEhpZGRlbiA9IGhpZGRlbih0YWJsZUxpc3QsICcudGFibGUtbGlzdC1oaWRkZW4nKTtcbiAgICBjb25zdCByZW1vdmUgPSByZW1vdmVJdGVtcyhIaWRkZW4sIG9uUmVtb3ZlVGFibGUpO1xuICAgIGNvbnN0IGRyYWcgPSBkcmFnSXRlbXMoSGlkZGVuLCBvbkRyYWdUYWJsZSk7XG4gICAgY29uc3QgTGlzdCA9IGxpc3QodGFibGVMaXN0LCB7XG4gICAgICBsaXN0OiAnLnRhYmxlLWxpc3QtbGlzdCcsXG4gICAgICBvbkRyYWc6IGRyYWcsXG4gICAgICBvblJlbW92ZTogcmVtb3ZlLFxuICAgICAgbGlzdFRlbXBsYXRlOiB0YWJsZUl0ZW0sXG4gICAgfSk7XG5cbiAgICBjb25zdCB3cmFwcGVyID0gdGFibGVMaXN0LnF1ZXJ5U2VsZWN0b3IoJy50ZXh0LWxpc3Qtd3JhcHBlcicpO1xuICAgIGNvbnN0IGtleSA9IHdyYXBwZXIucXVlcnlTZWxlY3RvcignLnRhYmxlLWxpc3Qta2V5Jyk7XG4gICAgY29uc3QgdmFsdWUgPSB3cmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJy50YWJsZS1saXN0LXZhbHVlJyk7XG5cbiAgICBhZGRSb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBjb25zdCByb3dEYXRhID0ge1xuICAgICAgICBrZXk6IGtleS52YWx1ZSxcbiAgICAgICAgdmFsdWU6IHZhbHVlLnZhbHVlLFxuICAgICAgfTtcblxuICAgICAgTGlzdC5hZGQocm93RGF0YSk7XG4gICAgICBIaWRkZW4uYWRkKHJvd0RhdGEpO1xuXG4gICAgICBrZXkudmFsdWUgPSAnJztcbiAgICAgIHZhbHVlLnZhbHVlID0gJyc7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5jb25zdCB0YWJsZUl0ZW0gPSByb3dEYXRhID0+IHtcbiAgcmV0dXJuIGA8bGkgY2xhc3M9XCJ0ZXh0LWxpc3QtaXRlbSB0YWJsZS1saXN0LWl0ZW1cIj5cbiAgICA8c3BhbiBjbGFzcz1cInRhYmxlLWxpc3Qta2V5XCI+JHtyb3dEYXRhLmtleX08L3NwYW4+XG4gICAgPHNwYW4gY2xhc3M9XCJ0YWJsZS1saXN0LXZhbHVlXCI+JHtyb3dEYXRhLnZhbHVlfTwvc3Bhbj5cbiAgICA8c3ZnIHZpZXdCb3g9XCIwIDAgMjAgMjBcIj5cbiAgICAgICAgPHBhdGggZD1cIk0xMCAyYzQuNDIgMCA4IDMuNTggOCA4cy0zLjU4IDgtOCA4LTgtMy41OC04LTggMy41OC04IDgtOHpNMTUgMTNsLTMtMyAzLTMtMi0yLTMgMy0zLTMtMiAyIDMgMy0zIDMgMiAyIDMtMyAzIDN6XCI+PC9wYXRoPlxuICAgIDwvc3ZnPlxuPC9saT5gO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3RhYmxlLWxpc3QuanMiXSwic291cmNlUm9vdCI6IiJ9